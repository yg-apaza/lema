package lema;
import java_cup.runtime.*;

parser code
{:
    public Nodo raiz;

    public void report_error(String message, Object info)
    {
   
        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol)
        {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0)
            {                
                m.append(" en la lÃ­nea " + (s.left + 1));   

                if (s.right >= 0)                    
                    m.append(", columna " + (s.right + 1));
            }
        }

        m.append(" : " + message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info)
    {
        report_error(message, info);
        System.exit(1);
    }
:};


/* DECLARACION DE TERMINALES */

terminal Nodopr_const, pr_vacio, pr_entero, pr_real, pr_cadena, 
par_ab, par_ce, cor_ab, cor_ce, ll_ab, ll_ce, 
mas, menos, prod, div, mod, transp, inv, incr, decr, 
ident, dif, menor, mayor, menor_igual, mayor_igual, y, o, neg, igual, 
pr_suma, pr_resta, pr_prod, pr_transp, pr_inv, 
a_suma, a_resta, a_prod, a_div, a_mod, 
sig_int, sig_pun, 
octa_e, octa_r, hexa_e, hexa_r, numero, real, cadena, 
pr_leer, pr_mostrar, 
pr_principal,
pr_si, pr_sino, pr_mientras, pr_hacer, pr_para, pr_selector, pr_saltar, pr_caso, pr_default, pr_retornar,
punto_coma, coma,
id, premas, premenos ;




/* DECLARACION DE NO TERMINALES */

non terminal PROGRAMA, 
PROGRAMAPRINCIPAL,

EXPRESION, EXPGEN,
SENTENCIA, NSENTENCIA,

DECLARACION, DECLARACIONFUNCION, DECLARACIONFUNCIONCABECERA, 
DEFINICIONVARIABLECAB, DECLARACIONCON,
DEFINICIONVARIABLE,  DEFINICIONFUNCION,
DECSIMPLE, DECVECT, DECMAT, 
DECENTERO, DECREAL, DECALL,
DECCON, DECCONALL,
DECCAD, DECCADALL,
DEFINICIONPROTOTIPO,

PARAMETRO, PARAMETROBINARIO, PARAMETROUNARIO,
ARGUMENTO,

ASIGNACION, LLAMADAFUNCION, 
CONDICIONALHACERMIENTRAS, CONDICIONALMIENTRAS, CONDICIONALPARA, CONDICIONALSI, 
SENTSELECTOR, SENTDEFECTO,
NCASO, SENTCASO, 

ESCRITURA, LECTURA, 

BLOQUE,
MATRIZ, NELEMENTO, NVECTOR, VECTOR,
INDICE, INI, ACT,
CONDICIONAL, CONTROLADOR, 

OPERADORBINARIO, OPERADORUNARIO, OPERADORUNARIO2, OPERANDOENTERO, OPERADORASIGNACION, OPERADORPALABRAUNARIO, OPERADORPALABRABINARIO,
OPERADORFUNCION, OPERADORCOND, 
OPERANDO,
TIPONUMERO, TIPOVARIABLEFUNCION;




/* PRECEDENCIA */

precedence left y, o;
precedence left ident, dif, menor, mayor, menor_igual, mayor_igual;
precedence left mas, menos;
precedence left mod;
precedence left prod, div;
precedence left transp, inv;
precedence right incr, decr, neg;
precedence right premas, premenos;

precedence nonassoc pr_const; 
precedence nonassoc pr_vacio; 
precedence nonassoc pr_entero; 
precedence nonassoc pr_real; 
precedence nonassoc pr_cadena; 
 
precedence nonassoc par_ab; 
precedence nonassoc par_ce; 
precedence nonassoc cor_ab; 
precedence nonassoc cor_ce;
precedence nonassoc ll_ab; 
precedence nonassoc ll_ce; 
 
precedence nonassoc pr_suma; 
precedence nonassoc pr_resta; 
precedence nonassoc pr_prod; 
precedence nonassoc pr_transp; 
precedence nonassoc pr_inv; 
 
precedence nonassoc igual; 
precedence nonassoc a_suma; 
precedence nonassoc a_resta; 
precedence nonassoc a_prod; 
precedence nonassoc a_div; 
precedence nonassoc a_mod; 
precedence nonassoc sig_int; 
precedence nonassoc sig_pun; 
 
precedence nonassoc octa_e; 
precedence nonassoc octa_r; 
precedence nonassoc hexa_e; 
precedence nonassoc hexa_r; 
precedence nonassoc numero; 
precedence nonassoc real; 
precedence nonassoc cadena; 

precedence nonassoc pr_leer; 
precedence nonassoc pr_mostrar; 
precedence nonassoc punto_coma; 
precedence nonassoc coma; 
precedence nonassoc pr_retornar; 
precedence nonassoc pr_si; 
precedence nonassoc pr_sino; 
precedence nonassoc pr_mientras; 
precedence nonassoc pr_hacer; 
precedence nonassoc pr_para; 
precedence nonassoc pr_selector; 
precedence nonassoc pr_saltar; 
precedence nonassoc pr_caso; 
precedence nonassoc pr_default; 
precedence nonassoc pr_principal; 
precedence nonassoc id; 
 
start with PROGRAMA;


PROGRAMA  ::= DEFINICIONVARIABLECAB PROGRAMAPRINCIPAL 
;
PROGRAMA  ::= DEFINICIONVARIABLECAB PROGRAMAPRINCIPAL DEFINICIONFUNCION 
;
PROGRAMA  ::= PROGRAMAPRINCIPAL DEFINICIONFUNCION 
;
PROGRAMA  ::= PROGRAMAPRINCIPAL
;






PROGRAMAPRINCIPAL  ::= pr_principal par_ab par_ce BLOQUE 
;


DEFINICIONVARIABLECAB  ::= DECLARACION  
;
DEFINICIONVARIABLECAB  ::= DECLARACIONCON 
;
DEFINICIONVARIABLECAB  ::= DEFINICIONPROTOTIPO 
;

DEFINICIONVARIABLECAB  ::= DECLARACION DEFINICIONVARIABLECAB 
;
DEFINICIONVARIABLECAB  ::= DECLARACIONCON DEFINICIONVARIABLECAB 
;
DEFINICIONVARIABLECAB  ::= DEFINICIONPROTOTIPO DEFINICIONVARIABLECAB 
;


DEFINICIONPROTOTIPO	::= pr_entero id par_ab PARAMETROPROTOTIPO par_ce punto_coma
;
DEFINICIONPROTOTIPO	::= pr_entero id par_ab par_ce punto_coma
;
DEFINICIONPROTOTIPO	::= pr_real id par_ab PARAMETROPROTOTIPO par_ce punto_coma
;
DEFINICIONPROTOTIPO	::= pr_real id par_ab par_ce punto_coma
;
DEFINICIONPROTOTIPO	::= pr_vacio id par_ab PARAMETROPROTOTIPO par_ce punto_coma
;
DEFINICIONPROTOTIPO	::= pr_vacio id par_ab par_ce punto_coma
;

PARAMETROPROTOTIPO  ::= TIPONUMERO coma PARAMETROPROTOTIPO 
;
PARAMETROPROTOTIPO  ::= TIPONUMERO INDICE INDICE coma PARAMETROPROTOTIPO 
;
PARAMETROPROTOTIPO  ::= TIPONUMERO INDICE coma PARAMETROPROTOTIPO 
;
PARAMETROPROTOTIPO  ::= TIPONUMERO INDICE INDICE 
;
PARAMETROPROTOTIPO  ::= TIPONUMERO INDICE 
;
PARAMETROPROTOTIPO  ::= TIPONUMERO 
;


DEFINICIONFUNCION  ::= DECLARACIONFUNCION DEFINICIONFUNCION  
;
DEFINICIONFUNCION  ::= DECLARACIONFUNCION 
;



DECLARACION  ::= pr_entero DECENTERO  				{:System.out.println("Declaracion entero");:}
;
DECLARACION  ::= pr_real DECREAL 					{:System.out.println("Declaracion real");:}
;
DECLARACION  ::= pr_cadena DECCADALL punto_coma  	{:System.out.println("Declaracion cadena");:}
;




DECLARACIONCON  ::= pr_const pr_entero DECCONALL punto_coma 
;
DECLARACIONCON  ::= pr_const pr_real DECCONALL punto_coma 
;
DECLARACIONCON  ::= pr_const pr_entero id igual octa_e punto_coma 
;
DECLARACIONCON  ::= pr_const pr_entero id igual hexa_e punto_coma 
;
DECLARACIONCON  ::= pr_const pr_real id igual octa_r punto_coma 
;
DECLARACIONCON  ::= pr_const pr_real id igual hexa_r punto_coma 
;

DECLARACIONFUNCION  ::= DECLARACIONFUNCIONCABECERA BLOQUE 
;




DECENTERO ::= id igual octa_e punto_coma
;
DECENTERO ::= id igual hexa_e punto_coma
;
DECENTERO ::=  DECALL punto_coma
; 


DECREAL ::= id igual octa_r punto_coma
;
DECREAL ::= id igual hexa_r punto_coma
;
DECREAL ::= DECALL punto_coma
;




DECALL  ::= DECSIMPLE 
;
DECALL  ::= DECVECT
;
DECALL  ::= DECMAT
;
DECALL  ::= DECSIMPLE coma DECALL 
;
DECALL  ::= DECVECT coma DECALL 
;
DECALL  ::= DECMAT coma DECALL 
;



DECSIMPLE  ::= id igual EXPGEN 
;
DECSIMPLE  ::= id 
;

DECVECT  ::= id INDICE igual EXPGEN 
;
DECVECT  ::= id INDICE igual VECTOR 
;
DECVECT  ::= id INDICE 
;

DECMAT  ::= id INDICE INDICE igual EXPGEN 
;
DECMAT  ::= id INDICE INDICE igual MATRIZ 
;
DECMAT  ::= id INDICE INDICE 
;


DECCAD  ::= id igual cadena 
;
DECCAD  ::= id 
;

DECCADALL	::= DECCAD
;
DECCADALL	::= DECCAD coma DECCADALL
;



DECCONALL  ::= DECCON 
;
DECCONALL  ::= DECCON coma DECCONALL 
;


DECCON	::= id igual EXPGEN 
;
DECCON	::= id INDICE igual EXPGEN 
;
DECCON	::= id INDICE igual VECTOR 
;
DECCON	::= id INDICE INDICE igual EXPGEN  
;
DECCON	::= id INDICE INDICE igual MATRIZ  
;




BLOQUE  ::= ll_ab NSENTENCIA ll_ce 
;
BLOQUE  ::= ll_ab DEFINICIONVARIABLE NSENTENCIA ll_ce 
;
BLOQUE  ::= ll_ab DEFINICIONVARIABLE ll_ce 
;
BLOQUE  ::= ll_ab ll_ce 
;

NSENTENCIA  ::= SENTENCIA NSENTENCIA   
;
NSENTENCIA  ::= SENTENCIA   
;

SENTENCIA  ::= ASIGNACION 					{:System.out.println("Asignacion");:} 
;
SENTENCIA  ::= CONDICIONALHACERMIENTRAS 	{:System.out.println("Hacer mientras");:} 
;
SENTENCIA  ::= CONDICIONALMIENTRAS 			{:System.out.println("Mientras");:} 
;
SENTENCIA  ::= CONDICIONALPARA 				{:System.out.println("Para");:} 
;
SENTENCIA  ::= CONDICIONALSI 				{:System.out.println("Si");:} 
;
SENTENCIA  ::= SENTSELECTOR 				{:System.out.println("Selector");:} 
;
SENTENCIA  ::= LLAMADAFUNCION punto_coma 	{:System.out.println("Llamada a funcion");:} 
;
SENTENCIA  ::= ESCRITURA 					{:System.out.println("Escritura");:} 
;
SENTENCIA  ::= LECTURA 						{:System.out.println("Lectura");:} 
;
SENTENCIA  ::= ACT punto_coma 				{:System.out.println("Actualizacion");:} 
;
SENTENCIA  ::= pr_retornar EXPGEN punto_coma{:System.out.println("Retornar valor");:} 
;
SENTENCIA  ::= pr_retornar punto_coma		{:System.out.println("Retornar vacio");:} 
;



ACT  ::= id decr 
;
ACT  ::= id incr 
;
ACT  ::= id OPERADORASIGNACION EXPGEN
;


EXPGEN ::= OPERANDO 
;
EXPGEN ::= EXPRESION 
;



EXPRESION  ::= OPERANDO OPERADORBINARIO OPERANDO 
;
EXPRESION  ::= OPERANDO OPERADORUNARIO 
;
EXPRESION  ::= OPERADORUNARIO2 OPERANDO 
;
EXPRESION  ::= OPERADORFUNCION 
;
EXPRESION  ::= OPERADORCOND
;
EXPRESION  ::= OPERADORUNARIO2 EXPRESION 
;
EXPRESION  ::= EXPRESION OPERADORUNARIO 
;
EXPRESION  ::= EXPRESION OPERADORBINARIO EXPRESION 
;
EXPRESION  ::= EXPRESION OPERADORBINARIO OPERANDO 
;
EXPRESION  ::= OPERANDO OPERADORBINARIO EXPRESION 
;
EXPRESION  ::= par_ab EXPRESION par_ce 
;
EXPRESION  ::= par_ab OPERANDO par_ce 
;


OPERADORUNARIO2 ::= neg
;
OPERADORUNARIO2 ::= mas %prec premas
;
OPERADORUNARIO2 ::= menos %prec premenos
;

ARGUMENTO  ::= EXPGEN 
;
ARGUMENTO  ::= EXPGEN coma ARGUMENTO 
;



ASIGNACION  ::= id igual cadena punto_coma 
;

ASIGNACION  ::= id OPERADORASIGNACION EXPGEN punto_coma 
;

ASIGNACION  ::= id INDICE OPERADORASIGNACION EXPGEN punto_coma 
;

ASIGNACION  ::= id INDICE INDICE OPERADORASIGNACION EXPGEN punto_coma 
;




CONDICIONAL  ::= par_ab OPERANDO par_ce 
;
CONDICIONAL  ::= par_ab EXPRESION par_ce 
;


CONDICIONALHACERMIENTRAS  ::= pr_hacer BLOQUE pr_mientras CONDICIONAL punto_coma 
;
CONDICIONALHACERMIENTRAS  ::= pr_hacer SENTENCIA pr_mientras CONDICIONAL punto_coma 
;

CONDICIONALMIENTRAS  ::= pr_mientras CONDICIONAL BLOQUE 
;
CONDICIONALMIENTRAS  ::= pr_mientras CONDICIONAL SENTENCIA 
;


CONDICIONALPARA  ::= pr_para CONTROLADOR BLOQUE 
;
CONDICIONALPARA  ::= pr_para CONTROLADOR SENTENCIA 
;


CONDICIONALSI  ::= pr_si CONDICIONAL BLOQUE 
;
CONDICIONALSI  ::= pr_si CONDICIONAL BLOQUE pr_sino BLOQUE 
;
CONDICIONALSI  ::= pr_si CONDICIONAL SENTENCIA 
;
CONDICIONALSI  ::= pr_si CONDICIONAL BLOQUE pr_sino SENTENCIA 
;
CONDICIONALSI  ::= pr_si CONDICIONAL SENTENCIA pr_sino BLOQUE 
;
CONDICIONALSI  ::= pr_si CONDICIONAL SENTENCIA pr_sino SENTENCIA 
;



CONTROLADOR  ::= par_ab INI punto_coma EXPGEN punto_coma ACT par_ce 
;


ESCRITURA  ::= pr_mostrar par_ab EXPGEN par_ce punto_coma 
;
ESCRITURA  ::= pr_mostrar par_ab cadena par_ce punto_coma 
;
ESCRITURA  ::= pr_mostrar par_ab par_ce punto_coma 
;

INDICE  ::= cor_ab EXPGEN cor_ce 
;


INI  ::= id igual EXPGEN 
;
INI  ::= pr_entero id igual EXPGEN 
;


LECTURA  ::= pr_leer par_ab id par_ce punto_coma 
;



MATRIZ  ::= ll_ab NVECTOR ll_ce 
;

NVECTOR  ::= VECTOR 
;
NVECTOR  ::= VECTOR coma NVECTOR 
;

VECTOR  ::= ll_ab NELEMENTO ll_ce 
;

NELEMENTO  ::= EXPGEN 
;
NELEMENTO  ::= EXPGEN coma NELEMENTO 
;


DECLARACIONFUNCIONCABECERA  ::= TIPOVARIABLEFUNCION id par_ab PARAMETRO par_ce 		{:System.out.println("Funcion cabecera con parametro");:}
;
DECLARACIONFUNCIONCABECERA  ::= TIPOVARIABLEFUNCION id par_ab par_ce 				{:System.out.println("Funcion cabecera");:}
;

TIPOVARIABLEFUNCION  ::= TIPONUMERO 
;
TIPOVARIABLEFUNCION  ::= pr_vacio 
;

DEFINICIONVARIABLE  ::= DECLARACION DEFINICIONVARIABLE 
;
DEFINICIONVARIABLE  ::= DECLARACION 
;



PARAMETRO  ::= TIPONUMERO id coma PARAMETRO 
;
PARAMETRO  ::= TIPONUMERO id INDICE coma PARAMETRO 
;
PARAMETRO  ::= TIPONUMERO id INDICE INDICE coma PARAMETRO 
;
PARAMETRO  ::= TIPONUMERO id INDICE INDICE 
;
PARAMETRO  ::= TIPONUMERO id INDICE 
;
PARAMETRO  ::= TIPONUMERO id 
;

PARAMETROBINARIO  ::= par_ab EXPGEN coma EXPGEN par_ce 
;
PARAMETROUNARIO  ::= par_ab EXPGEN par_ce  
;



SENTSELECTOR  ::= pr_selector CONDICIONAL ll_ab NCASO SENTDEFECTO ll_ce 
;
SENTSELECTOR  ::= pr_selector CONDICIONAL ll_ab NCASO ll_ce 
;

NCASO  ::= SENTCASO NCASO 
;
NCASO  ::= SENTCASO 
;

SENTCASO  ::= pr_caso numero sig_pun NSENTENCIA pr_saltar punto_coma 
;
SENTCASO  ::= pr_caso numero sig_pun pr_saltar punto_coma 
;
SENTCASO  ::= pr_caso numero sig_pun NSENTENCIA 
;
SENTCASO  ::= pr_caso numero sig_pun 
;



SENTDEFECTO  ::= pr_default sig_pun NSENTENCIA pr_saltar punto_coma  
;
SENTDEFECTO  ::= pr_default sig_pun pr_saltar punto_coma 
;



LLAMADAFUNCION  ::= id par_ab par_ce 
;
LLAMADAFUNCION  ::= id par_ab ARGUMENTO par_ce 
;



OPERADORFUNCION  ::= OPERADORPALABRABINARIO PARAMETROBINARIO  
;
OPERADORFUNCION  ::= OPERADORPALABRAUNARIO PARAMETROUNARIO 
;


OPERADORCOND  ::= CONDICIONAL sig_int EXPGEN sig_pun EXPGEN 
;


OPERADORASIGNACION  ::= a_div 
;
OPERADORASIGNACION  ::= a_prod 
;
OPERADORASIGNACION  ::= a_resta 
;
OPERADORASIGNACION  ::= a_suma 
;
OPERADORASIGNACION  ::= igual 
;
OPERADORASIGNACION  ::= a_mod 
;

OPERADORBINARIO  ::= dif 
;
OPERADORBINARIO  ::= div 
;
OPERADORBINARIO  ::= ident 
;
OPERADORBINARIO  ::= mas 
;
OPERADORBINARIO  ::= mayor 
;
OPERADORBINARIO  ::= mayor_igual 
;
OPERADORBINARIO  ::= menor 
;
OPERADORBINARIO  ::= menor_igual 
;
OPERADORBINARIO  ::= menos 
;
OPERADORBINARIO  ::= mod 
;
OPERADORBINARIO  ::= o 
;
OPERADORBINARIO  ::= prod 
;
OPERADORBINARIO  ::= y 
;

OPERADORUNARIO  ::= inv 
;
OPERADORUNARIO  ::= transp 
;

OPERANDOENTERO  ::= LLAMADAFUNCION 
;
OPERANDOENTERO  ::= id INDICE INDICE   
;
OPERANDOENTERO  ::= id INDICE 
;
OPERANDOENTERO  ::= id 
;
OPERANDOENTERO  ::= numero 
;

OPERADORPALABRABINARIO  ::= pr_suma 
;
OPERADORPALABRABINARIO  ::= pr_resta 
;
OPERADORPALABRABINARIO  ::= pr_prod 
;
OPERADORPALABRAUNARIO  ::= pr_transp 
;
OPERADORPALABRAUNARIO  ::= pr_inv 
;



OPERANDO  ::= OPERANDOENTERO 
;
OPERANDO  ::= real 
;
OPERANDO  ::= octa_e 
;
OPERANDO  ::= octa_r 
;
OPERANDO  ::= hexa_e
;
OPERANDO  ::= hexa_r 
;



TIPONUMERO  ::= pr_entero 
;
TIPONUMERO  ::= pr_real 
;
