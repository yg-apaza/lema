
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package lema.analizadorSintactico;

import java.util.ArrayList;
import lema.analizadorSemantico.Nodo;
import lema.analizadorSemantico.accion;
import lema.analizadorLexico.sym;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\315\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\004\000\002\002\003\000\002\003\006" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\004\000\002\046\004\000\002\046\004\000\002" +
    "\015\010\000\002\015\007\000\002\015\010\000\002\015" +
    "\007\000\002\015\010\000\002\015\007\000\002\061\005" +
    "\000\002\061\007\000\002\061\006\000\002\061\005\000" +
    "\002\061\004\000\002\061\003\000\002\065\004\000\002" +
    "\065\003\000\002\047\004\000\002\047\004\000\002\047" +
    "\005\000\002\050\006\000\002\050\006\000\002\050\010" +
    "\000\002\050\010\000\002\050\010\000\002\050\010\000" +
    "\002\007\004\000\002\051\006\000\002\051\006\000\002" +
    "\051\004\000\002\052\006\000\002\052\006\000\002\052" +
    "\004\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\005\000\002\053\005\000\002\053\005\000" +
    "\002\010\005\000\002\010\003\000\002\011\006\000\002" +
    "\011\004\000\002\012\007\000\002\012\005\000\002\014" +
    "\005\000\002\014\003\000\002\057\003\000\002\057\005" +
    "\000\002\060\003\000\002\060\005\000\002\013\005\000" +
    "\002\013\006\000\002\013\007\000\002\044\005\000\002" +
    "\044\006\000\002\044\005\000\002\044\004\000\002\062" +
    "\004\000\002\062\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\004\000\002\006\003\000\002" +
    "\006\003\000\002\006\004\000\002\006\005\000\002\006" +
    "\004\000\002\006\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\005\003\000\002\005\003\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\006\000\002\004\004" +
    "\000\002\004\006\000\002\004\004\000\002\004\006\000" +
    "\002\004\003\000\002\004\003\000\002\004\005\000\002" +
    "\004\005\000\002\054\003\000\002\054\005\000\002\016" +
    "\006\000\002\016\006\000\002\016\006\000\002\016\006" +
    "\000\002\016\006\000\002\016\006\000\002\016\006\000" +
    "\002\016\007\000\002\016\007\000\002\016\007\000\002" +
    "\016\007\000\002\016\007\000\002\016\007\000\002\016" +
    "\010\000\002\016\010\000\002\016\010\000\002\016\010" +
    "\000\002\016\010\000\002\016\010\000\002\035\005\000" +
    "\002\035\005\000\002\020\007\000\002\020\007\000\002" +
    "\021\005\000\002\021\005\000\002\022\005\000\002\022" +
    "\005\000\002\023\005\000\002\023\007\000\002\023\005" +
    "\000\002\023\007\000\002\023\007\000\002\023\007\000" +
    "\002\063\011\000\002\027\007\000\002\027\007\000\002" +
    "\027\006\000\002\032\005\000\002\033\005\000\002\033" +
    "\006\000\002\030\007\000\002\031\005\000\002\066\007" +
    "\000\002\066\006\000\002\043\003\000\002\043\003\000" +
    "\002\045\004\000\002\045\003\000\002\067\006\000\002" +
    "\067\007\000\002\067\010\000\002\067\006\000\002\067" +
    "\005\000\002\067\004\000\002\055\007\000\002\056\005" +
    "\000\002\024\010\000\002\024\007\000\002\064\004\000" +
    "\002\064\003\000\002\026\006\000\002\026\005\000\002" +
    "\025\005\000\002\025\004\000\002\017\005\000\002\017" +
    "\006\000\002\037\004\000\002\037\004\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\040\013\000" +
    "\002\036\003\000\002\036\005\000\002\036\004\000\002" +
    "\036\003\000\002\036\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\042\003\000" +
    "\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01b7\000\016\004\010\005\013\006\004\007\007\010" +
    "\016\067\017\001\002\000\004\104\u01b3\001\002\000\012" +
    "\002\ufffd\005\u0166\006\u0165\007\u0162\001\002\000\004\002" +
    "\u01b1\001\002\000\004\104\u01aa\001\002\000\006\006\u018d" +
    "\007\u018c\001\002\000\016\004\010\005\013\006\004\007" +
    "\007\010\016\067\ufffb\001\002\000\016\004\010\005\013" +
    "\006\004\007\007\010\016\067\ufff9\001\002\000\004\104" +
    "\u017a\001\002\000\004\067\017\001\002\000\016\004\010" +
    "\005\013\006\004\007\007\010\016\067\ufffa\001\002\000" +
    "\004\104\u0159\001\002\000\004\011\020\001\002\000\004" +
    "\012\021\001\002\000\004\015\023\001\002\000\012\002" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\001\002\000\036\006\056" +
    "\007\054\010\016\016\052\065\033\066\025\070\042\072" +
    "\043\073\037\074\040\075\024\076\036\101\053\104\047" +
    "\001\002\000\004\011\376\001\002\000\004\011\u013f\001" +
    "\002\000\030\016\u013d\065\033\066\025\070\042\072\043" +
    "\073\037\074\040\075\024\076\036\101\053\104\047\001" +
    "\002\000\036\016\uffba\065\uffba\066\uffba\070\uffba\071\uffba" +
    "\072\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba\100" +
    "\uffba\101\uffba\104\uffba\001\002\000\034\016\uffbd\065\033" +
    "\066\025\070\042\072\043\073\037\074\040\075\024\076" +
    "\036\077\uffbd\100\uffbd\101\053\104\047\001\002\000\036" +
    "\006\056\007\054\010\016\016\uff5b\065\uff5b\066\uff5b\070" +
    "\uff5b\072\uff5b\073\uff5b\074\uff5b\075\uff5b\076\uff5b\101\uff5b" +
    "\104\uff5b\001\002\000\036\016\uffb4\065\uffb4\066\uffb4\070" +
    "\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4" +
    "\077\uffb4\100\uffb4\101\uffb4\104\uffb4\001\002\000\004\011" +
    "\u0136\001\002\000\004\102\u0135\001\002\000\036\016\uffbb" +
    "\065\uffbb\066\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074" +
    "\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb\104\uffbb" +
    "\001\002\000\004\102\u0134\001\002\000\030\015\023\065" +
    "\033\066\025\070\042\072\043\073\037\074\040\075\024" +
    "\076\036\101\053\104\047\001\002\000\004\011\u010f\001" +
    "\002\000\036\016\uffbc\065\uffbc\066\uffbc\070\uffbc\071\uffbc" +
    "\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100" +
    "\uffbc\101\uffbc\104\uffbc\001\002\000\004\011\376\001\002" +
    "\000\004\011\376\001\002\000\036\016\uffb9\065\uffb9\066" +
    "\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9" +
    "\076\uffb9\077\uffb9\100\uffb9\101\uffb9\104\uffb9\001\002\000" +
    "\036\016\uffb7\065\uffb7\066\uffb7\070\uffb7\071\uffb7\072\uffb7" +
    "\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101" +
    "\uffb7\104\uffb7\001\002\000\036\016\uffb8\065\uffb8\066\uffb8" +
    "\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076" +
    "\uffb8\077\uffb8\100\uffb8\101\uffb8\104\uffb8\001\002\000\026" +
    "\011\175\013\066\026\301\027\303\041\311\047\306\050" +
    "\310\051\302\052\307\053\304\001\002\000\004\016\300" +
    "\001\002\000\036\016\uffb5\065\uffb5\066\uffb5\070\uffb5\071" +
    "\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5" +
    "\100\uffb5\101\uffb5\104\uffb5\001\002\000\046\002\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\016\uffbf\065\uffbf\066\uffbf\070\uffbf" +
    "\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077" +
    "\uffbf\100\uffbf\101\uffbf\104\uffbf\001\002\000\046\011\074" +
    "\015\077\017\123\020\112\040\073\042\102\043\115\044" +
    "\121\045\103\046\101\056\122\057\113\060\120\061\110" +
    "\062\100\063\114\102\276\104\116\001\002\000\004\104" +
    "\266\001\002\000\004\102\263\001\002\000\004\104\064" +
    "\001\002\000\006\102\uffd5\103\261\001\002\000\004\102" +
    "\260\001\002\000\006\102\uffd7\103\256\001\002\000\044" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\016\uffe7\065" +
    "\uffe7\066\uffe7\067\uffe7\070\uffe7\072\uffe7\073\uffe7\074\uffe7" +
    "\075\uffe7\076\uffe7\101\uffe7\104\uffe7\001\002\000\006\102" +
    "\uffd6\103\252\001\002\000\012\013\066\041\065\102\uffd0" +
    "\103\uffd0\001\002\000\044\011\074\015\077\017\123\020" +
    "\112\040\073\042\102\043\115\044\121\045\103\046\101" +
    "\056\247\057\113\060\246\061\110\062\100\063\114\104" +
    "\116\001\002\000\044\011\074\015\077\017\123\020\112" +
    "\040\073\042\102\043\115\044\121\045\103\046\101\056" +
    "\122\057\113\060\120\061\110\062\100\063\114\104\116" +
    "\001\002\000\012\013\066\041\070\102\uffce\103\uffce\001" +
    "\002\000\044\011\074\015\077\017\123\020\112\040\073" +
    "\042\102\043\115\044\121\045\103\046\101\056\122\057" +
    "\113\060\120\061\110\062\100\063\114\104\116\001\002" +
    "\000\010\041\072\102\uffcc\103\uffcc\001\002\000\044\011" +
    "\074\015\077\017\123\020\112\040\073\042\102\043\115" +
    "\044\121\045\103\046\101\056\122\057\113\060\120\061" +
    "\110\062\100\063\114\104\116\001\002\000\024\011\237" +
    "\015\077\056\122\057\113\060\120\061\110\062\100\063" +
    "\114\104\116\001\002\000\044\011\074\015\077\017\123" +
    "\020\112\040\073\042\102\043\115\044\121\045\103\046" +
    "\101\056\122\057\113\060\120\061\110\062\100\063\114" +
    "\104\116\001\002\000\044\017\150\020\137\021\142\022" +
    "\132\023\145\024\134\025\136\030\135\031\146\032\140" +
    "\033\147\034\141\035\143\036\144\037\133\102\uffcd\103" +
    "\uffcd\001\002\000\052\012\uff37\014\uff37\016\uff37\017\uff37" +
    "\020\uff37\021\uff37\022\uff37\023\uff37\024\uff37\025\uff37\030" +
    "\uff37\031\uff37\032\uff37\033\uff37\034\uff37\035\uff37\036\uff37" +
    "\037\uff37\102\uff37\103\uff37\001\002\000\044\011\074\015" +
    "\077\017\123\020\112\040\073\042\102\043\115\044\121" +
    "\045\103\046\101\056\122\057\113\060\120\061\110\062" +
    "\100\063\114\104\116\001\002\000\052\012\uff3e\014\uff3e" +
    "\016\uff3e\017\uff3e\020\uff3e\021\uff3e\022\uff3e\023\uff3e\024" +
    "\uff3e\025\uff3e\030\uff3e\031\uff3e\032\uff3e\033\uff3e\034\uff3e" +
    "\035\uff3e\036\uff3e\037\uff3e\102\uff3e\103\uff3e\001\002\000" +
    "\004\011\223\001\002\000\004\011\167\001\002\000\004" +
    "\011\223\001\002\000\004\054\212\001\002\000\052\012" +
    "\uff42\014\uff42\016\uff42\017\uff42\020\uff42\021\uff42\022\uff42" +
    "\023\uff42\024\uff42\025\uff42\030\uff42\031\uff42\032\uff42\033" +
    "\uff42\034\uff42\035\uff42\036\uff42\037\uff42\102\uff42\103\uff42" +
    "\001\002\000\052\012\uff90\014\uff90\016\uff90\017\uff90\020" +
    "\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\030\uff90" +
    "\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037" +
    "\uff90\102\uff90\103\uff90\001\002\000\052\012\uffa7\014\uffa7" +
    "\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7" +
    "\035\uffa7\036\uffa7\037\uffa7\102\uffa7\103\uffa7\001\002\000" +
    "\052\012\uff38\014\uff38\016\uff38\017\uff38\020\uff38\021\uff38" +
    "\022\uff38\023\uff38\024\uff38\025\uff38\030\uff38\031\uff38\032" +
    "\uff38\033\uff38\034\uff38\035\uff38\036\uff38\037\uff38\102\uff38" +
    "\103\uff38\001\002\000\052\012\uff8f\014\uff8f\016\uff8f\017" +
    "\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f" +
    "\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036" +
    "\uff8f\037\uff8f\102\uff8f\103\uff8f\001\002\000\024\011\207" +
    "\015\077\056\122\057\113\060\120\061\110\062\100\063" +
    "\114\104\116\001\002\000\052\012\uff3a\014\uff3a\016\uff3a" +
    "\017\uff3a\020\uff3a\021\uff3a\022\uff3a\023\uff3a\024\uff3a\025" +
    "\uff3a\030\uff3a\031\uff3a\032\uff3a\033\uff3a\034\uff3a\035\uff3a" +
    "\036\uff3a\037\uff3a\102\uff3a\103\uff3a\001\002\000\052\012" +
    "\uff3c\014\uff3c\016\uff3c\017\uff3c\020\uff3c\021\uff3c\022\uff3c" +
    "\023\uff3c\024\uff3c\025\uff3c\030\uff3c\031\uff3c\032\uff3c\033" +
    "\uff3c\034\uff3c\035\uff3c\036\uff3c\037\uff3c\102\uff3c\103\uff3c" +
    "\001\002\000\004\011\167\001\002\000\056\011\175\012" +
    "\uff3f\013\066\014\uff3f\016\uff3f\017\uff3f\020\uff3f\021\uff3f" +
    "\022\uff3f\023\uff3f\024\uff3f\025\uff3f\030\uff3f\031\uff3f\032" +
    "\uff3f\033\uff3f\034\uff3f\035\uff3f\036\uff3f\037\uff3f\102\uff3f" +
    "\103\uff3f\001\002\000\052\012\uff3d\014\uff3d\016\uff3d\017" +
    "\uff3d\020\uff3d\021\uff3d\022\uff3d\023\uff3d\024\uff3d\025\uff3d" +
    "\030\uff3d\031\uff3d\032\uff3d\033\uff3d\034\uff3d\035\uff3d\036" +
    "\uff3d\037\uff3d\102\uff3d\103\uff3d\001\002\000\052\012\uff39" +
    "\014\uff39\016\uff39\017\uff39\020\uff39\021\uff39\022\uff39\023" +
    "\uff39\024\uff39\025\uff39\030\uff39\031\uff39\032\uff39\033\uff39" +
    "\034\uff39\035\uff39\036\uff39\037\uff39\102\uff39\103\uff39\001" +
    "\002\000\004\011\167\001\002\000\052\012\uff3b\014\uff3b" +
    "\016\uff3b\017\uff3b\020\uff3b\021\uff3b\022\uff3b\023\uff3b\024" +
    "\uff3b\025\uff3b\030\uff3b\031\uff3b\032\uff3b\033\uff3b\034\uff3b" +
    "\035\uff3b\036\uff3b\037\uff3b\102\uff3b\103\uff3b\001\002\000" +
    "\024\011\126\015\077\056\122\057\113\060\120\061\110" +
    "\062\100\063\114\104\116\001\002\000\052\012\uffa6\014" +
    "\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\102\uffa6\103\uffa6\001\002" +
    "\000\052\012\uff94\014\uff94\016\uff94\017\uff94\020\uff94\021" +
    "\uff94\022\uff94\023\uff94\024\uff94\025\uff94\030\uff94\031\uff94" +
    "\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\102" +
    "\uff94\103\uff94\001\002\000\044\011\074\015\077\017\123" +
    "\020\112\040\073\042\102\043\115\044\121\045\103\046" +
    "\101\056\122\057\113\060\120\061\110\062\100\063\114" +
    "\104\116\001\002\000\040\017\150\020\137\021\142\022" +
    "\132\023\145\024\134\025\136\030\135\031\146\032\140" +
    "\033\147\034\141\035\143\036\144\037\133\001\002\000" +
    "\042\012\131\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\001\002\000\052\012\uff93" +
    "\014\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023" +
    "\uff93\024\uff93\025\uff93\030\uff93\031\uff93\032\uff93\033\uff93" +
    "\034\uff93\035\uff93\036\uff93\037\uff93\102\uff93\103\uff93\001" +
    "\002\000\044\011\074\015\077\017\123\020\112\040\073" +
    "\042\102\043\115\044\121\045\103\046\101\056\122\057" +
    "\113\060\120\061\110\062\100\063\114\104\116\001\002" +
    "\000\044\011\074\015\077\017\123\020\112\040\073\042" +
    "\102\043\115\044\121\045\103\046\101\056\122\057\113" +
    "\060\120\061\110\062\100\063\114\104\116\001\002\000" +
    "\052\012\uff97\014\uff97\016\uff97\017\uff97\020\uff97\021\uff97" +
    "\022\uff97\023\uff97\024\uff97\025\uff97\030\uff97\031\uff97\032" +
    "\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\102\uff97" +
    "\103\uff97\001\002\000\044\011\074\015\077\017\123\020" +
    "\112\040\073\042\102\043\115\044\121\045\103\046\101" +
    "\056\122\057\113\060\120\061\110\062\100\063\114\104" +
    "\116\001\002\000\052\012\uff98\014\uff98\016\uff98\017\uff98" +
    "\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\030" +
    "\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98" +
    "\037\uff98\102\uff98\103\uff98\001\002\000\044\011\074\015" +
    "\077\017\123\020\112\040\073\042\102\043\115\044\121" +
    "\045\103\046\101\056\122\057\113\060\120\061\110\062" +
    "\100\063\114\104\116\001\002\000\044\011\074\015\077" +
    "\017\123\020\112\040\073\042\102\043\115\044\121\045" +
    "\103\046\101\056\122\057\113\060\120\061\110\062\100" +
    "\063\114\104\116\001\002\000\044\011\074\015\077\017" +
    "\123\020\112\040\073\042\102\043\115\044\121\045\103" +
    "\046\101\056\122\057\113\060\120\061\110\062\100\063" +
    "\114\104\116\001\002\000\044\011\074\015\077\017\123" +
    "\020\112\040\073\042\102\043\115\044\121\045\103\046" +
    "\101\056\122\057\113\060\120\061\110\062\100\063\114" +
    "\104\116\001\002\000\044\011\074\015\077\017\123\020" +
    "\112\040\073\042\102\043\115\044\121\045\103\046\101" +
    "\056\122\057\113\060\120\061\110\062\100\063\114\104" +
    "\116\001\002\000\044\011\074\015\077\017\123\020\112" +
    "\040\073\042\102\043\115\044\121\045\103\046\101\056" +
    "\122\057\113\060\120\061\110\062\100\063\114\104\116" +
    "\001\002\000\044\011\074\015\077\017\123\020\112\040" +
    "\073\042\102\043\115\044\121\045\103\046\101\056\122" +
    "\057\113\060\120\061\110\062\100\063\114\104\116\001" +
    "\002\000\044\011\074\015\077\017\123\020\112\040\073" +
    "\042\102\043\115\044\121\045\103\046\101\056\122\057" +
    "\113\060\120\061\110\062\100\063\114\104\116\001\002" +
    "\000\044\011\074\015\077\017\123\020\112\040\073\042" +
    "\102\043\115\044\121\045\103\046\101\056\122\057\113" +
    "\060\120\061\110\062\100\063\114\104\116\001\002\000" +
    "\044\011\074\015\077\017\123\020\112\040\073\042\102" +
    "\043\115\044\121\045\103\046\101\056\122\057\113\060" +
    "\120\061\110\062\100\063\114\104\116\001\002\000\052" +
    "\012\uffa3\014\uffa3\016\uffa3\017\uffa3\020\uffa3\021\142\022" +
    "\132\023\145\024\134\025\136\030\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\102\uffa3\103" +
    "\uffa3\001\002\000\052\012\uff9f\014\uff9f\016\uff9f\017\150" +
    "\020\137\021\142\022\132\023\145\024\134\025\136\030" +
    "\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f" +
    "\037\uff9f\102\uff9f\103\uff9f\001\002\000\052\012\uffa5\014" +
    "\uffa5\016\uffa5\017\150\020\137\021\142\022\132\023\145" +
    "\024\134\025\136\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\102\uffa5\103\uffa5\001\002" +
    "\000\052\012\uff9b\014\uff9b\016\uff9b\017\uff9b\020\uff9b\021" +
    "\142\022\132\023\uff9b\024\134\025\136\030\uff9b\031\uff9b" +
    "\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\102" +
    "\uff9b\103\uff9b\001\002\000\052\012\uff99\014\uff99\016\uff99" +
    "\017\150\020\137\021\142\022\132\023\145\024\134\025" +
    "\136\030\135\031\146\032\140\033\147\034\141\035\143" +
    "\036\uff99\037\uff99\102\uff99\103\uff99\001\002\000\052\012" +
    "\uff9e\014\uff9e\016\uff9e\017\150\020\137\021\142\022\132" +
    "\023\145\024\134\025\136\030\uff9e\031\uff9e\032\uff9e\033" +
    "\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\102\uff9e\103\uff9e" +
    "\001\002\000\052\012\uffa1\014\uffa1\016\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\024\134\025\136\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\102\uffa1\103\uffa1\001\002\000\052\012\uff9c\014\uff9c" +
    "\016\uff9c\017\150\020\137\021\142\022\132\023\145\024" +
    "\134\025\136\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c" +
    "\035\uff9c\036\uff9c\037\uff9c\102\uff9c\103\uff9c\001\002\000" +
    "\052\012\uff9d\014\uff9d\016\uff9d\017\150\020\137\021\142" +
    "\022\132\023\145\024\134\025\136\030\uff9d\031\uff9d\032" +
    "\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\102\uff9d" +
    "\103\uff9d\001\002\000\052\012\uffa2\014\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\021\142\022\132\023\145\024\134\025\136" +
    "\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036" +
    "\uffa2\037\uffa2\102\uffa2\103\uffa2\001\002\000\052\012\uffa4" +
    "\014\uffa4\016\uffa4\017\150\020\137\021\142\022\132\023" +
    "\145\024\134\025\136\030\uffa4\031\uffa4\032\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\036\uffa4\037\uffa4\102\uffa4\103\uffa4\001" +
    "\002\000\052\012\uff9a\014\uff9a\016\uff9a\017\150\020\137" +
    "\021\142\022\132\023\145\024\134\025\136\030\135\031" +
    "\146\032\140\033\147\034\141\035\143\036\uff9a\037\uff9a" +
    "\102\uff9a\103\uff9a\001\002\000\052\012\uffa0\014\uffa0\016" +
    "\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\134" +
    "\025\136\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035" +
    "\uffa0\036\uffa0\037\uffa0\102\uffa0\103\uffa0\001\002\000\052" +
    "\012\uff46\014\uff46\016\uff46\017\uff46\020\uff46\021\uff46\022" +
    "\uff46\023\uff46\024\uff46\025\uff46\030\uff46\031\uff46\032\uff46" +
    "\033\uff46\034\uff46\035\uff46\036\uff46\037\uff46\102\uff46\103" +
    "\uff46\001\002\000\044\011\074\015\077\017\123\020\112" +
    "\040\073\042\102\043\115\044\121\045\103\046\101\056" +
    "\122\057\113\060\120\061\110\062\100\063\114\104\116" +
    "\001\002\000\042\017\150\020\137\021\142\022\132\023" +
    "\145\024\134\025\136\030\135\031\146\032\140\033\147" +
    "\034\141\035\143\036\144\037\133\103\171\001\002\000" +
    "\044\011\074\015\077\017\123\020\112\040\073\042\102" +
    "\043\115\044\121\045\103\046\101\056\122\057\113\060" +
    "\120\061\110\062\100\063\114\104\116\001\002\000\042" +
    "\012\173\017\150\020\137\021\142\022\132\023\145\024" +
    "\134\025\136\030\135\031\146\032\140\033\147\034\141" +
    "\035\143\036\144\037\133\001\002\000\052\012\uff54\014" +
    "\uff54\016\uff54\017\uff54\020\uff54\021\uff54\022\uff54\023\uff54" +
    "\024\uff54\025\uff54\030\uff54\031\uff54\032\uff54\033\uff54\034" +
    "\uff54\035\uff54\036\uff54\037\uff54\102\uff54\103\uff54\001\002" +
    "\000\054\012\uff40\013\066\014\uff40\016\uff40\017\uff40\020" +
    "\uff40\021\uff40\022\uff40\023\uff40\024\uff40\025\uff40\030\uff40" +
    "\031\uff40\032\uff40\033\uff40\034\uff40\035\uff40\036\uff40\037" +
    "\uff40\102\uff40\103\uff40\001\002\000\046\011\074\012\177" +
    "\015\077\017\123\020\112\040\073\042\102\043\115\044" +
    "\121\045\103\046\101\056\122\057\113\060\120\061\110" +
    "\062\100\063\114\104\116\001\002\000\046\012\uff8c\016" +
    "\uff8c\017\150\020\137\021\142\022\132\023\145\024\134" +
    "\025\136\030\135\031\146\032\140\033\147\034\141\035" +
    "\143\036\144\037\133\103\202\001\002\000\052\012\uff4a" +
    "\014\uff4a\016\uff4a\017\uff4a\020\uff4a\021\uff4a\022\uff4a\023" +
    "\uff4a\024\uff4a\025\uff4a\030\uff4a\031\uff4a\032\uff4a\033\uff4a" +
    "\034\uff4a\035\uff4a\036\uff4a\037\uff4a\102\uff4a\103\uff4a\001" +
    "\002\000\004\012\201\001\002\000\052\012\uff49\014\uff49" +
    "\016\uff49\017\uff49\020\uff49\021\uff49\022\uff49\023\uff49\024" +
    "\uff49\025\uff49\030\uff49\031\uff49\032\uff49\033\uff49\034\uff49" +
    "\035\uff49\036\uff49\037\uff49\102\uff49\103\uff49\001\002\000" +
    "\044\011\074\015\077\017\123\020\112\040\073\042\102" +
    "\043\115\044\121\045\103\046\101\056\122\057\113\060" +
    "\120\061\110\062\100\063\114\104\116\001\002\000\006" +
    "\012\uff8b\016\uff8b\001\002\000\052\012\uff41\014\uff41\016" +
    "\uff41\017\uff41\020\uff41\021\uff41\022\uff41\023\uff41\024\uff41" +
    "\025\uff41\030\uff41\031\uff41\032\uff41\033\uff41\034\uff41\035" +
    "\uff41\036\uff41\037\uff41\102\uff41\103\uff41\001\002\000\052" +
    "\012\uff47\014\uff47\016\uff47\017\uff47\020\uff47\021\uff47\022" +
    "\uff47\023\uff47\024\uff47\025\uff47\030\uff47\031\uff47\032\uff47" +
    "\033\uff47\034\uff47\035\uff47\036\uff47\037\uff47\102\uff47\103" +
    "\uff47\001\002\000\052\012\uff92\014\uff92\016\uff92\017\uff92" +
    "\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92\030" +
    "\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92" +
    "\037\uff92\102\uff92\103\uff92\001\002\000\044\011\074\015" +
    "\077\017\123\020\112\040\073\042\102\043\115\044\121" +
    "\045\103\046\101\056\122\057\113\060\120\061\110\062" +
    "\100\063\114\104\116\001\002\000\042\012\211\017\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\030" +
    "\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\037\uffa6\001\002\000\052\012\uff91\014\uff91\016\uff91\017" +
    "\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91" +
    "\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036" +
    "\uff91\037\uff91\102\uff91\103\uff91\001\002\000\004\011\213" +
    "\001\002\000\044\011\074\015\077\017\123\020\112\040" +
    "\073\042\102\043\115\044\121\045\103\046\101\056\122" +
    "\057\113\060\120\061\110\062\100\063\114\104\116\001" +
    "\002\000\042\012\215\017\150\020\137\021\142\022\132" +
    "\023\145\024\134\025\136\030\135\031\146\032\140\033" +
    "\147\034\141\035\143\036\144\037\133\001\002\000\004" +
    "\055\216\001\002\000\004\011\217\001\002\000\044\011" +
    "\074\015\077\017\123\020\112\040\073\042\102\043\115" +
    "\044\121\045\103\046\101\056\122\057\113\060\120\061" +
    "\110\062\100\063\114\104\116\001\002\000\042\012\221" +
    "\017\150\020\137\021\142\022\132\023\145\024\134\025" +
    "\136\030\135\031\146\032\140\033\147\034\141\035\143" +
    "\036\144\037\133\001\002\000\052\012\uff43\014\uff43\016" +
    "\uff43\017\uff43\020\uff43\021\uff43\022\uff43\023\uff43\024\uff43" +
    "\025\uff43\030\uff43\031\uff43\032\uff43\033\uff43\034\uff43\035" +
    "\uff43\036\uff43\037\uff43\102\uff43\103\uff43\001\002\000\052" +
    "\012\uff45\014\uff45\016\uff45\017\uff45\020\uff45\021\uff45\022" +
    "\uff45\023\uff45\024\uff45\025\uff45\030\uff45\031\uff45\032\uff45" +
    "\033\uff45\034\uff45\035\uff45\036\uff45\037\uff45\102\uff45\103" +
    "\uff45\001\002\000\044\011\074\015\077\017\123\020\112" +
    "\040\073\042\102\043\115\044\121\045\103\046\101\056" +
    "\122\057\113\060\120\061\110\062\100\063\114\104\116" +
    "\001\002\000\042\012\225\017\150\020\137\021\142\022" +
    "\132\023\145\024\134\025\136\030\135\031\146\032\140" +
    "\033\147\034\141\035\143\036\144\037\133\001\002\000" +
    "\052\012\uff53\014\uff53\016\uff53\017\uff53\020\uff53\021\uff53" +
    "\022\uff53\023\uff53\024\uff53\025\uff53\030\uff53\031\uff53\032" +
    "\uff53\033\uff53\034\uff53\035\uff53\036\uff53\037\uff53\102\uff53" +
    "\103\uff53\001\002\000\052\012\uff48\014\uff48\016\uff48\017" +
    "\uff48\020\uff48\021\uff48\022\uff48\023\uff48\024\uff48\025\uff48" +
    "\030\uff48\031\uff48\032\uff48\033\uff48\034\uff48\035\uff48\036" +
    "\uff48\037\uff48\102\uff48\103\uff48\001\002\000\052\012\uff44" +
    "\014\uff44\016\uff44\017\uff44\020\uff44\021\uff44\022\uff44\023" +
    "\uff44\024\uff44\025\uff44\030\uff44\031\uff44\032\uff44\033\uff44" +
    "\034\uff44\035\uff44\036\uff44\037\uff44\102\uff44\103\uff44\001" +
    "\002\000\004\016\231\001\002\000\052\012\uff61\014\uff61" +
    "\016\uff61\017\uff61\020\uff61\021\uff61\022\uff61\023\uff61\024" +
    "\uff61\025\uff61\030\uff61\031\uff61\032\uff61\033\uff61\034\uff61" +
    "\035\uff61\036\uff61\037\uff61\102\uff61\103\uff61\001\002\000" +
    "\042\012\235\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7" +
    "\024\uffa7\025\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\001\002\000\042\012\234" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6" +
    "\036\uffa6\037\uffa6\001\002\000\054\012\uff8e\014\uff8e\016" +
    "\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e" +
    "\025\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035" +
    "\uff8e\036\uff8e\037\uff8e\054\uff76\102\uff8e\103\uff8e\001\002" +
    "\000\054\012\uff8d\014\uff8d\016\uff8d\017\uff8d\020\uff8d\021" +
    "\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\030\uff8d\031\uff8d" +
    "\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\054" +
    "\uff77\102\uff8d\103\uff8d\001\002\000\052\012\uff96\014\uff96" +
    "\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024" +
    "\uff96\025\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96" +
    "\035\uff96\036\uff96\037\uff96\102\uff96\103\uff96\001\002\000" +
    "\044\011\074\015\077\017\123\020\112\040\073\042\102" +
    "\043\115\044\121\045\103\046\101\056\122\057\113\060" +
    "\120\061\110\062\100\063\114\104\116\001\002\000\042" +
    "\012\241\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024" +
    "\uffa6\025\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\001\002\000\052\012\uff95\014" +
    "\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95" +
    "\024\uff95\025\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034" +
    "\uff95\035\uff95\036\uff95\037\uff95\102\uff95\103\uff95\001\002" +
    "\000\044\017\150\020\137\021\142\022\132\023\145\024" +
    "\134\025\136\030\135\031\146\032\140\033\147\034\141" +
    "\035\143\036\144\037\133\102\uffcf\103\uffcf\001\002\000" +
    "\042\014\244\017\150\020\137\021\142\022\132\023\145" +
    "\024\134\025\136\030\135\031\146\032\140\033\147\034" +
    "\141\035\143\036\144\037\133\001\002\000\070\012\uff65" +
    "\013\uff65\014\uff65\016\uff65\017\uff65\020\uff65\021\uff65\022" +
    "\uff65\023\uff65\024\uff65\025\uff65\030\uff65\031\uff65\032\uff65" +
    "\033\uff65\034\uff65\035\uff65\036\uff65\037\uff65\041\uff65\047" +
    "\uff65\050\uff65\051\uff65\052\uff65\053\uff65\102\uff65\103\uff65" +
    "\001\002\000\044\017\150\020\137\021\142\022\132\023" +
    "\145\024\134\025\136\030\135\031\146\032\140\033\147" +
    "\034\141\035\143\036\144\037\133\102\uffd1\103\uffd1\001" +
    "\002\000\044\017\uff39\020\uff39\021\uff39\022\uff39\023\uff39" +
    "\024\uff39\025\uff39\030\uff39\031\uff39\032\uff39\033\uff39\034" +
    "\uff39\035\uff39\036\uff39\037\uff39\102\251\103\uff39\001\002" +
    "\000\044\017\uff3b\020\uff3b\021\uff3b\022\uff3b\023\uff3b\024" +
    "\uff3b\025\uff3b\030\uff3b\031\uff3b\032\uff3b\033\uff3b\034\uff3b" +
    "\035\uff3b\036\uff3b\037\uff3b\102\250\103\uff3b\001\002\000" +
    "\044\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\016\uffdd" +
    "\065\uffdd\066\uffdd\067\uffdd\070\uffdd\072\uffdd\073\uffdd\074" +
    "\uffdd\075\uffdd\076\uffdd\101\uffdd\104\uffdd\001\002\000\044" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\016\uffdc\065" +
    "\uffdc\066\uffdc\067\uffdc\070\uffdc\072\uffdc\073\uffdc\074\uffdc" +
    "\075\uffdc\076\uffdc\101\uffdc\104\uffdc\001\002\000\004\104" +
    "\254\001\002\000\004\102\uffd3\001\002\000\012\013\066" +
    "\041\255\102\uffd0\103\uffd0\001\002\000\044\011\074\015" +
    "\077\017\123\020\112\040\073\042\102\043\115\044\121" +
    "\045\103\046\101\056\122\057\113\060\120\061\110\062" +
    "\100\063\114\104\116\001\002\000\004\104\254\001\002" +
    "\000\004\102\uffd4\001\002\000\044\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\016\uffdb\065\uffdb\066\uffdb\067\uffdb" +
    "\070\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\101" +
    "\uffdb\104\uffdb\001\002\000\004\104\254\001\002\000\004" +
    "\102\uffd2\001\002\000\036\016\uffb3\065\uffb3\066\uffb3\070" +
    "\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3" +
    "\077\uffb3\100\uffb3\101\uffb3\104\uffb3\001\002\000\044\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\016\uffe6\065\uffe6" +
    "\066\uffe6\067\uffe6\070\uffe6\072\uffe6\073\uffe6\074\uffe6\075" +
    "\uffe6\076\uffe6\101\uffe6\104\uffe6\001\002\000\004\102\274" +
    "\001\002\000\012\013\066\041\267\102\uffd0\103\uffd0\001" +
    "\002\000\044\011\074\015\077\017\123\020\112\040\073" +
    "\042\102\043\115\044\121\045\103\046\101\056\122\057" +
    "\271\060\120\061\270\062\100\063\114\104\116\001\002" +
    "\000\044\017\uff38\020\uff38\021\uff38\022\uff38\023\uff38\024" +
    "\uff38\025\uff38\030\uff38\031\uff38\032\uff38\033\uff38\034\uff38" +
    "\035\uff38\036\uff38\037\uff38\102\273\103\uff38\001\002\000" +
    "\044\017\uff3a\020\uff3a\021\uff3a\022\uff3a\023\uff3a\024\uff3a" +
    "\025\uff3a\030\uff3a\031\uff3a\032\uff3a\033\uff3a\034\uff3a\035" +
    "\uff3a\036\uff3a\037\uff3a\102\272\103\uff3a\001\002\000\044" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\016\uffda\065" +
    "\uffda\066\uffda\067\uffda\070\uffda\072\uffda\073\uffda\074\uffda" +
    "\075\uffda\076\uffda\101\uffda\104\uffda\001\002\000\044\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\016\uffd9\065\uffd9" +
    "\066\uffd9\067\uffd9\070\uffd9\072\uffd9\073\uffd9\074\uffd9\075" +
    "\uffd9\076\uffd9\101\uffd9\104\uffd9\001\002\000\044\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\016\uffd8\065\uffd8\066" +
    "\uffd8\067\uffd8\070\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8" +
    "\076\uffd8\101\uffd8\104\uffd8\001\002\000\042\017\150\020" +
    "\137\021\142\022\132\023\145\024\134\025\136\030\135" +
    "\031\146\032\140\033\147\034\141\035\143\036\144\037" +
    "\133\102\277\001\002\000\036\016\uffb1\065\uffb1\066\uffb1" +
    "\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076" +
    "\uffb1\077\uffb1\100\uffb1\101\uffb1\104\uffb1\001\002\000\036" +
    "\016\uffb2\065\uffb2\066\uffb2\070\uffb2\071\uffb2\072\uffb2\073" +
    "\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2" +
    "\104\uffb2\001\002\000\046\002\uffc2\005\uffc2\006\uffc2\007" +
    "\uffc2\016\uffc2\065\uffc2\066\uffc2\070\uffc2\071\uffc2\072\uffc2" +
    "\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101" +
    "\uffc2\104\uffc2\001\002\000\006\012\uffae\102\uffae\001\002" +
    "\000\044\011\074\015\077\017\123\020\112\040\073\042" +
    "\102\043\115\044\121\045\103\046\101\056\122\057\113" +
    "\060\120\061\110\062\100\063\114\104\116\001\002\000" +
    "\006\012\uffaf\102\uffaf\001\002\000\044\011\074\015\077" +
    "\017\123\020\112\040\073\042\102\043\115\044\121\045" +
    "\103\046\101\056\122\057\113\060\120\061\110\062\100" +
    "\063\114\104\116\001\002\000\020\013\066\041\326\047" +
    "\325\050\330\051\324\052\332\053\327\001\002\000\044" +
    "\011\074\015\077\017\123\020\112\040\073\042\102\043" +
    "\115\044\121\045\103\046\101\056\122\057\113\060\120" +
    "\061\110\062\100\063\114\104\116\001\002\000\044\011" +
    "\074\015\077\017\123\020\112\040\073\042\102\043\115" +
    "\044\121\045\103\046\101\056\122\057\113\060\120\061" +
    "\110\062\100\063\114\104\116\001\002\000\044\011\074" +
    "\015\077\017\123\020\112\040\073\042\102\043\115\044" +
    "\121\045\103\046\101\056\122\057\113\060\120\061\110" +
    "\062\100\063\114\104\116\001\002\000\046\011\074\015" +
    "\077\017\123\020\112\040\073\042\102\043\115\044\121" +
    "\045\103\046\101\056\122\057\113\060\120\061\110\062" +
    "\100\063\114\064\312\104\116\001\002\000\004\102\315" +
    "\001\002\000\042\017\150\020\137\021\142\022\132\023" +
    "\145\024\134\025\136\030\135\031\146\032\140\033\147" +
    "\034\141\035\143\036\144\037\133\102\314\001\002\000" +
    "\036\016\uff85\065\uff85\066\uff85\070\uff85\071\uff85\072\uff85" +
    "\073\uff85\074\uff85\075\uff85\076\uff85\077\uff85\100\uff85\101" +
    "\uff85\104\uff85\001\002\000\036\016\uff8a\065\uff8a\066\uff8a" +
    "\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076" +
    "\uff8a\077\uff8a\100\uff8a\101\uff8a\104\uff8a\001\002\000\042" +
    "\017\150\020\137\021\142\022\132\023\145\024\134\025" +
    "\136\030\135\031\146\032\140\033\147\034\141\035\143" +
    "\036\144\037\133\102\317\001\002\000\036\016\uff87\065" +
    "\uff87\066\uff87\070\uff87\071\uff87\072\uff87\073\uff87\074\uff87" +
    "\075\uff87\076\uff87\077\uff87\100\uff87\101\uff87\104\uff87\001" +
    "\002\000\042\017\150\020\137\021\142\022\132\023\145" +
    "\024\134\025\136\030\135\031\146\032\140\033\147\034" +
    "\141\035\143\036\144\037\133\102\321\001\002\000\036" +
    "\016\uff89\065\uff89\066\uff89\070\uff89\071\uff89\072\uff89\073" +
    "\uff89\074\uff89\075\uff89\076\uff89\077\uff89\100\uff89\101\uff89" +
    "\104\uff89\001\002\000\042\017\150\020\137\021\142\022" +
    "\132\023\145\024\134\025\136\030\135\031\146\032\140" +
    "\033\147\034\141\035\143\036\144\037\133\102\323\001" +
    "\002\000\036\016\uff86\065\uff86\066\uff86\070\uff86\071\uff86" +
    "\072\uff86\073\uff86\074\uff86\075\uff86\076\uff86\077\uff86\100" +
    "\uff86\101\uff86\104\uff86\001\002\000\044\011\074\015\077" +
    "\017\123\020\112\040\073\042\102\043\115\044\121\045" +
    "\103\046\101\056\122\057\113\060\120\061\110\062\100" +
    "\063\114\104\116\001\002\000\044\011\074\015\077\017" +
    "\123\020\112\040\073\042\102\043\115\044\121\045\103" +
    "\046\101\056\122\057\113\060\120\061\110\062\100\063" +
    "\114\104\116\001\002\000\044\011\074\015\077\017\123" +
    "\020\112\040\073\042\102\043\115\044\121\045\103\046" +
    "\101\056\122\057\113\060\120\061\110\062\100\063\114" +
    "\104\116\001\002\000\044\011\074\015\077\017\123\020" +
    "\112\040\073\042\102\043\115\044\121\045\103\046\101" +
    "\056\122\057\113\060\120\061\110\062\100\063\114\104" +
    "\116\001\002\000\044\011\074\015\077\017\123\020\112" +
    "\040\073\042\102\043\115\044\121\045\103\046\101\056" +
    "\122\057\113\060\120\061\110\062\100\063\114\104\116" +
    "\001\002\000\016\041\340\047\335\050\341\051\336\052" +
    "\342\053\337\001\002\000\044\011\074\015\077\017\123" +
    "\020\112\040\073\042\102\043\115\044\121\045\103\046" +
    "\101\056\122\057\113\060\120\061\110\062\100\063\114" +
    "\104\116\001\002\000\042\017\150\020\137\021\142\022" +
    "\132\023\145\024\134\025\136\030\135\031\146\032\140" +
    "\033\147\034\141\035\143\036\144\037\133\102\334\001" +
    "\002\000\036\016\uff83\065\uff83\066\uff83\070\uff83\071\uff83" +
    "\072\uff83\073\uff83\074\uff83\075\uff83\076\uff83\077\uff83\100" +
    "\uff83\101\uff83\104\uff83\001\002\000\044\011\074\015\077" +
    "\017\123\020\112\040\073\042\102\043\115\044\121\045" +
    "\103\046\101\056\122\057\113\060\120\061\110\062\100" +
    "\063\114\104\116\001\002\000\044\011\074\015\077\017" +
    "\123\020\112\040\073\042\102\043\115\044\121\045\103" +
    "\046\101\056\122\057\113\060\120\061\110\062\100\063" +
    "\114\104\116\001\002\000\044\011\074\015\077\017\123" +
    "\020\112\040\073\042\102\043\115\044\121\045\103\046" +
    "\101\056\122\057\113\060\120\061\110\062\100\063\114" +
    "\104\116\001\002\000\044\011\074\015\077\017\123\020" +
    "\112\040\073\042\102\043\115\044\121\045\103\046\101" +
    "\056\122\057\113\060\120\061\110\062\100\063\114\104" +
    "\116\001\002\000\044\011\074\015\077\017\123\020\112" +
    "\040\073\042\102\043\115\044\121\045\103\046\101\056" +
    "\122\057\113\060\120\061\110\062\100\063\114\104\116" +
    "\001\002\000\044\011\074\015\077\017\123\020\112\040" +
    "\073\042\102\043\115\044\121\045\103\046\101\056\122" +
    "\057\113\060\120\061\110\062\100\063\114\104\116\001" +
    "\002\000\042\017\150\020\137\021\142\022\132\023\145" +
    "\024\134\025\136\030\135\031\146\032\140\033\147\034" +
    "\141\035\143\036\144\037\133\102\344\001\002\000\036" +
    "\016\uff7d\065\uff7d\066\uff7d\070\uff7d\071\uff7d\072\uff7d\073" +
    "\uff7d\074\uff7d\075\uff7d\076\uff7d\077\uff7d\100\uff7d\101\uff7d" +
    "\104\uff7d\001\002\000\042\017\150\020\137\021\142\022" +
    "\132\023\145\024\134\025\136\030\135\031\146\032\140" +
    "\033\147\034\141\035\143\036\144\037\133\102\346\001" +
    "\002\000\036\016\uff7b\065\uff7b\066\uff7b\070\uff7b\071\uff7b" +
    "\072\uff7b\073\uff7b\074\uff7b\075\uff7b\076\uff7b\077\uff7b\100" +
    "\uff7b\101\uff7b\104\uff7b\001\002\000\042\017\150\020\137" +
    "\021\142\022\132\023\145\024\134\025\136\030\135\031" +
    "\146\032\140\033\147\034\141\035\143\036\144\037\133" +
    "\102\350\001\002\000\036\016\uff79\065\uff79\066\uff79\070" +
    "\uff79\071\uff79\072\uff79\073\uff79\074\uff79\075\uff79\076\uff79" +
    "\077\uff79\100\uff79\101\uff79\104\uff79\001\002\000\042\017" +
    "\150\020\137\021\142\022\132\023\145\024\134\025\136" +
    "\030\135\031\146\032\140\033\147\034\141\035\143\036" +
    "\144\037\133\102\352\001\002\000\036\016\uff78\065\uff78" +
    "\066\uff78\070\uff78\071\uff78\072\uff78\073\uff78\074\uff78\075" +
    "\uff78\076\uff78\077\uff78\100\uff78\101\uff78\104\uff78\001\002" +
    "\000\042\017\150\020\137\021\142\022\132\023\145\024" +
    "\134\025\136\030\135\031\146\032\140\033\147\034\141" +
    "\035\143\036\144\037\133\102\354\001\002\000\036\016" +
    "\uff7c\065\uff7c\066\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c" +
    "\074\uff7c\075\uff7c\076\uff7c\077\uff7c\100\uff7c\101\uff7c\104" +
    "\uff7c\001\002\000\042\017\150\020\137\021\142\022\132" +
    "\023\145\024\134\025\136\030\135\031\146\032\140\033" +
    "\147\034\141\035\143\036\144\037\133\102\356\001\002" +
    "\000\036\016\uff7a\065\uff7a\066\uff7a\070\uff7a\071\uff7a\072" +
    "\uff7a\073\uff7a\074\uff7a\075\uff7a\076\uff7a\077\uff7a\100\uff7a" +
    "\101\uff7a\104\uff7a\001\002\000\042\017\150\020\137\021" +
    "\142\022\132\023\145\024\134\025\136\030\135\031\146" +
    "\032\140\033\147\034\141\035\143\036\144\037\133\102" +
    "\360\001\002\000\036\016\uff81\065\uff81\066\uff81\070\uff81" +
    "\071\uff81\072\uff81\073\uff81\074\uff81\075\uff81\076\uff81\077" +
    "\uff81\100\uff81\101\uff81\104\uff81\001\002\000\042\017\150" +
    "\020\137\021\142\022\132\023\145\024\134\025\136\030" +
    "\135\031\146\032\140\033\147\034\141\035\143\036\144" +
    "\037\133\102\362\001\002\000\036\016\uff7e\065\uff7e\066" +
    "\uff7e\070\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e" +
    "\076\uff7e\077\uff7e\100\uff7e\101\uff7e\104\uff7e\001\002\000" +
    "\042\017\150\020\137\021\142\022\132\023\145\024\134" +
    "\025\136\030\135\031\146\032\140\033\147\034\141\035" +
    "\143\036\144\037\133\102\364\001\002\000\036\016\uff7f" +
    "\065\uff7f\066\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074" +
    "\uff7f\075\uff7f\076\uff7f\077\uff7f\100\uff7f\101\uff7f\104\uff7f" +
    "\001\002\000\042\017\150\020\137\021\142\022\132\023" +
    "\145\024\134\025\136\030\135\031\146\032\140\033\147" +
    "\034\141\035\143\036\144\037\133\102\366\001\002\000" +
    "\036\016\uff80\065\uff80\066\uff80\070\uff80\071\uff80\072\uff80" +
    "\073\uff80\074\uff80\075\uff80\076\uff80\077\uff80\100\uff80\101" +
    "\uff80\104\uff80\001\002\000\042\017\150\020\137\021\142" +
    "\022\132\023\145\024\134\025\136\030\135\031\146\032" +
    "\140\033\147\034\141\035\143\036\144\037\133\102\370" +
    "\001\002\000\036\016\uff82\065\uff82\066\uff82\070\uff82\071" +
    "\uff82\072\uff82\073\uff82\074\uff82\075\uff82\076\uff82\077\uff82" +
    "\100\uff82\101\uff82\104\uff82\001\002\000\042\017\150\020" +
    "\137\021\142\022\132\023\145\024\134\025\136\030\135" +
    "\031\146\032\140\033\147\034\141\035\143\036\144\037" +
    "\133\102\372\001\002\000\036\016\uff84\065\uff84\066\uff84" +
    "\070\uff84\071\uff84\072\uff84\073\uff84\074\uff84\075\uff84\076" +
    "\uff84\077\uff84\100\uff84\101\uff84\104\uff84\001\002\000\042" +
    "\017\150\020\137\021\142\022\132\023\145\024\134\025" +
    "\136\030\135\031\146\032\140\033\147\034\141\035\143" +
    "\036\144\037\133\102\374\001\002\000\036\016\uff88\065" +
    "\uff88\066\uff88\070\uff88\071\uff88\072\uff88\073\uff88\074\uff88" +
    "\075\uff88\076\uff88\077\uff88\100\uff88\101\uff88\104\uff88\001" +
    "\002\000\030\015\023\065\033\066\025\070\042\072\043" +
    "\073\037\074\040\075\024\076\036\101\053\104\047\001" +
    "\002\000\044\011\074\015\077\017\123\020\112\040\073" +
    "\042\102\043\115\044\121\045\103\046\101\056\122\057" +
    "\113\060\120\061\110\062\100\063\114\104\116\001\002" +
    "\000\042\012\u0102\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023" +
    "\uffa7\024\uffa7\025\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\001\002\000\042\012" +
    "\u0101\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6" +
    "\025\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\036\uffa6\037\uffa6\001\002\000\032\015\uff76\065\uff76" +
    "\066\uff76\070\uff76\072\uff76\073\uff76\074\uff76\075\uff76\076" +
    "\uff76\101\uff76\102\uff76\104\uff76\001\002\000\032\015\uff77" +
    "\065\uff77\066\uff77\070\uff77\072\uff77\073\uff77\074\uff77\075" +
    "\uff77\076\uff77\101\uff77\102\uff77\104\uff77\001\002\000\036" +
    "\016\uff72\065\uff72\066\uff72\070\uff72\071\uff72\072\uff72\073" +
    "\uff72\074\uff72\075\uff72\076\uff72\077\uff72\100\uff72\101\uff72" +
    "\104\uff72\001\002\000\036\016\uff73\065\uff73\066\uff73\070" +
    "\uff73\071\uff73\072\uff73\073\uff73\074\uff73\075\uff73\076\uff73" +
    "\077\uff73\100\uff73\101\uff73\104\uff73\001\002\000\030\015" +
    "\023\065\033\066\025\070\042\072\043\073\037\074\040" +
    "\075\024\076\036\101\053\104\047\001\002\000\036\016" +
    "\uff6d\065\uff6d\066\uff6d\070\uff6d\071\u010b\072\uff6d\073\uff6d" +
    "\074\uff6d\075\uff6d\076\uff6d\077\uff6d\100\uff6d\101\uff6d\104" +
    "\uff6d\001\002\000\036\016\uff6f\065\uff6f\066\uff6f\070\uff6f" +
    "\071\u0108\072\uff6f\073\uff6f\074\uff6f\075\uff6f\076\uff6f\077" +
    "\uff6f\100\uff6f\101\uff6f\104\uff6f\001\002\000\030\015\023" +
    "\065\033\066\025\070\042\072\043\073\037\074\040\075" +
    "\024\076\036\101\053\104\047\001\002\000\036\016\uff6c" +
    "\065\uff6c\066\uff6c\070\uff6c\071\uff6c\072\uff6c\073\uff6c\074" +
    "\uff6c\075\uff6c\076\uff6c\077\uff6c\100\uff6c\101\uff6c\104\uff6c" +
    "\001\002\000\036\016\uff6e\065\uff6e\066\uff6e\070\uff6e\071" +
    "\uff6e\072\uff6e\073\uff6e\074\uff6e\075\uff6e\076\uff6e\077\uff6e" +
    "\100\uff6e\101\uff6e\104\uff6e\001\002\000\030\015\023\065" +
    "\033\066\025\070\042\072\043\073\037\074\040\075\024" +
    "\076\036\101\053\104\047\001\002\000\036\016\uff6a\065" +
    "\uff6a\066\uff6a\070\uff6a\071\uff6a\072\uff6a\073\uff6a\074\uff6a" +
    "\075\uff6a\076\uff6a\077\uff6a\100\uff6a\101\uff6a\104\uff6a\001" +
    "\002\000\036\016\uff6b\065\uff6b\066\uff6b\070\uff6b\071\uff6b" +
    "\072\uff6b\073\uff6b\074\uff6b\075\uff6b\076\uff6b\077\uff6b\100" +
    "\uff6b\101\uff6b\104\uff6b\001\002\000\030\015\023\065\033" +
    "\066\025\070\042\072\043\073\037\074\040\075\024\076" +
    "\036\101\053\104\047\001\002\000\006\006\u0110\104\u0111" +
    "\001\002\000\004\104\u0127\001\002\000\004\041\u0125\001" +
    "\002\000\004\102\u0113\001\002\000\044\011\074\015\077" +
    "\017\123\020\112\040\073\042\102\043\115\044\121\045" +
    "\103\046\101\056\122\057\113\060\120\061\110\062\100" +
    "\063\114\104\116\001\002\000\042\017\150\020\137\021" +
    "\142\022\132\023\145\024\134\025\136\030\135\031\146" +
    "\032\140\033\147\034\141\035\143\036\144\037\133\102" +
    "\u0115\001\002\000\004\104\u0117\001\002\000\004\012\u0124" +
    "\001\002\000\022\026\301\027\303\041\u011a\047\u0119\050" +
    "\u011c\051\u0118\052\u011d\053\u011b\001\002\000\044\011\074" +
    "\015\077\017\123\020\112\040\073\042\102\043\115\044" +
    "\121\045\103\046\101\056\122\057\113\060\120\061\110" +
    "\062\100\063\114\104\116\001\002\000\044\011\074\015" +
    "\077\017\123\020\112\040\073\042\102\043\115\044\121" +
    "\045\103\046\101\056\122\057\113\060\120\061\110\062" +
    "\100\063\114\104\116\001\002\000\044\011\074\015\077" +
    "\017\123\020\112\040\073\042\102\043\115\044\121\045" +
    "\103\046\101\056\122\057\113\060\120\061\110\062\100" +
    "\063\114\104\116\001\002\000\044\011\074\015\077\017" +
    "\123\020\112\040\073\042\102\043\115\044\121\045\103" +
    "\046\101\056\122\057\113\060\120\061\110\062\100\063" +
    "\114\104\116\001\002\000\044\011\074\015\077\017\123" +
    "\020\112\040\073\042\102\043\115\044\121\045\103\046" +
    "\101\056\122\057\113\060\120\061\110\062\100\063\114" +
    "\104\116\001\002\000\044\011\074\015\077\017\123\020" +
    "\112\040\073\042\102\043\115\044\121\045\103\046\101" +
    "\056\122\057\113\060\120\061\110\062\100\063\114\104" +
    "\116\001\002\000\042\012\uffad\017\150\020\137\021\142" +
    "\022\132\023\145\024\134\025\136\030\135\031\146\032" +
    "\140\033\147\034\141\035\143\036\144\037\133\001\002" +
    "\000\042\012\uffab\017\150\020\137\021\142\022\132\023" +
    "\145\024\134\025\136\030\135\031\146\032\140\033\147" +
    "\034\141\035\143\036\144\037\133\001\002\000\042\012" +
    "\uffa8\017\150\020\137\021\142\022\132\023\145\024\134" +
    "\025\136\030\135\031\146\032\140\033\147\034\141\035" +
    "\143\036\144\037\133\001\002\000\042\012\uffa9\017\150" +
    "\020\137\021\142\022\132\023\145\024\134\025\136\030" +
    "\135\031\146\032\140\033\147\034\141\035\143\036\144" +
    "\037\133\001\002\000\042\012\uffaa\017\150\020\137\021" +
    "\142\022\132\023\145\024\134\025\136\030\135\031\146" +
    "\032\140\033\147\034\141\035\143\036\144\037\133\001" +
    "\002\000\042\012\uffac\017\150\020\137\021\142\022\132" +
    "\023\145\024\134\025\136\030\135\031\146\032\140\033" +
    "\147\034\141\035\143\036\144\037\133\001\002\000\030" +
    "\015\uff69\065\uff69\066\uff69\070\uff69\072\uff69\073\uff69\074" +
    "\uff69\075\uff69\076\uff69\101\uff69\104\uff69\001\002\000\044" +
    "\011\074\015\077\017\123\020\112\040\073\042\102\043" +
    "\115\044\121\045\103\046\101\056\122\057\113\060\120" +
    "\061\110\062\100\063\114\104\116\001\002\000\042\017" +
    "\150\020\137\021\142\022\132\023\145\024\134\025\136" +
    "\030\135\031\146\032\140\033\147\034\141\035\143\036" +
    "\144\037\133\102\uff64\001\002\000\004\041\u0128\001\002" +
    "\000\044\011\074\015\077\017\123\020\112\040\073\042" +
    "\102\043\115\044\121\045\103\046\101\056\122\057\113" +
    "\060\120\061\110\062\100\063\114\104\116\001\002\000" +
    "\042\017\150\020\137\021\142\022\132\023\145\024\134" +
    "\025\136\030\135\031\146\032\140\033\147\034\141\035" +
    "\143\036\144\037\133\102\uff63\001\002\000\036\016\uff70" +
    "\065\uff70\066\uff70\070\uff70\071\uff70\072\uff70\073\uff70\074" +
    "\uff70\075\uff70\076\uff70\077\uff70\100\uff70\101\uff70\104\uff70" +
    "\001\002\000\036\016\uff71\065\uff71\066\uff71\070\uff71\071" +
    "\uff71\072\uff71\073\uff71\074\uff71\075\uff71\076\uff71\077\uff71" +
    "\100\uff71\101\uff71\104\uff71\001\002\000\004\072\u0131\001" +
    "\002\000\004\072\u012e\001\002\000\004\011\376\001\002" +
    "\000\004\102\u0130\001\002\000\036\016\uff75\065\uff75\066" +
    "\uff75\070\uff75\071\uff75\072\uff75\073\uff75\074\uff75\075\uff75" +
    "\076\uff75\077\uff75\100\uff75\101\uff75\104\uff75\001\002\000" +
    "\004\011\376\001\002\000\004\102\u0133\001\002\000\036" +
    "\016\uff74\065\uff74\066\uff74\070\uff74\071\uff74\072\uff74\073" +
    "\uff74\074\uff74\075\uff74\076\uff74\077\uff74\100\uff74\101\uff74" +
    "\104\uff74\001\002\000\036\016\uffb0\065\uffb0\066\uffb0\070" +
    "\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0" +
    "\077\uffb0\100\uffb0\101\uffb0\104\uffb0\001\002\000\036\016" +
    "\uffb6\065\uffb6\066\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6" +
    "\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6\104" +
    "\uffb6\001\002\000\004\104\u0137\001\002\000\004\012\u0138" +
    "\001\002\000\004\102\u0139\001\002\000\036\016\uff62\065" +
    "\uff62\066\uff62\070\uff62\071\uff62\072\uff62\073\uff62\074\uff62" +
    "\075\uff62\076\uff62\077\uff62\100\uff62\101\uff62\104\uff62\001" +
    "\002\000\030\016\uff5c\065\uff5c\066\uff5c\070\uff5c\072\uff5c" +
    "\073\uff5c\074\uff5c\075\uff5c\076\uff5c\101\uff5c\104\uff5c\001" +
    "\002\000\010\016\uffbe\077\uffbe\100\uffbe\001\002\000\004" +
    "\016\u013e\001\002\000\046\002\uffc0\005\uffc0\006\uffc0\007" +
    "\uffc0\016\uffc0\065\uffc0\066\uffc0\070\uffc0\071\uffc0\072\uffc0" +
    "\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101" +
    "\uffc0\104\uffc0\001\002\000\046\002\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\016\uffc1\065\uffc1\066\uffc1\070\uffc1\071\uffc1\072" +
    "\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1" +
    "\101\uffc1\104\uffc1\001\002\000\050\011\074\012\u0142\015" +
    "\077\017\123\020\112\040\073\042\102\043\115\044\121" +
    "\045\103\046\101\056\122\057\113\060\120\061\110\062" +
    "\100\063\114\064\u0140\104\116\001\002\000\004\012\u0146" +
    "\001\002\000\042\012\u0144\017\150\020\137\021\142\022" +
    "\132\023\145\024\134\025\136\030\135\031\146\032\140" +
    "\033\147\034\141\035\143\036\144\037\133\001\002\000" +
    "\004\102\u0143\001\002\000\036\016\uff66\065\uff66\066\uff66" +
    "\070\uff66\071\uff66\072\uff66\073\uff66\074\uff66\075\uff66\076" +
    "\uff66\077\uff66\100\uff66\101\uff66\104\uff66\001\002\000\004" +
    "\102\u0145\001\002\000\036\016\uff68\065\uff68\066\uff68\070" +
    "\uff68\071\uff68\072\uff68\073\uff68\074\uff68\075\uff68\076\uff68" +
    "\077\uff68\100\uff68\101\uff68\104\uff68\001\002\000\004\102" +
    "\u0147\001\002\000\036\016\uff67\065\uff67\066\uff67\070\uff67" +
    "\071\uff67\072\uff67\073\uff67\074\uff67\075\uff67\076\uff67\077" +
    "\uff67\100\uff67\101\uff67\104\uff67\001\002\000\004\015\u0149" +
    "\001\002\000\004\077\u014c\001\002\000\006\016\u0152\100" +
    "\u0151\001\002\000\010\016\uff4f\077\u014c\100\uff4f\001\002" +
    "\000\004\062\u014d\001\002\000\004\055\u014e\001\002\000" +
    "\034\016\uff4d\065\033\066\025\070\042\072\043\073\037" +
    "\074\040\075\024\076\036\077\uff4d\100\uff4d\101\053\104" +
    "\047\001\002\000\010\016\uff4e\077\uff4e\100\uff4e\001\002" +
    "\000\006\016\uff50\100\uff50\001\002\000\004\055\u0155\001" +
    "\002\000\036\016\uff51\065\uff51\066\uff51\070\uff51\071\uff51" +
    "\072\uff51\073\uff51\074\uff51\075\uff51\076\uff51\077\uff51\100" +
    "\uff51\101\uff51\104\uff51\001\002\000\004\016\u0154\001\002" +
    "\000\036\016\uff52\065\uff52\066\uff52\070\uff52\071\uff52\072" +
    "\uff52\073\uff52\074\uff52\075\uff52\076\uff52\077\uff52\100\uff52" +
    "\101\uff52\104\uff52\001\002\000\030\016\uff4b\065\033\066" +
    "\025\070\042\072\043\073\037\074\040\075\024\076\036" +
    "\101\053\104\047\001\002\000\004\016\uff4c\001\002\000" +
    "\006\102\uffc9\103\u015d\001\002\000\004\102\u015c\001\002" +
    "\000\010\041\u015a\102\uffca\103\uffca\001\002\000\004\064" +
    "\u015b\001\002\000\006\102\uffcb\103\uffcb\001\002\000\044" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\016\uffe5\065" +
    "\uffe5\066\uffe5\067\uffe5\070\uffe5\072\uffe5\073\uffe5\074\uffe5" +
    "\075\uffe5\076\uffe5\101\uffe5\104\uffe5\001\002\000\004\104" +
    "\u0159\001\002\000\004\102\uffc8\001\002\000\004\067\ufff7" +
    "\001\002\000\012\002\000\005\u0166\006\u0165\007\u0162\001" +
    "\002\000\004\104\uff5e\001\002\000\012\012\uff35\013\uff35" +
    "\103\uff35\104\uff35\001\002\000\004\002\uffff\001\002\000" +
    "\004\015\023\001\002\000\012\012\uff36\013\uff36\103\uff36" +
    "\104\uff36\001\002\000\004\104\uff5d\001\002\000\004\104" +
    "\u016a\001\002\000\012\002\uffe8\005\u0166\006\u0165\007\u0162" +
    "\001\002\000\004\002\uffe9\001\002\000\004\011\u016b\001" +
    "\002\000\010\006\u0165\007\u0162\012\u016c\001\002\000\004" +
    "\015\uff5f\001\002\000\004\104\u0170\001\002\000\004\012" +
    "\u016f\001\002\000\004\015\uff60\001\002\000\010\012\uff55" +
    "\013\066\103\u0171\001\002\000\006\006\u0165\007\u0162\001" +
    "\002\000\010\012\uff56\013\066\103\u0173\001\002\000\006" +
    "\006\u0165\007\u0162\001\002\000\006\012\uff57\103\u0175\001" +
    "\002\000\006\006\u0165\007\u0162\001\002\000\004\012\uff58" +
    "\001\002\000\004\012\uff59\001\002\000\004\012\uff5a\001" +
    "\002\000\012\002\uffde\005\uffde\006\uffde\007\uffde\001\002" +
    "\000\004\011\u017b\001\002\000\010\006\u0165\007\u0162\012" +
    "\u017c\001\002\000\004\102\u0189\001\002\000\004\012\u0187" +
    "\001\002\000\010\012\uffea\013\066\103\u017f\001\002\000" +
    "\006\006\u0165\007\u0162\001\002\000\010\012\uffeb\013\066" +
    "\103\u0181\001\002\000\006\006\u0165\007\u0162\001\002\000" +
    "\006\012\uffec\103\u0183\001\002\000\006\006\u0165\007\u0162" +
    "\001\002\000\004\012\uffee\001\002\000\004\012\uffed\001" +
    "\002\000\004\012\uffef\001\002\000\004\102\u0188\001\002" +
    "\000\016\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\067" +
    "\ufff1\001\002\000\016\004\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\067\ufff0\001\002\000\004\067\ufff6\001\002\000" +
    "\004\067\ufff8\001\002\000\004\104\u01a3\001\002\000\004" +
    "\104\u0190\001\002\000\006\102\uffc7\103\u019e\001\002\000" +
    "\004\102\u019d\001\002\000\006\013\066\041\u0191\001\002" +
    "\000\044\011\074\015\077\017\123\020\112\040\073\042" +
    "\102\043\115\044\121\045\103\046\101\056\u019a\057\113" +
    "\060\u0199\061\110\062\100\063\114\104\116\001\002\000" +
    "\006\013\066\041\u0193\001\002\000\044\011\074\015\077" +
    "\017\123\020\112\040\073\042\102\043\115\044\121\045" +
    "\103\046\101\056\122\057\113\060\120\061\110\062\100" +
    "\063\114\104\116\001\002\000\004\041\u0195\001\002\000" +
    "\044\011\074\015\077\017\123\020\112\040\073\042\102" +
    "\043\115\044\121\045\103\046\101\056\122\057\113\060" +
    "\120\061\110\062\100\063\114\104\116\001\002\000\044" +
    "\017\150\020\137\021\142\022\132\023\145\024\134\025" +
    "\136\030\135\031\146\032\140\033\147\034\141\035\143" +
    "\036\144\037\133\102\uffc3\103\uffc3\001\002\000\044\017" +
    "\150\020\137\021\142\022\132\023\145\024\134\025\136" +
    "\030\135\031\146\032\140\033\147\034\141\035\143\036" +
    "\144\037\133\102\uffc4\103\uffc4\001\002\000\044\017\150" +
    "\020\137\021\142\022\132\023\145\024\134\025\136\030" +
    "\135\031\146\032\140\033\147\034\141\035\143\036\144" +
    "\037\133\102\uffc5\103\uffc5\001\002\000\044\017\uff39\020" +
    "\uff39\021\uff39\022\uff39\023\uff39\024\uff39\025\uff39\030\uff39" +
    "\031\uff39\032\uff39\033\uff39\034\uff39\035\uff39\036\uff39\037" +
    "\uff39\102\u019c\103\uff39\001\002\000\044\017\uff3b\020\uff3b" +
    "\021\uff3b\022\uff3b\023\uff3b\024\uff3b\025\uff3b\030\uff3b\031" +
    "\uff3b\032\uff3b\033\uff3b\034\uff3b\035\uff3b\036\uff3b\037\uff3b" +
    "\102\u019b\103\uff3b\001\002\000\016\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\067\uffe2\001\002\000\016\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\067\uffe1\001\002\000" +
    "\016\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\067\uffe4" +
    "\001\002\000\004\104\u01a0\001\002\000\004\102\uffc6\001" +
    "\002\000\006\013\066\041\u01a1\001\002\000\044\011\074" +
    "\015\077\017\123\020\112\040\073\042\102\043\115\044" +
    "\121\045\103\046\101\056\122\057\113\060\120\061\110" +
    "\062\100\063\114\104\116\001\002\000\004\102\u01a9\001" +
    "\002\000\006\013\066\041\u01a4\001\002\000\044\011\074" +
    "\015\077\017\123\020\112\040\073\042\102\043\115\044" +
    "\121\045\103\046\101\056\122\057\u01a6\060\120\061\u01a5" +
    "\062\100\063\114\104\116\001\002\000\044\017\uff38\020" +
    "\uff38\021\uff38\022\uff38\023\uff38\024\uff38\025\uff38\030\uff38" +
    "\031\uff38\032\uff38\033\uff38\034\uff38\035\uff38\036\uff38\037" +
    "\uff38\102\u01a8\103\uff38\001\002\000\044\017\uff3a\020\uff3a" +
    "\021\uff3a\022\uff3a\023\uff3a\024\uff3a\025\uff3a\030\uff3a\031" +
    "\uff3a\032\uff3a\033\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a" +
    "\102\u01a7\103\uff3a\001\002\000\016\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\067\uffe0\001\002\000\016\004\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\010\uffdf\067\uffdf\001\002\000" +
    "\016\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\067\uffe3" +
    "\001\002\000\014\011\u01ab\013\066\041\267\102\uffd0\103" +
    "\uffd0\001\002\000\010\006\u0165\007\u0162\012\u01ac\001\002" +
    "\000\004\102\u01b0\001\002\000\004\012\u01ae\001\002\000" +
    "\004\102\u01af\001\002\000\016\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\067\ufff3\001\002\000\016\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\067\ufff2\001\002\000\004" +
    "\002\001\001\002\000\004\002\ufffe\001\002\000\014\011" +
    "\u01b4\013\066\041\065\102\uffd0\103\uffd0\001\002\000\010" +
    "\006\u0165\007\u0162\012\u01b5\001\002\000\004\102\u01b9\001" +
    "\002\000\004\012\u01b7\001\002\000\004\102\u01b8\001\002" +
    "\000\016\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\067" +
    "\ufff5\001\002\000\016\004\ufff4\005\ufff4\006\ufff4\007\ufff4" +
    "\010\ufff4\067\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01b7\000\016\002\005\003\004\015\011\046\013\047" +
    "\010\050\014\001\001\000\014\010\060\011\062\012\056" +
    "\051\061\053\057\001\001\000\014\007\u0167\042\u0160\043" +
    "\u0166\065\u01b1\066\u0163\001\001\000\002\001\001\000\014" +
    "\010\060\011\062\012\056\052\263\053\264\001\001\000" +
    "\002\001\001\000\012\015\011\046\u018a\047\010\050\014" +
    "\001\001\000\012\015\011\046\u0189\047\010\050\014\001" +
    "\001\000\002\001\001\000\004\003\u015f\001\001\000\012" +
    "\015\011\046\u015e\047\010\050\014\001\001\000\006\014" +
    "\u0156\057\u0157\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\021\001\001\000\002\001\001\000\036\006" +
    "\027\016\040\017\033\020\034\021\026\022\043\023\045" +
    "\024\044\027\050\030\031\034\054\045\025\047\030\062" +
    "\047\001\001\000\004\035\u0147\001\001\000\002\001\001" +
    "\000\032\006\027\016\040\017\033\020\034\021\026\022" +
    "\043\023\045\024\044\027\050\030\031\034\054\062\u013b" +
    "\001\001\000\002\001\001\000\032\006\027\016\040\017" +
    "\033\020\034\021\026\022\043\023\045\024\044\027\050" +
    "\030\031\034\054\062\u013a\001\001\000\006\045\u0139\047" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\006" +
    "\u012b\016\040\017\033\020\034\021\026\022\043\023\045" +
    "\024\044\027\050\030\031\034\054\044\u012c\001\001\000" +
    "\004\063\u010d\001\001\000\002\001\001\000\004\035\u0104" +
    "\001\001\000\004\035\374\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\304\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\123\005\274\017\104\031\075\035\103\036\116" +
    "\037\105\040\110\041\106\001\001\000\014\010\060\011" +
    "\062\012\056\052\263\053\264\001\001\000\002\001\001" +
    "\000\014\010\060\011\062\012\056\051\061\053\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\066\001" +
    "\001\000\024\004\123\005\244\017\104\031\075\035\103" +
    "\036\116\037\105\040\110\041\106\001\001\000\024\004" +
    "\123\005\242\017\104\031\075\035\103\036\116\037\105" +
    "\040\110\041\106\001\001\000\004\032\070\001\001\000" +
    "\024\004\123\005\241\017\104\031\075\035\103\036\116" +
    "\037\105\040\110\041\106\001\001\000\002\001\001\000" +
    "\024\004\123\005\074\017\104\031\075\035\103\036\116" +
    "\037\105\040\110\041\106\001\001\000\012\017\104\031" +
    "\075\036\116\041\235\001\001\000\024\004\232\005\126" +
    "\017\104\031\075\035\103\036\116\037\105\040\110\041" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\123\005\175\017\104\031\075\035\103\036\116\037" +
    "\105\040\110\041\106\054\227\001\001\000\002\001\001" +
    "\000\004\056\226\001\001\000\004\055\225\001\001\000" +
    "\004\056\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\104\031\075\036\116\041\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\204\001\001\000\004\032\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\165\001\001\000\002\001" +
    "\001\000\012\017\104\031\075\036\116\041\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\127\005" +
    "\126\017\104\031\075\035\103\036\116\037\105\040\110" +
    "\041\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\123\005\164\017\104\031\075" +
    "\035\103\036\116\037\105\040\110\041\106\001\001\000" +
    "\024\004\123\005\163\017\104\031\075\035\103\036\116" +
    "\037\105\040\110\041\106\001\001\000\002\001\001\000" +
    "\024\004\123\005\162\017\104\031\075\035\103\036\116" +
    "\037\105\040\110\041\106\001\001\000\002\001\001\000" +
    "\024\004\123\005\161\017\104\031\075\035\103\036\116" +
    "\037\105\040\110\041\106\001\001\000\024\004\123\005" +
    "\160\017\104\031\075\035\103\036\116\037\105\040\110" +
    "\041\106\001\001\000\024\004\123\005\157\017\104\031" +
    "\075\035\103\036\116\037\105\040\110\041\106\001\001" +
    "\000\024\004\123\005\156\017\104\031\075\035\103\036" +
    "\116\037\105\040\110\041\106\001\001\000\024\004\123" +
    "\005\155\017\104\031\075\035\103\036\116\037\105\040" +
    "\110\041\106\001\001\000\024\004\123\005\154\017\104" +
    "\031\075\035\103\036\116\037\105\040\110\041\106\001" +
    "\001\000\024\004\123\005\153\017\104\031\075\035\103" +
    "\036\116\037\105\040\110\041\106\001\001\000\024\004" +
    "\123\005\152\017\104\031\075\035\103\036\116\037\105" +
    "\040\110\041\106\001\001\000\024\004\123\005\151\017" +
    "\104\031\075\035\103\036\116\037\105\040\110\041\106" +
    "\001\001\000\024\004\123\005\150\017\104\031\075\035" +
    "\103\036\116\037\105\040\110\041\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\123\005\167\017\104\031\075\035" +
    "\103\036\116\037\105\040\110\041\106\001\001\000\002" +
    "\001\001\000\024\004\123\005\171\017\104\031\075\035" +
    "\103\036\116\037\105\040\110\041\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\203\001\001\000" +
    "\026\004\123\005\175\017\104\031\075\035\103\036\116" +
    "\037\105\040\110\041\106\054\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\123\005\175\017\104\031\075\035\103\036" +
    "\116\037\105\040\110\041\106\054\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\207\005\126\017\104\031\075\035\103" +
    "\036\116\037\105\040\110\041\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\123" +
    "\005\213\017\104\031\075\035\103\036\116\037\105\040" +
    "\110\041\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\004\123\005\217\017\104\031" +
    "\075\035\103\036\116\037\105\040\110\041\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\123\005\223\017\104\031\075\035\103\036\116" +
    "\037\105\040\110\041\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\237\005\126\017\104\031\075\035\103\036" +
    "\116\037\105\040\110\041\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\060\011\062\012\056\053\252\001\001\000\002\001\001" +
    "\000\004\032\066\001\001\000\024\004\123\005\244\017" +
    "\104\031\075\035\103\036\116\037\105\040\110\041\106" +
    "\001\001\000\012\010\060\011\062\012\056\053\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\060" +
    "\011\062\012\056\053\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\066\001\001\000\024\004\123\005\244\017\104\031" +
    "\075\035\103\036\116\037\105\040\110\041\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\123\005\372\017\104\031\075\035\103" +
    "\036\116\037\105\040\110\041\106\001\001\000\002\001" +
    "\001\000\024\004\123\005\370\017\104\031\075\035\103" +
    "\036\116\037\105\040\110\041\106\001\001\000\004\032" +
    "\330\001\001\000\024\004\123\005\321\017\104\031\075" +
    "\035\103\036\116\037\105\040\110\041\106\001\001\000" +
    "\024\004\123\005\317\017\104\031\075\035\103\036\116" +
    "\037\105\040\110\041\106\001\001\000\024\004\123\005" +
    "\315\017\104\031\075\035\103\036\116\037\105\040\110" +
    "\041\106\001\001\000\024\004\123\005\312\017\104\031" +
    "\075\035\103\036\116\037\105\040\110\041\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\123\005\366\017\104\031\075\035\103" +
    "\036\116\037\105\040\110\041\106\001\001\000\024\004" +
    "\123\005\364\017\104\031\075\035\103\036\116\037\105" +
    "\040\110\041\106\001\001\000\024\004\123\005\362\017" +
    "\104\031\075\035\103\036\116\037\105\040\110\041\106" +
    "\001\001\000\024\004\123\005\360\017\104\031\075\035" +
    "\103\036\116\037\105\040\110\041\106\001\001\000\024" +
    "\004\123\005\356\017\104\031\075\035\103\036\116\037" +
    "\105\040\110\041\106\001\001\000\002\001\001\000\024" +
    "\004\123\005\332\017\104\031\075\035\103\036\116\037" +
    "\105\040\110\041\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\123\005\354\017\104\031\075\035" +
    "\103\036\116\037\105\040\110\041\106\001\001\000\024" +
    "\004\123\005\352\017\104\031\075\035\103\036\116\037" +
    "\105\040\110\041\106\001\001\000\024\004\123\005\350" +
    "\017\104\031\075\035\103\036\116\037\105\040\110\041" +
    "\106\001\001\000\024\004\123\005\346\017\104\031\075" +
    "\035\103\036\116\037\105\040\110\041\106\001\001\000" +
    "\024\004\123\005\344\017\104\031\075\035\103\036\116" +
    "\037\105\040\110\041\106\001\001\000\024\004\123\005" +
    "\342\017\104\031\075\035\103\036\116\037\105\040\110" +
    "\041\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\006\u0102\016\040\017\033\020" +
    "\034\021\026\022\043\023\045\024\044\027\050\030\031" +
    "\034\054\044\u0103\001\001\000\024\004\377\005\126\017" +
    "\104\031\075\035\103\036\116\037\105\040\110\041\376" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\u0105\016\040\017\033\020\034\021\026\022" +
    "\043\023\045\024\044\027\050\030\031\034\054\044\u0106" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\006" +
    "\u0108\016\040\017\033\020\034\021\026\022\043\023\045" +
    "\024\044\027\050\030\031\034\054\044\u0109\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\006\u010b\016\040" +
    "\017\033\020\034\021\026\022\043\023\045\024\044\027" +
    "\050\030\031\034\054\044\u010c\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\006\u0129\016\040\017\033\020" +
    "\034\021\026\022\043\023\045\024\044\027\050\030\031" +
    "\034\054\044\u012a\001\001\000\004\033\u0111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\123\005\u0113\017\104\031\075\035\103\036\116\037" +
    "\105\040\110\041\106\001\001\000\002\001\001\000\004" +
    "\034\u0115\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\123\005\u0122\017\104\031\075\035\103\036\116" +
    "\037\105\040\110\041\106\001\001\000\024\004\123\005" +
    "\u0121\017\104\031\075\035\103\036\116\037\105\040\110" +
    "\041\106\001\001\000\024\004\123\005\u0120\017\104\031" +
    "\075\035\103\036\116\037\105\040\110\041\106\001\001" +
    "\000\024\004\123\005\u011f\017\104\031\075\035\103\036" +
    "\116\037\105\040\110\041\106\001\001\000\024\004\123" +
    "\005\u011e\017\104\031\075\035\103\036\116\037\105\040" +
    "\110\041\106\001\001\000\024\004\123\005\u011d\017\104" +
    "\031\075\035\103\036\116\037\105\040\110\041\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\123\005\u0125\017\104\031\075" +
    "\035\103\036\116\037\105\040\110\041\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\123\005\u0128" +
    "\017\104\031\075\035\103\036\116\037\105\040\110\041" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\u012e\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\u0131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\004\123\005\u0140\017\104\031" +
    "\075\035\103\036\116\037\105\040\110\041\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\u014a\064\u0149\001\001\000\004\025\u0152\001\001\000\006" +
    "\026\u014a\064\u014f\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\006\027\016\040\017\033\020\034\021\026" +
    "\022\043\023\045\024\044\027\050\030\031\034\054\062" +
    "\u014e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\006\027\016\040\017\033\020\034\021\026" +
    "\022\043\023\045\024\044\027\050\030\031\034\054\062" +
    "\u0155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\u0156\057\u015d\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\u0167\042" +
    "\u0160\043\u0166\065\u0162\066\u0163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\u0178\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\u0167\042\u0160\043\u0166\065\u0168\066\u0163\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\u016c" +
    "\067\u016d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\u0171\001\001" +
    "\000\006\042\u016c\067\u0177\001\001\000\004\032\u0173\001" +
    "\001\000\006\042\u016c\067\u0176\001\001\000\002\001\001" +
    "\000\006\042\u016c\067\u0175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\042\u017d\061\u017c\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\u017f\001\001\000\006" +
    "\042\u017d\061\u0185\001\001\000\004\032\u0181\001\001\000" +
    "\006\042\u017d\061\u0184\001\001\000\002\001\001\000\006" +
    "\042\u017d\061\u0183\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\u018d\060\u01a1\001\001\000\006\013\u018d\060\u018e" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u0191\001\001\000\024\004\123\005\u0197\017\104\031\075" +
    "\035\103\036\116\037\105\040\110\041\106\001\001\000" +
    "\004\032\u0193\001\001\000\024\004\123\005\u0196\017\104" +
    "\031\075\035\103\036\116\037\105\040\110\041\106\001" +
    "\001\000\002\001\001\000\024\004\123\005\u0195\017\104" +
    "\031\075\035\103\036\116\037\105\040\110\041\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\u018d\060\u019e" +
    "\001\001\000\002\001\001\000\004\032\u0191\001\001\000" +
    "\024\004\123\005\u0197\017\104\031\075\035\103\036\116" +
    "\037\105\040\110\041\106\001\001\000\002\001\001\000" +
    "\004\032\u0191\001\001\000\024\004\123\005\u0197\017\104" +
    "\031\075\035\103\036\116\037\105\040\110\041\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\066\001" +
    "\001\000\006\042\u017d\061\u01ac\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\066\001\001\000\006\042\u017d\061\u01b5\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz;
    
    public void report_error(String message, Object info)
    {   
        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol)
        {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0)
            {                
                m.append(" en la línea " + (s.left + 1));   

                if (s.right >= 0)                    
                    m.append(", columna " + (s.right + 1));
            }
        }

        m.append(" : " + message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info)
    {
        report_error(message, info);
        System.exit(1);
    }

    public Nodo getRaiz()
    {
        return raiz;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= DEFINICIONVARIABLECAB PROGRAMAPRINCIPAL 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo cab = new Nodo(accion.cabecera, accion.acciones[accion.cabecera], cleft, cright, c, false);
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();
    hijos.add(cab);
    hijos.add(p);

    RESULT = new Nodo(accion.programa, accion.acciones[accion.programa], 0, 0, hijos, false);
    raiz = RESULT;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= DEFINICIONVARIABLECAB PROGRAMAPRINCIPAL DEFINICIONFUNCION 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo cab = new Nodo(accion.cabecera, accion.acciones[accion.cabecera], cleft, cright, c, false);
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();
    hijos.add(cab);
    hijos.add(p);    
    hijos.add(new Nodo(accion.defFuncion, accion.acciones[accion.defFuncion], fleft, fright, f, false));

    RESULT = new Nodo(accion.programa, accion.acciones[accion.programa], 0, 0, hijos, false);
    raiz = RESULT;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= PROGRAMAPRINCIPAL DEFINICIONFUNCION 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();
    hijos.add(p);
    hijos.add(new Nodo(accion.defFuncion, accion.acciones[accion.defFuncion], fleft, fright, f, false));

    RESULT = new Nodo(accion.programa, accion.acciones[accion.programa], pleft, pright, hijos, false);
    raiz = RESULT;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= PROGRAMAPRINCIPAL 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();
    hijos.add(p);

    RESULT = new Nodo(accion.programa, accion.acciones[accion.programa], pleft, pright, hijos, false);
    raiz = RESULT;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAMAPRINCIPAL ::= pr_principal par_ab par_ce BLOQUE 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();

    RESULT = new Nodo(accion.programaPrincipal, accion.acciones[accion.programaPrincipal], pleft, pright, b, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMAPRINCIPAL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEFINICIONVARIABLECAB ::= DECLARACION 
            {
              ArrayList<Nodo> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = d;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEFINICIONVARIABLECAB ::= DECLARACIONCON 
            {
              ArrayList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = c;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEFINICIONVARIABLECAB ::= DEFINICIONPROTOTIPO 
            {
              ArrayList<Nodo> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> dp = new ArrayList<Nodo>();
    dp.add(p);

    RESULT = dp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEFINICIONVARIABLECAB ::= DECLARACION DEFINICIONVARIABLECAB 
            {
              ArrayList<Nodo> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> r = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    d.addAll(r);

    RESULT = d;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEFINICIONVARIABLECAB ::= DECLARACIONCON DEFINICIONVARIABLECAB 
            {
              ArrayList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> r = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    c.addAll(r);

    RESULT = c;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFINICIONVARIABLECAB ::= DEFINICIONPROTOTIPO DEFINICIONVARIABLECAB 
            {
              ArrayList<Nodo> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> r = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    r.add(0, p);

    RESULT = r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFINICIONPROTOTIPO ::= pr_entero id par_ab PARAMETROPROTOTIPO par_ce punto_coma 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    Nodo parametros = new Nodo(accion.parametroProt, accion.acciones[accion.parametroProt], pleft, cright, p, false);
    hijos.add(parametros);

    RESULT = new Nodo(accion.declaracionProt, accion.acciones[accion.declaracionProt], tleft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONPROTOTIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFINICIONPROTOTIPO ::= pr_entero id par_ab par_ce punto_coma 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    Nodo parametros = new Nodo(accion.parametroProt, accion.acciones[accion.parametroProt], cleft, cright, (new ArrayList<Nodo>()), false);
    hijos.add(parametros);

    RESULT = new Nodo(accion.declaracionProt, accion.acciones[accion.declaracionProt], tleft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONPROTOTIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEFINICIONPROTOTIPO ::= pr_real id par_ab PARAMETROPROTOTIPO par_ce punto_coma 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    Nodo parametros = new Nodo(accion.parametroProt, accion.acciones[accion.parametroProt], pleft, cright, p, false);
    hijos.add(parametros);

    RESULT = new Nodo(accion.declaracionProt, accion.acciones[accion.declaracionProt], tleft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONPROTOTIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DEFINICIONPROTOTIPO ::= pr_real id par_ab par_ce punto_coma 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    Nodo parametros = new Nodo(accion.parametroProt, accion.acciones[accion.parametroProt], cleft, cright, (new ArrayList<Nodo>()), false);
    hijos.add(parametros);

    RESULT = new Nodo(accion.declaracionProt, accion.acciones[accion.declaracionProt], ileft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONPROTOTIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DEFINICIONPROTOTIPO ::= pr_vacio id par_ab PARAMETROPROTOTIPO par_ce punto_coma 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    Nodo parametros = new Nodo(accion.parametroProt, accion.acciones[accion.parametroProt], pleft, cright, p, false);
    hijos.add(parametros);

    RESULT = new Nodo(accion.declaracionProt, accion.acciones[accion.declaracionProt], tleft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONPROTOTIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DEFINICIONPROTOTIPO ::= pr_vacio id par_ab par_ce punto_coma 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    Nodo parametros = new Nodo(accion.parametroProt, accion.acciones[accion.parametroProt], cleft, cright, (new ArrayList<Nodo>()), false);
    hijos.add(parametros);

    RESULT = new Nodo(accion.declaracionProt, accion.acciones[accion.declaracionProt], tleft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONPROTOTIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMETROPROTOTIPO ::= TIPONUMERO coma PARAMETROPROTOTIPO 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> param = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    param.add(0, t);

    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETROPROTOTIPO ::= TIPONUMERO INDICE INDICE coma PARAMETROPROTOTIPO 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i1);
    hijos.add(i2);
    Nodo n = new Nodo(accion.parametroProtMat, accion.acciones[accion.parametroProtMat], tleft, cright, hijos, false);    
    p.add(0, n);

    RESULT = p;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETROPROTOTIPO ::= TIPONUMERO INDICE coma PARAMETROPROTOTIPO 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(new Nodo(sym.numero, "1", tleft, cright, null, true));
    hijos.add(i1);
    Nodo n = new Nodo(accion.parametroProtMat, accion.acciones[accion.parametroProtMat], tleft, cright, hijos, false);    
    p.add(0, n);

    RESULT = p;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMETROPROTOTIPO ::= TIPONUMERO INDICE INDICE 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> param = new ArrayList<Nodo>();
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i1);
    hijos.add(i2);
    Nodo n = new Nodo(accion.parametroProtMat, accion.acciones[accion.parametroProtMat], tleft, i2right, hijos, false);    
    param.add(n);

    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETROPROTOTIPO ::= TIPONUMERO INDICE 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> param = new ArrayList<Nodo>();
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(new Nodo(sym.numero, "1", tleft, i1right, null, true));
    hijos.add(i1);
    Nodo n = new Nodo(accion.parametroProtMat, accion.acciones[accion.parametroProtMat], tleft, i1right, hijos, false);    
    param.add(n);

    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETROPROTOTIPO ::= TIPONUMERO 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> param = new ArrayList<Nodo>();
    param.add(t);

    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFINICIONFUNCION ::= DECLARACIONFUNCION DEFINICIONFUNCION 
            {
              ArrayList<Nodo> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> df = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    df.add(0, f);

    RESULT = df;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONFUNCION",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEFINICIONFUNCION ::= DECLARACIONFUNCION 
            {
              ArrayList<Nodo> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> df = new ArrayList<Nodo>();
    df.add(f);
    df.add(new Nodo(accion.finFuncion, accion.acciones[accion.finFuncion], 1, 1, (new ArrayList<Nodo>()), false));
    RESULT = df;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONFUNCION",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= pr_entero DECENTERO 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> e = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    for(int i = 0; i < e.size(); i++)
        e.get(i).getHijos().add(0, t);

    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= pr_real DECREAL 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> r = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    for(int i = 0; i < r.size(); i++)
        r.get(i).getHijos().add(0, t);

    RESULT = r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= pr_cadena DECCADALL punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    for(int i = 0; i < c.size(); i++)
    {
        c.get(i).getHijos().add(0, t);
        c.get(i).setColumna(fright);
    }
    
    RESULT = c;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACIONCON ::= pr_const pr_entero DECCONALL punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> e = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    for(int i = 0; i < e.size(); i++)
    {
        e.get(i).getHijos().add(0, t);
        e.get(i).setColumna(fright);
    }

    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACIONCON ::= pr_const pr_real DECCONALL punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> r = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    for(int i = 0; i < r.size(); i++)
    {
        r.get(i).getHijos().add(0, t);
        r.get(i).setColumna(fright);
    }

    RESULT = r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACIONCON ::= pr_const pr_entero id igual octa_e punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    hijos.add(v);
    Nodo n = new Nodo(accion.declaracionConsSim, accion.acciones[accion.declaracionConsSim], cleft, fright, hijos, false);    
    ArrayList<Nodo> dc = new ArrayList<Nodo> ();
    dc.add(n);

    RESULT = dc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACIONCON ::= pr_const pr_entero id igual hexa_e punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    hijos.add(v);
    Nodo n = new Nodo(accion.declaracionConsSim, accion.acciones[accion.declaracionConsSim], cleft, fright, hijos, false);    
    ArrayList<Nodo> dc = new ArrayList<Nodo> ();
    dc.add(n);

    RESULT = dc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACIONCON ::= pr_const pr_real id igual octa_r punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    hijos.add(v);
    Nodo n = new Nodo(accion.declaracionConsSim, accion.acciones[accion.declaracionConsSim], cleft, fright, hijos, false);    
    ArrayList<Nodo> dc = new ArrayList<Nodo> ();
    dc.add(n);

    RESULT = dc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACIONCON ::= pr_const pr_real id igual hexa_r punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    hijos.add(v);
    Nodo n = new Nodo(accion.declaracionConsSim, accion.acciones[accion.declaracionConsSim], cleft, fright, hijos, false);    
    ArrayList<Nodo> dc = new ArrayList<Nodo> ();
    dc.add(n);

    RESULT = dc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACIONFUNCION ::= DECLARACIONFUNCIONCABECERA BLOQUE 
            {
              Nodo RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> dc = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    dc.addAll(b);
    RESULT = new Nodo(accion.funcion, accion.acciones[accion.funcion], bleft, bright, dc, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONFUNCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECENTERO ::= id igual octa_e punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(v);
    Nodo padre = new Nodo(accion.declaracionSimIni, accion.acciones[accion.declaracionSimIni], vleft, fright, hijos, false);    
    ArrayList<Nodo> dec = new ArrayList<Nodo>();
    dec.add(padre);

    RESULT = dec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECENTERO",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECENTERO ::= id igual hexa_e punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(v);
    Nodo padre = new Nodo(accion.declaracionSimIni, accion.acciones[accion.declaracionSimIni], vleft, fright, hijos, false);    
    ArrayList<Nodo> dec = new ArrayList<Nodo>();
    dec.add(padre);

    RESULT = dec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECENTERO",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECENTERO ::= DECALL punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> da = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    for(int i = 0; i < da.size(); i++)
        da.get(i).setColumna(fright);

    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECENTERO",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECREAL ::= id igual octa_r punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(v);
    Nodo padre = new Nodo(accion.declaracionSimIni, accion.acciones[accion.declaracionSimIni], vleft, fright, hijos, false);    
    ArrayList<Nodo> dec = new ArrayList<Nodo>();
    dec.add(padre);

    RESULT = dec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREAL",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECREAL ::= id igual hexa_r punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(v);
    Nodo padre = new Nodo(accion.declaracionSimIni, accion.acciones[accion.declaracionSimIni], vleft, fright, hijos, false);    
    ArrayList<Nodo> dec = new ArrayList<Nodo>();
    dec.add(padre);

    RESULT = dec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREAL",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECREAL ::= DECALL punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> da = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    for(int i = 0; i < da.size(); i++)
        da.get(i).setColumna(fright);

    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREAL",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECALL ::= DECSIMPLE 
            {
              ArrayList<Nodo> RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ds = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> da = new ArrayList<Nodo>();
    da.add(ds);

    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECALL ::= DECVECT 
            {
              ArrayList<Nodo> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dv = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> da = new ArrayList<Nodo>();
    da.add(dv);

    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECALL ::= DECMAT 
            {
              ArrayList<Nodo> RESULT =null;
		int dmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dm = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> da = new ArrayList<Nodo>();
    da.add(dm);

    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECALL ::= DECSIMPLE coma DECALL 
            {
              ArrayList<Nodo> RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo ds = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> da = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    da.add(0, ds);

    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECALL ::= DECVECT coma DECALL 
            {
              ArrayList<Nodo> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo dv = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> da = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    da.add(0, dv);

    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECALL ::= DECMAT coma DECALL 
            {
              ArrayList<Nodo> RESULT =null;
		int dmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo dm = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> da = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    da.add(0, dm);

    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECSIMPLE ::= id igual EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(v);

    RESULT = new Nodo(accion.declaracionSimIni, accion.acciones[accion.declaracionSimIni], vleft, vright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECSIMPLE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECSIMPLE ::= id 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);

    RESULT = new Nodo(accion.declaracionSim, accion.acciones[accion.declaracionSim], ileft, iright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECSIMPLE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECVECT ::= id INDICE igual EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(new Nodo(sym.numero, "1", eleft, eright, null, true));
    hijos.add(i1);
    hijos.add(e);

    RESULT = new Nodo(accion.declaracionMatIni, accion.acciones[accion.declaracionMatIni], eleft, eright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECVECT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECVECT ::= id INDICE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(new Nodo(sym.numero, "1", i1left, i1right, null, true));
    hijos.add(i1);
    RESULT = new Nodo(accion.declaracionMat, accion.acciones[accion.declaracionMat], i1left, i1right, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECVECT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECMAT ::= id INDICE INDICE igual EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(i1);
    hijos.add(i2);
    hijos.add(e);

    RESULT = new Nodo(accion.declaracionMatIni, accion.acciones[accion.declaracionMatIni], eleft, eright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECMAT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECMAT ::= id INDICE INDICE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(i1);
    hijos.add(i2);

    RESULT = new Nodo(accion.declaracionMat, accion.acciones[accion.declaracionMat], i2left, i2right, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECMAT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECCAD ::= id igual cadena 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();
    hijos.add(i);
    hijos.add(v);

    RESULT = new Nodo(accion.declaracionSimIni, accion.acciones[accion.declaracionSimIni], vleft, vright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCAD",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECCAD ::= id 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();
    hijos.add(i);

    RESULT = new Nodo(accion.declaracionSim, accion.acciones[accion.declaracionSim], ileft, iright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCAD",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECCADALL ::= DECCAD 
            {
              ArrayList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> cadenas = new ArrayList <Nodo>();
    cadenas.add(c);

    RESULT = cadenas;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCADALL",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECCADALL ::= DECCAD coma DECCADALL 
            {
              ArrayList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dcaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> dca = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    dca.add(0, c);

    RESULT = dca;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCADALL",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECCONALL ::= DECCON 
            {
              ArrayList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> constantes = new ArrayList <Nodo>();
    constantes.add(c);

    RESULT = constantes;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONALL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECCONALL ::= DECCON coma DECCONALL 
            {
              ArrayList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dcaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> dca = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    dca.add(0, c);
    RESULT = dca;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONALL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECCON ::= id igual EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(e);

    RESULT = new Nodo(accion.declaracionConsSim, accion.acciones[accion.declaracionConsSim], eleft, eright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCON",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECCON ::= id INDICE igual EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(new Nodo(sym.numero, "1", eleft, eright, null, true));
    hijos.add(i1);
    hijos.add(e);

    RESULT = new Nodo(accion.declaracionConsMat, accion.acciones[accion.declaracionConsMat], eleft, eright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCON",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECCON ::= id INDICE INDICE igual EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(i1);
    hijos.add(i2);
    hijos.add(e);

    RESULT = new Nodo(accion.declaracionConsMat, accion.acciones[accion.declaracionConsMat], eleft, eright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCON",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOQUE ::= ll_ab NSENTENCIA ll_ce 
            {
              ArrayList<Nodo> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> s = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo declaracionVar = new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], -1, -1, (new ArrayList<Nodo>()),false);
    Nodo bloque = new Nodo(accion.bloque, accion.acciones[accion.bloque], sleft, 1, s, false);
    Nodo fin = new Nodo(accion.finBloque, accion.acciones[accion.finBloque], fleft-1, sright, (new ArrayList<Nodo>()), false);
    ArrayList<Nodo> hijosProgPrin = new ArrayList<Nodo>();
    hijosProgPrin.add(declaracionVar);
    hijosProgPrin.add(bloque);
    hijosProgPrin.add(fin);

    RESULT = hijosProgPrin;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BLOQUE ::= ll_ab DEFINICIONVARIABLE NSENTENCIA ll_ce 
            {
              ArrayList<Nodo> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> dv = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> s = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo declaracionVar = new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], dvleft, 1, dv,false);
    Nodo bloque = new Nodo(accion.bloque, accion.acciones[accion.bloque], sleft, 1, s, false);
    Nodo fin = new Nodo(accion.finBloque, accion.acciones[accion.finBloque], fleft-1, sright, (new ArrayList<Nodo>()), false);
    ArrayList<Nodo> hijosProgPrin = new ArrayList<Nodo>();
    hijosProgPrin.add(declaracionVar);
    hijosProgPrin.add(bloque);
    hijosProgPrin.add(fin);

    RESULT = hijosProgPrin;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BLOQUE ::= ll_ab DEFINICIONVARIABLE ll_ce 
            {
              ArrayList<Nodo> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> dv = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Nodo declaracionVar = new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], dvleft, 1, dv,false);
    Nodo bloque = new Nodo(accion.bloque, accion.acciones[accion.bloque], -1, -1, (new ArrayList<Nodo>()), false);
    Nodo fin = new Nodo(accion.finBloque, accion.acciones[accion.finBloque], -1, -1, (new ArrayList<Nodo>()), false);
    ArrayList<Nodo> hijosProgPrin = new ArrayList<Nodo>();
    hijosProgPrin.add(declaracionVar);
    hijosProgPrin.add(bloque);
    hijosProgPrin.add(fin);

    RESULT = hijosProgPrin;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BLOQUE ::= ll_ab ll_ce 
            {
              ArrayList<Nodo> RESULT =null;
		
    Nodo declaracionVar = new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], -1, -1, (new ArrayList<Nodo>()),false);
    Nodo bloque = new Nodo(accion.bloque, accion.acciones[accion.bloque], -1, -1, (new ArrayList<Nodo>()), false);
    Nodo fin = new Nodo(accion.finBloque, accion.acciones[accion.finBloque], -1, -1, (new ArrayList<Nodo>()), false);
    ArrayList<Nodo> hijosProgPrin = new ArrayList<Nodo>();
    hijosProgPrin.add(declaracionVar);
    hijosProgPrin.add(bloque);
    hijosProgPrin.add(fin);

    RESULT = hijosProgPrin;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NSENTENCIA ::= SENTENCIA NSENTENCIA 
            {
              ArrayList<Nodo> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> sentencias = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    sentencias.add(0, s);

    RESULT = sentencias;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NSENTENCIA",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NSENTENCIA ::= SENTENCIA 
            {
              ArrayList<Nodo> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> sentencias = new ArrayList<Nodo>();
    sentencias.add(s);

    RESULT = sentencias;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NSENTENCIA",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA ::= CONDICIONALHACERMIENTRAS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA ::= CONDICIONALMIENTRAS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA ::= CONDICIONALPARA 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA ::= CONDICIONALSI 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA ::= SENTSELECTOR 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA ::= LLAMADAFUNCION punto_coma 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA ::= ESCRITURA 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA ::= LECTURA 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA ::= ACT punto_coma 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    s.setColumna(fright);
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA ::= pr_retornar EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(e);
    RESULT = new Nodo(accion.retornar, accion.acciones[accion.retornar], eleft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA ::= pr_retornar punto_coma 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.retornar, accion.acciones[accion.retornar], fleft, fright, (new ArrayList<Nodo>()), false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA ::= pr_saltar punto_coma 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.saltar, accion.acciones[accion.saltar], fleft, fright, (new ArrayList<Nodo>()), false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ACT ::= id decr 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);    
    ArrayList<Nodo> hijosRes = new ArrayList<Nodo>();
    hijosRes.add(i);
    hijosRes.add(new Nodo(sym.numero, "1", ileft, iright, null, true));
    Nodo resta = new Nodo(accion.resta, accion.acciones[accion.resta], ileft, iright, hijosRes, false);    
    hijos.add(resta);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], ileft, iright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ACT ::= id incr 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);    
    ArrayList<Nodo> hijosSum = new ArrayList<Nodo>();
    hijosSum.add(i);
    hijosSum.add(new Nodo(sym.numero, "1", ileft, iright, null, true));
    Nodo suma = new Nodo(accion.suma, accion.acciones[accion.suma], ileft, iright, hijosSum, false);    
    hijos.add(suma);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], ileft, iright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ACT ::= id a_div EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);    
    ArrayList<Nodo> hijosDiv = new ArrayList<Nodo>();
    hijosDiv.add(i);
    hijosDiv.add(e);
    Nodo div = new Nodo(accion.division, accion.acciones[accion.division], eleft, eright, hijosDiv, false);    
    hijos.add(div);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], eleft, eright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ACT ::= id a_prod EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);    
    ArrayList<Nodo> hijosProd = new ArrayList<Nodo>();
    hijosProd.add(i);
    hijosProd.add(e);
    Nodo prod = new Nodo(accion.producto, accion.acciones[accion.producto], eleft, eright, hijosProd, false);    
    hijos.add(prod);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], eleft, eright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ACT ::= id a_resta EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);    
    ArrayList<Nodo> hijosRes = new ArrayList<Nodo>();
    hijosRes.add(i);
    hijosRes.add(e);
    Nodo res = new Nodo(accion.resta, accion.acciones[accion.resta], eleft, eright, hijosRes, false);    
    hijos.add(res);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], eleft, eright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ACT ::= id a_suma EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);    
    ArrayList<Nodo> hijosSum = new ArrayList<Nodo>();
    hijosSum.add(i);
    hijosSum.add(e);
    Nodo sum = new Nodo(accion.suma, accion.acciones[accion.suma], eleft, eright, hijosSum, false);    
    hijos.add(sum);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], eleft, eright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ACT ::= id igual EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(e);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], eleft, eright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ACT ::= id a_mod EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);    
    ArrayList<Nodo> hijosMod = new ArrayList<Nodo>();
    hijosMod.add(i);
    hijosMod.add(e);
    Nodo mod = new Nodo(accion.modulo, accion.acciones[accion.modulo], eleft, eright, hijosMod, false);    
    hijos.add(mod);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], eleft, eright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPGEN ::= OPERANDO 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = o;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPGEN",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPGEN ::= EXPRESION 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPGEN",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= EXPGEN dif EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);

    RESULT = new Nodo(accion.diferente, accion.acciones[accion.diferente], e2left, e2right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= EXPGEN ident EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);

    RESULT = new Nodo(accion.identico, accion.acciones[accion.identico], e2left, e2right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= EXPGEN mas EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);

    RESULT = new Nodo(accion.suma, accion.acciones[accion.suma], e2left, e2right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= EXPGEN menos EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);

    RESULT = new Nodo(accion.resta, accion.acciones[accion.resta], e2left, e2right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= EXPGEN prod EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);

    RESULT = new Nodo(accion.producto, accion.acciones[accion.producto], e2left, e2right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= EXPGEN div EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);

    RESULT = new Nodo(accion.division, accion.acciones[accion.division], e2left, e2right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= EXPGEN mayor EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);

    RESULT = new Nodo(accion.mayor, accion.acciones[accion.mayor], e2left, e2right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= EXPGEN mayor_igual EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);

    RESULT = new Nodo(accion.mayor_igual, accion.acciones[accion.mayor_igual], e2left, e2right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= EXPGEN menor EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);

    RESULT = new Nodo(accion.menor, accion.acciones[accion.menor], e2left, e2right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= EXPGEN menor_igual EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);

    RESULT = new Nodo(accion.menor_igual, accion.acciones[accion.menor_igual], e2left, e2right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= EXPGEN mod EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);

    RESULT = new Nodo(accion.modulo, accion.acciones[accion.modulo], e2left, e2right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= EXPGEN o EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);

    RESULT = new Nodo(accion.disyuncion, accion.acciones[accion.disyuncion], e2left, e2right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= EXPGEN y EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);

    RESULT = new Nodo(accion.conjuncion, accion.acciones[accion.conjuncion], e2left, e2right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= EXPGEN inv 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);

    RESULT = new Nodo(accion.inversa, accion.acciones[accion.inversa], e1left, e1right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= EXPGEN transp 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);

    RESULT = new Nodo(accion.transpuesta, accion.acciones[accion.transpuesta], e1left, e1right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= neg OPERANDO 
            {
              Nodo RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(o1);

    RESULT = new Nodo(accion.negacion, accion.acciones[accion.negacion], o1left, o1right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= neg par_ab EXPRESION par_ce 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);

    RESULT = new Nodo(accion.negacion, accion.acciones[accion.negacion], e1left, e1right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= mas OPERANDO 
            {
              Nodo RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(o1);

    RESULT = new Nodo(accion.positividad, accion.acciones[accion.positividad], o1left, o1right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= mas par_ab EXPRESION par_ce 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);

    RESULT = new Nodo(accion.positividad, accion.acciones[accion.positividad], e1left, e1right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= menos OPERANDO 
            {
              Nodo RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(o1);

    RESULT = new Nodo(accion.negatividad, accion.acciones[accion.negatividad], o1left, o1right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= menos par_ab EXPRESION par_ce 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);

    RESULT = new Nodo(accion.negatividad, accion.acciones[accion.negatividad], e1left, e1right, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= OPERADORFUNCION 
            {
              Nodo RESULT =null;
		int ofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo of = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = of;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= OPERADORCOND 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = op;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= par_ab EXPRESION par_ce 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    e.setColumna(fright+1);
    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= par_ab OPERANDO par_ce 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    o.setColumna(fright+1);
    RESULT = o;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ARGUMENTO ::= EXPGEN 
            {
              ArrayList<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> arg = new ArrayList<Nodo>();
    arg.add(e);

    RESULT = arg;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ARGUMENTO ::= EXPGEN coma ARGUMENTO 
            {
              ArrayList<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    a.add(0, e);
    RESULT = a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ASIGNACION ::= id igual cadena punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(v);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], ileft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ASIGNACION ::= id a_div EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    ArrayList<Nodo> hijosDiv = new ArrayList<Nodo>();
    hijosDiv.add(i);
    hijosDiv.add(e);
    Nodo div = new Nodo(accion.division, accion.acciones[accion.division], eleft, fright, hijosDiv, false );
    hijos.add(div);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], ileft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ASIGNACION ::= id a_prod EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    ArrayList<Nodo> hijosProd = new ArrayList<Nodo>();
    hijosProd.add(i);
    hijosProd.add(e);
    Nodo prod = new Nodo(accion.producto, accion.acciones[accion.producto], eleft, fright, hijosProd, false );
    hijos.add(prod);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], ileft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ASIGNACION ::= id a_resta EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    ArrayList<Nodo> hijosRes = new ArrayList<Nodo>();
    hijosRes.add(i);
    hijosRes.add(e);
    Nodo res = new Nodo(accion.resta, accion.acciones[accion.resta], eleft, fright, hijosRes, false );
    hijos.add(res);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], ileft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ASIGNACION ::= id a_suma EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    ArrayList<Nodo> hijosSum = new ArrayList<Nodo>();
    hijosSum.add(i);
    hijosSum.add(e);
    Nodo sum = new Nodo(accion.suma, accion.acciones[accion.suma], eleft, fright, hijosSum, false );
    hijos.add(sum);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], ileft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ASIGNACION ::= id igual EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(e);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], ileft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ASIGNACION ::= id a_mod EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    ArrayList<Nodo> hijosMod = new ArrayList<Nodo>();
    hijosMod.add(i);
    hijosMod.add(e);
    Nodo mod = new Nodo(accion.modulo, accion.acciones[accion.modulo], eleft, fright, hijosMod, false );
    hijos.add(mod);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], ileft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ASIGNACION ::= id INDICE a_div EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosVec = new ArrayList<Nodo>();
    hijosVec.add(i);
    hijosVec.add(new Nodo(sym.numero, "1", ileft, oright, null, true));
    hijosVec.add(i1);
    Nodo aVec = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], ileft, oright, hijosVec, false);    
    hijos.add(aVec);    
    ArrayList<Nodo> hijosDiv = new ArrayList<Nodo>();
    hijosDiv.add(aVec);
    hijosDiv.add(e);
    Nodo div = new Nodo(accion.division, accion.acciones[accion.division], eleft, fright, hijosDiv, false );
    hijos.add(div);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], ileft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ASIGNACION ::= id INDICE a_prod EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosVec = new ArrayList<Nodo>();
    hijosVec.add(i);
    hijosVec.add(new Nodo(sym.numero, "1", ileft, oright, null, true));
    hijosVec.add(i1);
    Nodo aVec = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], ileft, oright, hijosVec, false);    
    hijos.add(aVec);    
    ArrayList<Nodo> hijosProd = new ArrayList<Nodo>();
    hijosProd.add(aVec);
    hijosProd.add(e);
    Nodo prod = new Nodo(accion.producto, accion.acciones[accion.producto], eleft, fright, hijosProd, false );
    hijos.add(prod);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], eleft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ASIGNACION ::= id INDICE a_resta EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosVec = new ArrayList<Nodo>();
    hijosVec.add(i);
    hijosVec.add(new Nodo(sym.numero, "1", ileft, oright, null, true));
    hijosVec.add(i1);
    Nodo aVec = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], ileft, oright, hijosVec, false);    
    hijos.add(aVec);    
    ArrayList<Nodo> hijosRes = new ArrayList<Nodo>();
    hijosRes.add(aVec);
    hijosRes.add(e);
    Nodo res = new Nodo(accion.resta, accion.acciones[accion.resta], eleft, fright, hijosRes, false );
    hijos.add(res);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], eleft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ASIGNACION ::= id INDICE a_suma EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosVec = new ArrayList<Nodo>();
    hijosVec.add(i);
    hijosVec.add(new Nodo(sym.numero, "1", ileft, oright, null, true));
    hijosVec.add(i1);
    Nodo aVec = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], ileft, oright, hijosVec, false);    
    hijos.add(aVec);    
    ArrayList<Nodo> hijosSum = new ArrayList<Nodo>();
    hijosSum.add(aVec);
    hijosSum.add(e);
    Nodo sum = new Nodo(accion.suma, accion.acciones[accion.suma], eleft, fright, hijosSum, false );
    hijos.add(sum);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], eleft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ASIGNACION ::= id INDICE igual EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosVec = new ArrayList<Nodo>();
    hijosVec.add(i);
    hijosVec.add(new Nodo(sym.numero, "1", ileft, oright, null, true));
    hijosVec.add(i1);
    Nodo aVec = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], ileft, oright, hijosVec, false);    
    hijos.add(aVec);
    hijos.add(e);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], eleft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ASIGNACION ::= id INDICE a_mod EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosVec = new ArrayList<Nodo>();
    hijosVec.add(i);
    hijosVec.add(new Nodo(sym.numero, "1", ileft, oright, null, true));
    hijosVec.add(i1);
    Nodo aVec = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], ileft, oright, hijosVec, false);    
    hijos.add(aVec);    
    ArrayList<Nodo> hijosMod = new ArrayList<Nodo>();
    hijosMod.add(aVec);
    hijosMod.add(e);
    Nodo mod = new Nodo(accion.modulo, accion.acciones[accion.modulo], eleft, fright, hijosMod, false );
    hijos.add(mod);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], eleft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ASIGNACION ::= id INDICE INDICE a_div EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosMat = new ArrayList<Nodo>();
    hijosMat.add(i);
    hijosMat.add(i1);
    hijosMat.add(i2);
    Nodo aMat = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], ileft, oright, hijosMat, false);    
    hijos.add(aMat);    
    ArrayList<Nodo> hijosDiv = new ArrayList<Nodo>();
    hijosDiv.add(aMat);
    hijosDiv.add(e);
    Nodo div = new Nodo(accion.division, accion.acciones[accion.division], eleft, fright, hijosDiv, false );
    hijos.add(div);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], eleft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ASIGNACION ::= id INDICE INDICE a_prod EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosMat = new ArrayList<Nodo>();
    hijosMat.add(i);
    hijosMat.add(i1);
    hijosMat.add(i2);
    Nodo aMat = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], ileft, oright, hijosMat, false);    
    hijos.add(aMat);    
    ArrayList<Nodo> hijosProd = new ArrayList<Nodo>();
    hijosProd.add(aMat);
    hijosProd.add(e);
    Nodo prod = new Nodo(accion.producto, accion.acciones[accion.producto], eleft, fright, hijosProd, false );
    hijos.add(prod);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], eleft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ASIGNACION ::= id INDICE INDICE a_resta EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosMat = new ArrayList<Nodo>();
    hijosMat.add(i);
    hijosMat.add(i1);
    hijosMat.add(i2);
    Nodo aMat = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], ileft, oright, hijosMat, false);    
    hijos.add(aMat);    
    ArrayList<Nodo> hijosRes = new ArrayList<Nodo>();
    hijosRes.add(aMat);
    hijosRes.add(e);
    Nodo res = new Nodo(accion.resta, accion.acciones[accion.resta], eleft, fright, hijosRes, false );
    hijos.add(res);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], eleft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ASIGNACION ::= id INDICE INDICE a_suma EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosMat = new ArrayList<Nodo>();
    hijosMat.add(i);
    hijosMat.add(i1);
    hijosMat.add(i2);
    Nodo aMat = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], ileft, oright, hijosMat, false);    
    hijos.add(aMat);    
    ArrayList<Nodo> hijosSum = new ArrayList<Nodo>();
    hijosSum.add(aMat);
    hijosSum.add(e);
    Nodo sum = new Nodo(accion.suma, accion.acciones[accion.suma], eleft, fright, hijosSum, false );
    hijos.add(sum);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], eleft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ASIGNACION ::= id INDICE INDICE igual EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosMat = new ArrayList<Nodo>();
    hijosMat.add(i);
    hijosMat.add(i1);
    hijosMat.add(i2);
    Nodo aMat = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], ileft, oright, hijosMat, false);    
    hijos.add(aMat);
    hijos.add(e);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], eleft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ASIGNACION ::= id INDICE INDICE a_mod EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosMat = new ArrayList<Nodo>();
    hijosMat.add(i);
    hijosMat.add(i1);
    hijosMat.add(i2);
    Nodo aMat = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], ileft, oright, hijosMat, false);    
    hijos.add(aMat);    
    ArrayList<Nodo> hijosMod = new ArrayList<Nodo>();
    hijosMod.add(aMat);
    hijosMod.add(e);
    Nodo mod = new Nodo(accion.modulo, accion.acciones[accion.modulo], eleft, fright, hijosMod, false );
    hijos.add(mod);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], eleft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CONDICIONAL ::= par_ab OPERANDO par_ce 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = op;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONDICIONAL ::= par_ab EXPRESION par_ce 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    e.setColumna(fright+1);

    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONDICIONALHACERMIENTRAS ::= pr_hacer BLOQUE pr_mientras CONDICIONAL punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);
    hijos.addAll(b);

    RESULT = new Nodo(accion.hacerMientras, accion.acciones[accion.hacerMientras], ileft, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALHACERMIENTRAS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONDICIONALHACERMIENTRAS ::= pr_hacer SENTENCIA pr_mientras CONDICIONAL punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);    
    hijos.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], -1, -1, (new ArrayList<Nodo>()), false));
    ArrayList<Nodo> sent = new ArrayList<Nodo>();
    sent.add(s);
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], sleft, sright, sent, false));
    hijos.add(new Nodo(accion.finBloque, accion.acciones[accion.finBloque], sleft, fright, (new ArrayList<Nodo>()), false));

    RESULT = new Nodo(accion.hacerMientras, accion.acciones[accion.hacerMientras], ileft, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALHACERMIENTRAS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONDICIONALMIENTRAS ::= pr_mientras CONDICIONAL BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);
    hijos.addAll(b);

    RESULT = new Nodo(accion.mientras, accion.acciones[accion.mientras], ileft, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALMIENTRAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONDICIONALMIENTRAS ::= pr_mientras CONDICIONAL SENTENCIA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);    
    hijos.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], -1, -1, (new ArrayList<Nodo>()), false));
    ArrayList<Nodo> sent = new ArrayList<Nodo>();
    sent.add(s);
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], sleft, 1, sent, false));
    hijos.add(new Nodo(accion.finBloque, accion.acciones[accion.finBloque], sleft, 1, (new ArrayList<Nodo>()), false));

    RESULT = new Nodo(accion.mientras, accion.acciones[accion.mientras], ileft, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALMIENTRAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONDICIONALPARA ::= pr_para CONTROLADOR BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    c.addAll(b);

    RESULT = new Nodo(accion.para, accion.acciones[accion.para], ileft, 1, c, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALPARA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONDICIONALPARA ::= pr_para CONTROLADOR SENTENCIA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    c.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], -1, -1, (new ArrayList<Nodo>()), false));
    ArrayList<Nodo> sent = new ArrayList<Nodo>();
    sent.add(s);
    c.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], sleft, 1, sent, false));
    c.add(new Nodo(accion.finBloque, accion.acciones[accion.finBloque], sleft, 1, (new ArrayList<Nodo>()), false));

    RESULT = new Nodo(accion.para, accion.acciones[accion.para], ileft, 1, c, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALPARA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CONDICIONALSI ::= pr_si CONDICIONAL BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);
    hijos.addAll(b);    
    hijos.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], -1, -1, (new ArrayList<Nodo>()), false));
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], -1, -1, (new ArrayList<Nodo>()), false));
    hijos.add(new Nodo(accion.finBloque, accion.acciones[accion.finBloque], -1, -1, (new ArrayList<Nodo>()), false));

    RESULT = new Nodo(accion.si, accion.acciones[accion.si], ileft, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CONDICIONALSI ::= pr_si CONDICIONAL BLOQUE pr_sino BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> b1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> b2 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);
    hijos.addAll(b1);
    hijos.addAll(b2);
    
    RESULT = new Nodo(accion.si, accion.acciones[accion.si], ileft, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CONDICIONALSI ::= pr_si CONDICIONAL SENTENCIA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);
    hijos.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], -1, -1, (new ArrayList<Nodo>()), false));
    ArrayList<Nodo> sent = new ArrayList<Nodo>();
    sent.add(s);
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], sleft, 1, sent, false));
    hijos.add(new Nodo(accion.finBloque, accion.acciones[accion.finBloque], sleft, 1, (new ArrayList<Nodo>()), false));
    hijos.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], -1, -1, (new ArrayList<Nodo>()), false));
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], -1, -1, (new ArrayList<Nodo>()), false));
    hijos.add(new Nodo(accion.finBloque, accion.acciones[accion.finBloque], -1, -1, (new ArrayList<Nodo>()), false));

    RESULT = new Nodo(accion.si, accion.acciones[accion.si], ileft, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CONDICIONALSI ::= pr_si CONDICIONAL BLOQUE pr_sino SENTENCIA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);
    hijos.addAll(b);
    hijos.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], -1, -1, (new ArrayList<Nodo>()), false));
    ArrayList<Nodo> sent = new ArrayList<Nodo>();
    sent.add(s);
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], sleft, 1, sent, false));
    hijos.add(new Nodo(accion.finBloque, accion.acciones[accion.finBloque], sleft, 1, (new ArrayList<Nodo>()), false));

    RESULT = new Nodo(accion.si, accion.acciones[accion.si], ileft, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CONDICIONALSI ::= pr_si CONDICIONAL SENTENCIA pr_sino BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);
    hijos.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], -1, -1, (new ArrayList<Nodo>()), false));
    ArrayList<Nodo> sent = new ArrayList<Nodo>();
    sent.add(s);
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], sleft, 1, sent, false));
    hijos.add(new Nodo(accion.finBloque, accion.acciones[accion.finBloque], sleft, 1, (new ArrayList<Nodo>()), false));
    hijos.addAll(b);

    RESULT = new Nodo(accion.si, accion.acciones[accion.si], ileft, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CONDICIONALSI ::= pr_si CONDICIONAL SENTENCIA pr_sino SENTENCIA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);
    hijos.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], -1, -1, (new ArrayList<Nodo>()), false));
    ArrayList<Nodo> sent1 = new ArrayList<Nodo>();
    sent1.add(s1);
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], s1left, 1, sent1, false));
    hijos.add(new Nodo(accion.finBloque, accion.acciones[accion.finBloque], s1left, 1, (new ArrayList<Nodo>()), false));
    hijos.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], -1, -1, (new ArrayList<Nodo>()), false));
    ArrayList<Nodo> sent2 = new ArrayList<Nodo>();
    sent2.add(s2);
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], s2left, 1, sent2, false));
    hijos.add(new Nodo(accion.finBloque, accion.acciones[accion.finBloque], s2left, 1, (new ArrayList<Nodo>()), false));

    RESULT = new Nodo(accion.si, accion.acciones[accion.si], ileft, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CONTROLADOR ::= par_ab INI punto_coma EXPGEN punto_coma ACT par_ce 
            {
              ArrayList<Nodo> RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo ini = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo f1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo f2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> ctrl = new ArrayList<Nodo>();
    ini.setColumna(f1right);
    ctrl.add(ini);
    e.setColumna(f2right);
    ctrl.add(e);
    a.setColumna(f3right);
    ctrl.add(a);

    RESULT = ctrl;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROLADOR",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ESCRITURA ::= pr_mostrar par_ab EXPGEN par_ce punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(e);
    RESULT = new Nodo(accion.escritura, accion.acciones[accion.escritura], ileft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ESCRITURA ::= pr_mostrar par_ab cadena par_ce punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);
    RESULT = new Nodo(accion.escritura, accion.acciones[accion.escritura], ileft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ESCRITURA ::= pr_mostrar par_ab par_ce punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.escritura, accion.acciones[accion.escritura], ileft, fright, (new ArrayList<Nodo>()), false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // INDICE ::= cor_ab EXPGEN cor_ce 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDICE",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // INI ::= id igual EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(e);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], eleft, eright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INI",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // INI ::= pr_entero id igual EXPGEN 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    hijos.add(e);

    RESULT = new Nodo(accion.declaracionSim, accion.acciones[accion.declaracionSim], eleft, eright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INI",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // LECTURA ::= pr_leer par_ab id par_ce punto_coma 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);

    RESULT = new Nodo(accion.lectura, accion.acciones[accion.lectura], bleft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LECTURA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // MATRIZ ::= ll_ab ARGUMENTO ll_ce 
            {
              Nodo RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> args = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.elemMat, accion.acciones[accion.elemMat], argsleft, fright, args, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATRIZ",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // DECLARACIONFUNCIONCABECERA ::= TIPOVARIABLEFUNCION id par_ab PARAMETRO par_ce 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> dfc = new ArrayList<Nodo>();
    dfc.add(t);
    dfc.add(i);

    for (Nodo p1 : p)
        p1.setColumna(fright);

    dfc.add(new Nodo(accion.parametroFun, accion.acciones[accion.parametroFun], tleft, fright, p, false));

    RESULT = dfc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONFUNCIONCABECERA",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DECLARACIONFUNCIONCABECERA ::= TIPOVARIABLEFUNCION id par_ab par_ce 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> dfc = new ArrayList<Nodo>();
    dfc.add(t);
    dfc.add(i);
    dfc.add(new Nodo(accion.parametroFun, accion.acciones[accion.parametroFun], tleft, fright, (new ArrayList<Nodo>()), false));

    RESULT = dfc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONFUNCIONCABECERA",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TIPOVARIABLEFUNCION ::= TIPONUMERO 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = t;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOVARIABLEFUNCION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TIPOVARIABLEFUNCION ::= pr_vacio 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = v;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOVARIABLEFUNCION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // DEFINICIONVARIABLE ::= DECLARACION DEFINICIONVARIABLE 
            {
              ArrayList<Nodo> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> r = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    d.addAll(r);
    RESULT = d;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DEFINICIONVARIABLE ::= DECLARACION 
            {
              ArrayList<Nodo> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = d;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // PARAMETRO ::= TIPONUMERO id coma PARAMETRO 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> param = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijosSim = new ArrayList<Nodo>();
    hijosSim.add(t);
    hijosSim.add(i);
    Nodo sim = new Nodo(accion.parametroFunSim, accion.acciones[accion.parametroFunSim], tleft, fright, hijosSim, false);
    param.add(0, sim);

    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // PARAMETRO ::= TIPONUMERO id INDICE coma PARAMETRO 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> param = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijosVec = new ArrayList<Nodo>();
    hijosVec.add(t);
    hijosVec.add(i);
    hijosVec.add(new Nodo(sym.numero, "1", tleft, fright, null, true));
    hijosVec.add(i1);
    Nodo vec = new Nodo(accion.parametroFunMat, accion.acciones[accion.parametroFunMat], tleft, fright, hijosVec, false);
    param.add(0, vec);

    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // PARAMETRO ::= TIPONUMERO id INDICE INDICE coma PARAMETRO 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> param = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijosMat = new ArrayList<Nodo>();
    hijosMat.add(t);
    hijosMat.add(i);
    hijosMat.add(i1);
    hijosMat.add(i2);
    Nodo mat = new Nodo(accion.parametroFunMat, accion.acciones[accion.parametroFunMat], tleft, fright, hijosMat, false);
    param.add(0, mat);

    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // PARAMETRO ::= TIPONUMERO id INDICE INDICE 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> param = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosMat = new ArrayList<Nodo>();
    hijosMat.add(t);
    hijosMat.add(i);
    hijosMat.add(i1);
    hijosMat.add(i2);
    Nodo mat = new Nodo(accion.parametroFunMat, accion.acciones[accion.parametroFunMat], tleft, i2right, hijosMat, false);
    param.add(mat);

    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // PARAMETRO ::= TIPONUMERO id INDICE 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> param = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosVec = new ArrayList<Nodo>();
    hijosVec.add(t);
    hijosVec.add(i);
    hijosVec.add(new Nodo(sym.numero, "1", tleft, i1right, null, true));
    hijosVec.add(i1);
    Nodo vec = new Nodo(accion.parametroFunMat, accion.acciones[accion.parametroFunMat], tleft, i1right, hijosVec, false);
    param.add(vec);

    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // PARAMETRO ::= TIPONUMERO id 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> param = new ArrayList<Nodo>();
    ArrayList<Nodo> hijosSim = new ArrayList<Nodo>();
    hijosSim.add(t);
    hijosSim.add(i);
    Nodo sim = new Nodo(accion.parametroFunSim, accion.acciones[accion.parametroFunSim], tleft, tright, hijosSim, false);
    param.add(sim);

    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // PARAMETROBINARIO ::= par_ab EXPGEN coma EXPGEN par_ce 
            {
              ArrayList<Nodo> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> param = new ArrayList<Nodo>();
    param.add(e1);
    param.add(e2);

    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROBINARIO",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // PARAMETROUNARIO ::= par_ab EXPGEN par_ce 
            {
              ArrayList<Nodo> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> param = new ArrayList<Nodo>();
    param.add(e1);

    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROUNARIO",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SENTSELECTOR ::= pr_selector CONDICIONAL ll_ab NCASO SENTDEFECTO ll_ce 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> nc = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo df = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo> ();
    hijos.add(c);
    Nodo casos = new Nodo(accion.casos, accion.acciones[accion.casos], ncleft, 1, nc, false);
    hijos.add(casos);
    hijos.add(df);

    RESULT = new Nodo(accion.selector, accion.acciones[accion.selector], ileft, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTSELECTOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SENTSELECTOR ::= pr_selector CONDICIONAL ll_ab NCASO ll_ce 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> nc = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo> ();
    hijos.add(c);
    Nodo casos = new Nodo(accion.casos, accion.acciones[accion.casos], ncleft, 1, nc, false);
    hijos.add(casos);    
    hijos.add(new Nodo(accion.pordefecto, accion.acciones[accion.pordefecto], -1, -1, (new ArrayList<Nodo>()), false));

    RESULT = new Nodo(accion.selector, accion.acciones[accion.selector], ileft, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTSELECTOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NCASO ::= SENTCASO NCASO 
            {
              ArrayList<Nodo> RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo sc = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int casosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> casos = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    casos.add(0, sc);

    RESULT = casos;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NCASO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NCASO ::= SENTCASO 
            {
              ArrayList<Nodo> RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo sc = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> casos = new ArrayList<Nodo>();
    casos.add(sc);

    RESULT = casos;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NCASO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // SENTCASO ::= pr_caso numero sig_pun NSENTENCIA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> ns = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(n);
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], nsleft, 1, ns, false));

    RESULT = new Nodo(accion.caso, accion.acciones[accion.caso], ileft, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTCASO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // SENTCASO ::= pr_caso numero sig_pun 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(n);
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], -1, -1, (new ArrayList<Nodo>()), false));

    RESULT = new Nodo(accion.caso, accion.acciones[accion.caso], ileft, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTCASO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // SENTDEFECTO ::= pr_default sig_pun NSENTENCIA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> ns = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], nsleft, 1, ns, false));

    RESULT = new Nodo(accion.pordefecto, accion.acciones[accion.pordefecto], ileft, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTDEFECTO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // SENTDEFECTO ::= pr_default sig_pun 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], -1, -1, (new ArrayList<Nodo>()), false));

    RESULT = new Nodo(accion.pordefecto, accion.acciones[accion.pordefecto], ileft, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTDEFECTO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // LLAMADAFUNCION ::= id par_ab par_ce 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo argumento = new Nodo(accion.argumento, accion.acciones[accion.argumento], -1, -1, (new ArrayList<Nodo>()), false);
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(argumento);

    RESULT = new Nodo(accion.llamadaFuncion, accion.acciones[accion.llamadaFuncion], ileft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // LLAMADAFUNCION ::= id par_ab ARGUMENTO par_ce 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo argumento = new Nodo(accion.argumento, accion.acciones[accion.argumento], aleft, fright, a, false);
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(argumento);

    RESULT = new Nodo(accion.llamadaFuncion, accion.acciones[accion.llamadaFuncion], ileft, fright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // OPERADORFUNCION ::= pr_suma PARAMETROBINARIO 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.suma, accion.acciones[accion.suma], opleft, opright, p,false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORFUNCION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // OPERADORFUNCION ::= pr_resta PARAMETROBINARIO 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.resta, accion.acciones[accion.resta], opleft, opright, p,false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORFUNCION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // OPERADORFUNCION ::= pr_prod PARAMETROBINARIO 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.producto, accion.acciones[accion.producto], opleft, opright, p,false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORFUNCION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // OPERADORFUNCION ::= pr_transp PARAMETROUNARIO 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.transpuesta, accion.acciones[accion.transpuesta], opleft, opright, p,false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORFUNCION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // OPERADORFUNCION ::= pr_inv PARAMETROUNARIO 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.inversa, accion.acciones[accion.inversa], opleft, opright, p,false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORFUNCION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // OPERADORCOND ::= CONDICIONAL sig_int par_ab EXPGEN par_ce sig_pun par_ab EXPGEN par_ce 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    operandos.add(e3);

    RESULT = new Nodo(accion.operacionCond, accion.acciones[accion.operacionCond], e1left, fright, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORCOND",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // OPERANDOENTERO ::= LLAMADAFUNCION 
            {
              Nodo RESULT =null;
		int llleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ll = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ll;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // OPERANDOENTERO ::= id INDICE INDICE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(d1);
    hijos.add(d2);

    RESULT = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], ileft, d2right, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // OPERANDOENTERO ::= id INDICE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(new Nodo(sym.numero, "1", ileft, d1right, null, true));
    hijos.add(d1);

    RESULT = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], ileft, d1right, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // OPERANDOENTERO ::= id 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = i;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // OPERANDOENTERO ::= numero 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = n;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // OPERANDO ::= OPERANDOENTERO 
            {
              Nodo RESULT =null;
		int oeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo oe = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = oe;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // OPERANDO ::= real 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // OPERANDO ::= octa_e 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = o;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // OPERANDO ::= octa_r 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = o;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // OPERANDO ::= hexa_e 
            {
              Nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = h;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // OPERANDO ::= hexa_r 
            {
              Nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = h;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // OPERANDO ::= MATRIZ 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = m;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // TIPONUMERO ::= pr_entero 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPONUMERO",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // TIPONUMERO ::= pr_real 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPONUMERO",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
