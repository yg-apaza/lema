
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package lema;

import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\315\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\004\000\002\002\003\000\002\003\006" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\004\000\002\065\004\000\002\065\004\000\002" +
    "\022\010\000\002\022\007\000\002\022\010\000\002\022" +
    "\007\000\002\022\010\000\002\022\007\000\002\024\005" +
    "\000\002\024\007\000\002\024\006\000\002\024\005\000" +
    "\002\024\004\000\002\024\003\000\002\012\004\000\002" +
    "\012\003\000\002\066\004\000\002\066\004\000\002\066" +
    "\005\000\002\067\006\000\002\067\006\000\002\067\010" +
    "\000\002\067\010\000\002\067\010\000\002\067\010\000" +
    "\002\010\004\000\002\070\006\000\002\070\006\000\002" +
    "\070\004\000\002\071\006\000\002\071\006\000\002\071" +
    "\004\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\072\005\000\002\072\005\000\002\072\005\000" +
    "\002\013\005\000\002\013\003\000\002\014\006\000\002" +
    "\014\006\000\002\014\004\000\002\015\007\000\002\015" +
    "\007\000\002\015\005\000\002\020\005\000\002\020\003" +
    "\000\002\021\003\000\002\021\005\000\002\017\003\000" +
    "\002\017\005\000\002\016\005\000\002\016\006\000\002" +
    "\016\006\000\002\016\007\000\002\016\007\000\002\063" +
    "\005\000\002\063\006\000\002\063\005\000\002\063\004" +
    "\000\002\007\004\000\002\007\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\004\000\002\006" +
    "\003\000\002\006\003\000\002\006\004\000\002\006\005" +
    "\000\002\006\004\000\002\047\004\000\002\047\004\000" +
    "\002\047\005\000\002\005\003\000\002\005\003\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\006\000\002\004\004\000\002\004\006\000\002\004\004" +
    "\000\002\004\006\000\002\004\003\000\002\004\003\000" +
    "\002\004\005\000\002\004\005\000\002\073\003\000\002" +
    "\073\005\000\002\025\006\000\002\025\006\000\002\025" +
    "\007\000\002\025\010\000\002\050\005\000\002\050\005" +
    "\000\002\027\007\000\002\027\007\000\002\030\005\000" +
    "\002\030\005\000\002\031\005\000\002\031\005\000\002" +
    "\032\005\000\002\032\007\000\002\032\005\000\002\032" +
    "\007\000\002\032\007\000\002\032\007\000\002\051\011" +
    "\000\002\037\007\000\002\037\007\000\002\037\006\000" +
    "\002\045\005\000\002\046\005\000\002\046\006\000\002" +
    "\040\007\000\002\041\005\000\002\043\003\000\002\043" +
    "\005\000\002\044\005\000\002\042\003\000\002\042\005" +
    "\000\002\011\007\000\002\011\006\000\002\062\003\000" +
    "\002\062\003\000\002\064\004\000\002\064\003\000\002" +
    "\023\006\000\002\023\007\000\002\023\010\000\002\023" +
    "\006\000\002\023\005\000\002\023\004\000\002\074\007" +
    "\000\002\075\005\000\002\033\010\000\002\033\007\000" +
    "\002\035\004\000\002\035\003\000\002\036\010\000\002" +
    "\036\007\000\002\036\006\000\002\036\005\000\002\034" +
    "\007\000\002\034\006\000\002\026\005\000\002\026\006" +
    "\000\002\056\004\000\002\056\004\000\002\056\004\000" +
    "\002\056\004\000\002\056\004\000\002\057\007\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\052\003" +
    "\000\002\052\005\000\002\052\004\000\002\052\003\000" +
    "\002\052\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\054\003\000\002\054\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\061\003\000" +
    "\002\061\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0195\000\016\004\010\005\013\006\004\007\007\010" +
    "\016\067\017\001\002\000\004\104\u0191\001\002\000\012" +
    "\002\ufffd\005\u0143\006\u0141\007\u013e\001\002\000\004\002" +
    "\u018f\001\002\000\004\104\u0188\001\002\000\006\006\u0169" +
    "\007\u0168\001\002\000\016\004\010\005\013\006\004\007" +
    "\007\010\016\067\ufffb\001\002\000\016\004\010\005\013" +
    "\006\004\007\007\010\016\067\ufff9\001\002\000\004\104" +
    "\u0156\001\002\000\004\067\017\001\002\000\016\004\010" +
    "\005\013\006\004\007\007\010\016\067\ufffa\001\002\000" +
    "\004\104\u0135\001\002\000\004\011\020\001\002\000\004" +
    "\012\021\001\002\000\004\015\023\001\002\000\012\002" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\001\002\000\034\006\055" +
    "\007\053\010\016\016\051\065\033\066\025\070\041\072" +
    "\042\073\036\074\037\075\024\101\052\104\046\001\002" +
    "\000\004\011\335\001\002\000\004\011\u0113\001\002\000" +
    "\026\016\u0111\065\033\066\025\070\041\072\042\073\036" +
    "\074\037\075\024\101\052\104\046\001\002\000\036\016" +
    "\uffb6\065\uffb6\066\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6" +
    "\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6\104" +
    "\uffb6\001\002\000\034\016\uffb9\065\033\066\025\070\041" +
    "\072\042\073\036\074\037\075\024\076\uffb9\077\uffb9\100" +
    "\uffb9\101\052\104\046\001\002\000\034\006\055\007\053" +
    "\010\016\016\uff67\065\uff67\066\uff67\070\uff67\072\uff67\073" +
    "\uff67\074\uff67\075\uff67\101\uff67\104\uff67\001\002\000\036" +
    "\016\uffb0\065\uffb0\066\uffb0\070\uffb0\071\uffb0\072\uffb0\073" +
    "\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0" +
    "\104\uffb0\001\002\000\004\011\u010a\001\002\000\004\102" +
    "\u0109\001\002\000\036\016\uffb7\065\uffb7\066\uffb7\070\uffb7" +
    "\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077" +
    "\uffb7\100\uffb7\101\uffb7\104\uffb7\001\002\000\026\015\023" +
    "\065\033\066\025\070\041\072\042\073\036\074\037\075" +
    "\024\101\052\104\046\001\002\000\004\011\356\001\002" +
    "\000\036\016\uffb8\065\uffb8\066\uffb8\070\uffb8\071\uffb8\072" +
    "\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8" +
    "\101\uffb8\104\uffb8\001\002\000\004\011\335\001\002\000" +
    "\004\011\335\001\002\000\036\016\uffb5\065\uffb5\066\uffb5" +
    "\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076" +
    "\uffb5\077\uffb5\100\uffb5\101\uffb5\104\uffb5\001\002\000\036" +
    "\016\uffb3\065\uffb3\066\uffb3\070\uffb3\071\uffb3\072\uffb3\073" +
    "\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3" +
    "\104\uffb3\001\002\000\036\016\uffb4\065\uffb4\066\uffb4\070" +
    "\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4" +
    "\077\uffb4\100\uffb4\101\uffb4\104\uffb4\001\002\000\026\011" +
    "\174\013\065\026\310\027\311\041\317\047\314\050\316" +
    "\051\307\052\315\053\313\001\002\000\004\016\305\001" +
    "\002\000\036\016\uffb1\065\uffb1\066\uffb1\070\uffb1\071\uffb1" +
    "\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100" +
    "\uffb1\101\uffb1\104\uffb1\001\002\000\046\002\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\016\uffbb\065\uffbb\066\uffbb\070\uffbb\071" +
    "\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb" +
    "\100\uffbb\101\uffbb\104\uffbb\001\002\000\044\011\073\017" +
    "\122\020\111\040\072\042\101\043\113\044\120\045\102" +
    "\046\100\056\121\057\112\060\117\061\110\062\077\063" +
    "\114\102\303\104\115\001\002\000\004\104\273\001\002" +
    "\000\004\102\270\001\002\000\004\104\063\001\002\000" +
    "\006\102\uffd5\103\266\001\002\000\004\102\265\001\002" +
    "\000\006\102\uffd7\103\263\001\002\000\042\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\016\uffe7\065\uffe7\066\uffe7" +
    "\067\uffe7\070\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\101" +
    "\uffe7\104\uffe7\001\002\000\006\102\uffd6\103\257\001\002" +
    "\000\012\013\065\041\064\102\uffd0\103\uffd0\001\002\000" +
    "\042\011\073\017\122\020\111\040\072\042\101\043\113" +
    "\044\120\045\102\046\100\056\254\057\112\060\253\061" +
    "\110\062\077\063\114\104\115\001\002\000\042\011\073" +
    "\017\122\020\111\040\072\042\101\043\113\044\120\045" +
    "\102\046\100\056\121\057\112\060\117\061\110\062\077" +
    "\063\114\104\115\001\002\000\012\013\065\041\067\102" +
    "\uffcd\103\uffcd\001\002\000\044\011\073\015\225\017\122" +
    "\020\111\040\072\042\101\043\113\044\120\045\102\046" +
    "\100\056\121\057\112\060\117\061\110\062\077\063\114" +
    "\104\115\001\002\000\010\041\071\102\uffca\103\uffca\001" +
    "\002\000\044\011\073\015\076\017\122\020\111\040\072" +
    "\042\101\043\113\044\120\045\102\046\100\056\121\057" +
    "\112\060\117\061\110\062\077\063\114\104\115\001\002" +
    "\000\022\011\243\056\121\057\112\060\117\061\110\062" +
    "\077\063\114\104\115\001\002\000\042\011\073\017\122" +
    "\020\111\040\072\042\101\043\113\044\120\045\102\046" +
    "\100\056\121\057\112\060\117\061\110\062\077\063\114" +
    "\104\115\001\002\000\044\017\146\020\136\021\140\022" +
    "\131\023\144\024\133\025\135\030\134\031\145\032\137" +
    "\033\147\034\141\035\142\036\143\037\132\102\uffcc\103" +
    "\uffcc\001\002\000\006\102\uffcb\103\uffcb\001\002\000\004" +
    "\015\225\001\002\000\054\012\uff42\014\uff42\016\uff42\017" +
    "\uff42\020\uff42\021\uff42\022\uff42\023\uff42\024\uff42\025\uff42" +
    "\030\uff42\031\uff42\032\uff42\033\uff42\034\uff42\035\uff42\036" +
    "\uff42\037\uff42\055\uff42\102\uff42\103\uff42\001\002\000\004" +
    "\011\216\001\002\000\004\011\166\001\002\000\004\011" +
    "\216\001\002\000\004\054\211\001\002\000\054\012\uff46" +
    "\014\uff46\016\uff46\017\uff46\020\uff46\021\uff46\022\uff46\023" +
    "\uff46\024\uff46\025\uff46\030\uff46\031\uff46\032\uff46\033\uff46" +
    "\034\uff46\035\uff46\036\uff46\037\uff46\055\uff46\102\uff46\103" +
    "\uff46\001\002\000\054\012\uff92\014\uff92\016\uff92\017\uff92" +
    "\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92\030" +
    "\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92" +
    "\037\uff92\055\uff92\102\uff92\103\uff92\001\002\000\054\012" +
    "\uffa9\014\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\025\uffa9\030\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\055\uffa9\102\uffa9" +
    "\103\uffa9\001\002\000\054\012\uff91\014\uff91\016\uff91\017" +
    "\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91" +
    "\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036" +
    "\uff91\037\uff91\055\uff91\102\uff91\103\uff91\001\002\000\054" +
    "\012\uff37\014\uff37\016\uff37\017\uff37\020\uff37\021\uff37\022" +
    "\uff37\023\uff37\024\uff37\025\uff37\030\uff37\031\uff37\032\uff37" +
    "\033\uff37\034\uff37\035\uff37\036\uff37\037\uff37\055\uff37\102" +
    "\uff37\103\uff37\001\002\000\022\011\206\056\121\057\112" +
    "\060\117\061\110\062\077\063\114\104\115\001\002\000" +
    "\054\012\uff39\014\uff39\016\uff39\017\uff39\020\uff39\021\uff39" +
    "\022\uff39\023\uff39\024\uff39\025\uff39\030\uff39\031\uff39\032" +
    "\uff39\033\uff39\034\uff39\035\uff39\036\uff39\037\uff39\055\uff39" +
    "\102\uff39\103\uff39\001\002\000\004\011\166\001\002\000" +
    "\054\012\uff3b\014\uff3b\016\uff3b\017\uff3b\020\uff3b\021\uff3b" +
    "\022\uff3b\023\uff3b\024\uff3b\025\uff3b\030\uff3b\031\uff3b\032" +
    "\uff3b\033\uff3b\034\uff3b\035\uff3b\036\uff3b\037\uff3b\055\uff3b" +
    "\102\uff3b\103\uff3b\001\002\000\060\011\174\012\uff43\013" +
    "\065\014\uff43\016\uff43\017\uff43\020\uff43\021\uff43\022\uff43" +
    "\023\uff43\024\uff43\025\uff43\030\uff43\031\uff43\032\uff43\033" +
    "\uff43\034\uff43\035\uff43\036\uff43\037\uff43\055\uff43\102\uff43" +
    "\103\uff43\001\002\000\054\012\uff3c\014\uff3c\016\uff3c\017" +
    "\uff3c\020\uff3c\021\uff3c\022\uff3c\023\uff3c\024\uff3c\025\uff3c" +
    "\030\uff3c\031\uff3c\032\uff3c\033\uff3c\034\uff3c\035\uff3c\036" +
    "\uff3c\037\uff3c\055\uff3c\102\uff3c\103\uff3c\001\002\000\054" +
    "\012\uff38\014\uff38\016\uff38\017\uff38\020\uff38\021\uff38\022" +
    "\uff38\023\uff38\024\uff38\025\uff38\030\uff38\031\uff38\032\uff38" +
    "\033\uff38\034\uff38\035\uff38\036\uff38\037\uff38\055\uff38\102" +
    "\uff38\103\uff38\001\002\000\004\011\166\001\002\000\054" +
    "\012\uff3a\014\uff3a\016\uff3a\017\uff3a\020\uff3a\021\uff3a\022" +
    "\uff3a\023\uff3a\024\uff3a\025\uff3a\030\uff3a\031\uff3a\032\uff3a" +
    "\033\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a\055\uff3a\102" +
    "\uff3a\103\uff3a\001\002\000\022\011\125\056\121\057\112" +
    "\060\117\061\110\062\077\063\114\104\115\001\002\000" +
    "\054\012\uffa8\014\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\024\uffa8\025\uffa8\030\uffa8\031\uffa8\032" +
    "\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\055\uffa8" +
    "\102\uffa8\103\uffa8\001\002\000\054\012\uff96\014\uff96\016" +
    "\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96" +
    "\025\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035" +
    "\uff96\036\uff96\037\uff96\055\uff96\102\uff96\103\uff96\001\002" +
    "\000\042\011\073\017\122\020\111\040\072\042\101\043" +
    "\113\044\120\045\102\046\100\056\121\057\112\060\117" +
    "\061\110\062\077\063\114\104\115\001\002\000\040\017" +
    "\146\020\136\021\140\022\131\023\144\024\133\025\135" +
    "\030\134\031\145\032\137\033\147\034\141\035\142\036" +
    "\143\037\132\001\002\000\042\012\130\017\uffa8\020\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\001\002\000\054\012\uff95\014\uff95\016\uff95\017\uff95\020" +
    "\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\030\uff95" +
    "\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037" +
    "\uff95\055\uff95\102\uff95\103\uff95\001\002\000\042\011\073" +
    "\017\122\020\111\040\072\042\101\043\113\044\120\045" +
    "\102\046\100\056\121\057\112\060\117\061\110\062\077" +
    "\063\114\104\115\001\002\000\042\011\073\017\122\020" +
    "\111\040\072\042\101\043\113\044\120\045\102\046\100" +
    "\056\121\057\112\060\117\061\110\062\077\063\114\104" +
    "\115\001\002\000\054\012\uff99\014\uff99\016\uff99\017\uff99" +
    "\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\030" +
    "\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99" +
    "\037\uff99\055\uff99\102\uff99\103\uff99\001\002\000\042\011" +
    "\073\017\122\020\111\040\072\042\101\043\113\044\120" +
    "\045\102\046\100\056\121\057\112\060\117\061\110\062" +
    "\077\063\114\104\115\001\002\000\054\012\uff9a\014\uff9a" +
    "\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024" +
    "\uff9a\025\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a" +
    "\035\uff9a\036\uff9a\037\uff9a\055\uff9a\102\uff9a\103\uff9a\001" +
    "\002\000\042\011\073\017\122\020\111\040\072\042\101" +
    "\043\113\044\120\045\102\046\100\056\121\057\112\060" +
    "\117\061\110\062\077\063\114\104\115\001\002\000\042" +
    "\011\073\017\122\020\111\040\072\042\101\043\113\044" +
    "\120\045\102\046\100\056\121\057\112\060\117\061\110" +
    "\062\077\063\114\104\115\001\002\000\042\011\073\017" +
    "\122\020\111\040\072\042\101\043\113\044\120\045\102" +
    "\046\100\056\121\057\112\060\117\061\110\062\077\063" +
    "\114\104\115\001\002\000\042\011\073\017\122\020\111" +
    "\040\072\042\101\043\113\044\120\045\102\046\100\056" +
    "\121\057\112\060\117\061\110\062\077\063\114\104\115" +
    "\001\002\000\042\011\073\017\122\020\111\040\072\042" +
    "\101\043\113\044\120\045\102\046\100\056\121\057\112" +
    "\060\117\061\110\062\077\063\114\104\115\001\002\000" +
    "\042\011\073\017\122\020\111\040\072\042\101\043\113" +
    "\044\120\045\102\046\100\056\121\057\112\060\117\061" +
    "\110\062\077\063\114\104\115\001\002\000\042\011\073" +
    "\017\122\020\111\040\072\042\101\043\113\044\120\045" +
    "\102\046\100\056\121\057\112\060\117\061\110\062\077" +
    "\063\114\104\115\001\002\000\042\011\073\017\122\020" +
    "\111\040\072\042\101\043\113\044\120\045\102\046\100" +
    "\056\121\057\112\060\117\061\110\062\077\063\114\104" +
    "\115\001\002\000\042\011\073\017\122\020\111\040\072" +
    "\042\101\043\113\044\120\045\102\046\100\056\121\057" +
    "\112\060\117\061\110\062\077\063\114\104\115\001\002" +
    "\000\042\011\073\017\122\020\111\040\072\042\101\043" +
    "\113\044\120\045\102\046\100\056\121\057\112\060\117" +
    "\061\110\062\077\063\114\104\115\001\002\000\054\012" +
    "\uffa1\014\uffa1\016\uffa1\017\146\020\136\021\140\022\131" +
    "\023\144\024\133\025\135\030\uffa1\031\uffa1\032\uffa1\033" +
    "\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\055\uffa1\102\uffa1" +
    "\103\uffa1\001\002\000\054\012\uffa5\014\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\021\140\022\131\023\144\024\133\025\135" +
    "\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036" +
    "\uffa5\037\uffa5\055\uffa5\102\uffa5\103\uffa5\001\002\000\054" +
    "\012\uffa7\014\uffa7\016\uffa7\017\146\020\136\021\140\022" +
    "\131\023\144\024\133\025\135\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\055\uffa7\102" +
    "\uffa7\103\uffa7\001\002\000\054\012\uff9d\014\uff9d\016\uff9d" +
    "\017\uff9d\020\uff9d\021\140\022\131\023\uff9d\024\133\025" +
    "\135\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\055\uff9d\102\uff9d\103\uff9d\001\002\000" +
    "\054\012\uff9b\014\uff9b\016\uff9b\017\146\020\136\021\140" +
    "\022\131\023\144\024\133\025\135\030\134\031\145\032" +
    "\137\033\147\034\141\035\142\036\uff9b\037\uff9b\055\uff9b" +
    "\102\uff9b\103\uff9b\001\002\000\054\012\uffa0\014\uffa0\016" +
    "\uffa0\017\146\020\136\021\140\022\131\023\144\024\133" +
    "\025\135\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035" +
    "\uffa0\036\uffa0\037\uffa0\055\uffa0\102\uffa0\103\uffa0\001\002" +
    "\000\054\012\uff9e\014\uff9e\016\uff9e\017\146\020\136\021" +
    "\140\022\131\023\144\024\133\025\135\030\uff9e\031\uff9e" +
    "\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\055" +
    "\uff9e\102\uff9e\103\uff9e\001\002\000\054\012\uffa3\014\uffa3" +
    "\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\133\025\135\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\037\uffa3\055\uffa3\102\uffa3\103\uffa3\001" +
    "\002\000\054\012\uff9f\014\uff9f\016\uff9f\017\146\020\136" +
    "\021\140\022\131\023\144\024\133\025\135\030\uff9f\031" +
    "\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f" +
    "\055\uff9f\102\uff9f\103\uff9f\001\002\000\054\012\uffa4\014" +
    "\uffa4\016\uffa4\017\uffa4\020\uffa4\021\140\022\131\023\144" +
    "\024\133\025\135\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\055\uffa4\102\uffa4\103\uffa4" +
    "\001\002\000\054\012\uffa6\014\uffa6\016\uffa6\017\146\020" +
    "\136\021\140\022\131\023\144\024\133\025\135\030\uffa6" +
    "\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\055\uffa6\102\uffa6\103\uffa6\001\002\000\054\012\uff9c" +
    "\014\uff9c\016\uff9c\017\146\020\136\021\140\022\131\023" +
    "\144\024\133\025\135\030\134\031\145\032\137\033\147" +
    "\034\141\035\142\036\uff9c\037\uff9c\055\uff9c\102\uff9c\103" +
    "\uff9c\001\002\000\054\012\uffa2\014\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\133\025\135\030" +
    "\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\055\uffa2\102\uffa2\103\uffa2\001\002\000\054\012" +
    "\uff50\014\uff50\016\uff50\017\uff50\020\uff50\021\uff50\022\uff50" +
    "\023\uff50\024\uff50\025\uff50\030\uff50\031\uff50\032\uff50\033" +
    "\uff50\034\uff50\035\uff50\036\uff50\037\uff50\055\uff50\102\uff50" +
    "\103\uff50\001\002\000\042\011\073\017\122\020\111\040" +
    "\072\042\101\043\113\044\120\045\102\046\100\056\121" +
    "\057\112\060\117\061\110\062\077\063\114\104\115\001" +
    "\002\000\042\017\146\020\136\021\140\022\131\023\144" +
    "\024\133\025\135\030\134\031\145\032\137\033\147\034" +
    "\141\035\142\036\143\037\132\103\170\001\002\000\042" +
    "\011\073\017\122\020\111\040\072\042\101\043\113\044" +
    "\120\045\102\046\100\056\121\057\112\060\117\061\110" +
    "\062\077\063\114\104\115\001\002\000\042\012\172\017" +
    "\146\020\136\021\140\022\131\023\144\024\133\025\135" +
    "\030\134\031\145\032\137\033\147\034\141\035\142\036" +
    "\143\037\132\001\002\000\054\012\uff60\014\uff60\016\uff60" +
    "\017\uff60\020\uff60\021\uff60\022\uff60\023\uff60\024\uff60\025" +
    "\uff60\030\uff60\031\uff60\032\uff60\033\uff60\034\uff60\035\uff60" +
    "\036\uff60\037\uff60\055\uff60\102\uff60\103\uff60\001\002\000" +
    "\056\012\uff44\013\065\014\uff44\016\uff44\017\uff44\020\uff44" +
    "\021\uff44\022\uff44\023\uff44\024\uff44\025\uff44\030\uff44\031" +
    "\uff44\032\uff44\033\uff44\034\uff44\035\uff44\036\uff44\037\uff44" +
    "\055\uff44\102\uff44\103\uff44\001\002\000\044\011\073\012" +
    "\176\017\122\020\111\040\072\042\101\043\113\044\120" +
    "\045\102\046\100\056\121\057\112\060\117\061\110\062" +
    "\077\063\114\104\115\001\002\000\044\012\uff8e\017\146" +
    "\020\136\021\140\022\131\023\144\024\133\025\135\030" +
    "\134\031\145\032\137\033\147\034\141\035\142\036\143" +
    "\037\132\103\201\001\002\000\054\012\uff54\014\uff54\016" +
    "\uff54\017\uff54\020\uff54\021\uff54\022\uff54\023\uff54\024\uff54" +
    "\025\uff54\030\uff54\031\uff54\032\uff54\033\uff54\034\uff54\035" +
    "\uff54\036\uff54\037\uff54\055\uff54\102\uff54\103\uff54\001\002" +
    "\000\004\012\200\001\002\000\054\012\uff53\014\uff53\016" +
    "\uff53\017\uff53\020\uff53\021\uff53\022\uff53\023\uff53\024\uff53" +
    "\025\uff53\030\uff53\031\uff53\032\uff53\033\uff53\034\uff53\035" +
    "\uff53\036\uff53\037\uff53\055\uff53\102\uff53\103\uff53\001\002" +
    "\000\042\011\073\017\122\020\111\040\072\042\101\043" +
    "\113\044\120\045\102\046\100\056\121\057\112\060\117" +
    "\061\110\062\077\063\114\104\115\001\002\000\004\012" +
    "\uff8d\001\002\000\054\012\uff45\014\uff45\016\uff45\017\uff45" +
    "\020\uff45\021\uff45\022\uff45\023\uff45\024\uff45\025\uff45\030" +
    "\uff45\031\uff45\032\uff45\033\uff45\034\uff45\035\uff45\036\uff45" +
    "\037\uff45\055\uff45\102\uff45\103\uff45\001\002\000\054\012" +
    "\uff51\014\uff51\016\uff51\017\uff51\020\uff51\021\uff51\022\uff51" +
    "\023\uff51\024\uff51\025\uff51\030\uff51\031\uff51\032\uff51\033" +
    "\uff51\034\uff51\035\uff51\036\uff51\037\uff51\055\uff51\102\uff51" +
    "\103\uff51\001\002\000\054\012\uff94\014\uff94\016\uff94\017" +
    "\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94" +
    "\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036" +
    "\uff94\037\uff94\055\uff94\102\uff94\103\uff94\001\002\000\042" +
    "\011\073\017\122\020\111\040\072\042\101\043\113\044" +
    "\120\045\102\046\100\056\121\057\112\060\117\061\110" +
    "\062\077\063\114\104\115\001\002\000\042\012\210\017" +
    "\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8" +
    "\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036" +
    "\uffa8\037\uffa8\001\002\000\054\012\uff93\014\uff93\016\uff93" +
    "\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025" +
    "\uff93\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93" +
    "\036\uff93\037\uff93\055\uff93\102\uff93\103\uff93\001\002\000" +
    "\042\011\073\017\122\020\111\040\072\042\101\043\113" +
    "\044\120\045\102\046\100\056\121\057\112\060\117\061" +
    "\110\062\077\063\114\104\115\001\002\000\042\017\146" +
    "\020\136\021\140\022\131\023\144\024\133\025\135\030" +
    "\134\031\145\032\137\033\147\034\141\035\142\036\143" +
    "\037\132\055\213\001\002\000\042\011\073\017\122\020" +
    "\111\040\072\042\101\043\113\044\120\045\102\046\100" +
    "\056\121\057\112\060\117\061\110\062\077\063\114\104" +
    "\115\001\002\000\054\012\uff4d\014\uff4d\016\uff4d\017\uff4d" +
    "\020\uff4d\021\uff4d\022\uff4d\023\uff4d\024\uff4d\025\uff4d\030" +
    "\uff4d\031\uff4d\032\uff4d\033\uff4d\034\uff4d\035\uff4d\036\uff4d" +
    "\037\uff4d\055\uff4d\102\uff4d\103\uff4d\001\002\000\054\012" +
    "\uff4f\014\uff4f\016\uff4f\017\uff4f\020\uff4f\021\uff4f\022\uff4f" +
    "\023\uff4f\024\uff4f\025\uff4f\030\uff4f\031\uff4f\032\uff4f\033" +
    "\uff4f\034\uff4f\035\uff4f\036\uff4f\037\uff4f\055\uff4f\102\uff4f" +
    "\103\uff4f\001\002\000\042\011\073\017\122\020\111\040" +
    "\072\042\101\043\113\044\120\045\102\046\100\056\121" +
    "\057\112\060\117\061\110\062\077\063\114\104\115\001" +
    "\002\000\042\012\220\017\146\020\136\021\140\022\131" +
    "\023\144\024\133\025\135\030\134\031\145\032\137\033" +
    "\147\034\141\035\142\036\143\037\132\001\002\000\054" +
    "\012\uff5f\014\uff5f\016\uff5f\017\uff5f\020\uff5f\021\uff5f\022" +
    "\uff5f\023\uff5f\024\uff5f\025\uff5f\030\uff5f\031\uff5f\032\uff5f" +
    "\033\uff5f\034\uff5f\035\uff5f\036\uff5f\037\uff5f\055\uff5f\102" +
    "\uff5f\103\uff5f\001\002\000\054\012\uff52\014\uff52\016\uff52" +
    "\017\uff52\020\uff52\021\uff52\022\uff52\023\uff52\024\uff52\025" +
    "\uff52\030\uff52\031\uff52\032\uff52\033\uff52\034\uff52\035\uff52" +
    "\036\uff52\037\uff52\055\uff52\102\uff52\103\uff52\001\002\000" +
    "\054\012\uff4e\014\uff4e\016\uff4e\017\uff4e\020\uff4e\021\uff4e" +
    "\022\uff4e\023\uff4e\024\uff4e\025\uff4e\030\uff4e\031\uff4e\032" +
    "\uff4e\033\uff4e\034\uff4e\035\uff4e\036\uff4e\037\uff4e\055\uff4e" +
    "\102\uff4e\103\uff4e\001\002\000\004\016\235\001\002\000" +
    "\006\016\uff71\103\233\001\002\000\042\011\073\017\122" +
    "\020\111\040\072\042\101\043\113\044\120\045\102\046" +
    "\100\056\121\057\112\060\117\061\110\062\077\063\114" +
    "\104\115\001\002\000\044\016\uff6e\017\146\020\136\021" +
    "\140\022\131\023\144\024\133\025\135\030\134\031\145" +
    "\032\137\033\147\034\141\035\142\036\143\037\132\103" +
    "\231\001\002\000\004\016\230\001\002\000\010\016\uff6f" +
    "\102\uff6f\103\uff6f\001\002\000\042\011\073\017\122\020" +
    "\111\040\072\042\101\043\113\044\120\045\102\046\100" +
    "\056\121\057\112\060\117\061\110\062\077\063\114\104" +
    "\115\001\002\000\004\016\uff6d\001\002\000\004\015\225" +
    "\001\002\000\004\016\uff70\001\002\000\006\102\uff72\103" +
    "\uff72\001\002\000\042\012\241\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\030\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\001\002" +
    "\000\042\012\240\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\024\uffa8\025\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\034\uffa8\035\uffa8\036\uffa8\037\uffa8\001\002\000\056\012" +
    "\uff90\014\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90" +
    "\023\uff90\024\uff90\025\uff90\030\uff90\031\uff90\032\uff90\033" +
    "\uff90\034\uff90\035\uff90\036\uff90\037\uff90\054\uff87\055\uff90" +
    "\102\uff90\103\uff90\001\002\000\056\012\uff8f\014\uff8f\016" +
    "\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f" +
    "\025\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035" +
    "\uff8f\036\uff8f\037\uff8f\054\uff88\055\uff8f\102\uff8f\103\uff8f" +
    "\001\002\000\054\012\uff98\014\uff98\016\uff98\017\uff98\020" +
    "\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\030\uff98" +
    "\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037" +
    "\uff98\055\uff98\102\uff98\103\uff98\001\002\000\042\011\073" +
    "\017\122\020\111\040\072\042\101\043\113\044\120\045" +
    "\102\046\100\056\121\057\112\060\117\061\110\062\077" +
    "\063\114\104\115\001\002\000\042\012\245\017\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037" +
    "\uffa8\001\002\000\054\012\uff97\014\uff97\016\uff97\017\uff97" +
    "\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\030" +
    "\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97" +
    "\037\uff97\055\uff97\102\uff97\103\uff97\001\002\000\044\017" +
    "\146\020\136\021\140\022\131\023\144\024\133\025\135" +
    "\030\134\031\145\032\137\033\147\034\141\035\142\036" +
    "\143\037\132\102\uffcf\103\uffcf\001\002\000\006\102\uffce" +
    "\103\uffce\001\002\000\042\014\251\017\146\020\136\021" +
    "\140\022\131\023\144\024\133\025\135\030\134\031\145" +
    "\032\137\033\147\034\141\035\142\036\143\037\132\001" +
    "\002\000\072\012\uff76\013\uff76\014\uff76\016\uff76\017\uff76" +
    "\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025\uff76\030" +
    "\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035\uff76\036\uff76" +
    "\037\uff76\041\uff76\047\uff76\050\uff76\051\uff76\052\uff76\053" +
    "\uff76\055\uff76\102\uff76\103\uff76\001\002\000\044\017\146" +
    "\020\136\021\140\022\131\023\144\024\133\025\135\030" +
    "\134\031\145\032\137\033\147\034\141\035\142\036\143" +
    "\037\132\102\uffd1\103\uffd1\001\002\000\044\017\uff38\020" +
    "\uff38\021\uff38\022\uff38\023\uff38\024\uff38\025\uff38\030\uff38" +
    "\031\uff38\032\uff38\033\uff38\034\uff38\035\uff38\036\uff38\037" +
    "\uff38\102\256\103\uff38\001\002\000\044\017\uff3a\020\uff3a" +
    "\021\uff3a\022\uff3a\023\uff3a\024\uff3a\025\uff3a\030\uff3a\031" +
    "\uff3a\032\uff3a\033\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a" +
    "\102\255\103\uff3a\001\002\000\042\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\010\uffdd\016\uffdd\065\uffdd\066\uffdd\067\uffdd" +
    "\070\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd\101\uffdd\104" +
    "\uffdd\001\002\000\042\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\016\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\072" +
    "\uffdc\073\uffdc\074\uffdc\075\uffdc\101\uffdc\104\uffdc\001\002" +
    "\000\004\104\261\001\002\000\004\102\uffd3\001\002\000" +
    "\012\013\065\041\262\102\uffd0\103\uffd0\001\002\000\042" +
    "\011\073\017\122\020\111\040\072\042\101\043\113\044" +
    "\120\045\102\046\100\056\121\057\112\060\117\061\110" +
    "\062\077\063\114\104\115\001\002\000\004\104\261\001" +
    "\002\000\004\102\uffd4\001\002\000\042\004\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\016\uffdb\065\uffdb\066\uffdb\067" +
    "\uffdb\070\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\101\uffdb" +
    "\104\uffdb\001\002\000\004\104\261\001\002\000\004\102" +
    "\uffd2\001\002\000\036\016\uffaf\065\uffaf\066\uffaf\070\uffaf" +
    "\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077" +
    "\uffaf\100\uffaf\101\uffaf\104\uffaf\001\002\000\042\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\010\uffe6\016\uffe6\065\uffe6\066" +
    "\uffe6\067\uffe6\070\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6" +
    "\101\uffe6\104\uffe6\001\002\000\004\102\301\001\002\000" +
    "\012\013\065\041\274\102\uffd0\103\uffd0\001\002\000\042" +
    "\011\073\017\122\020\111\040\072\042\101\043\113\044" +
    "\120\045\102\046\100\056\121\057\276\060\117\061\275" +
    "\062\077\063\114\104\115\001\002\000\044\017\uff37\020" +
    "\uff37\021\uff37\022\uff37\023\uff37\024\uff37\025\uff37\030\uff37" +
    "\031\uff37\032\uff37\033\uff37\034\uff37\035\uff37\036\uff37\037" +
    "\uff37\102\300\103\uff37\001\002\000\044\017\uff39\020\uff39" +
    "\021\uff39\022\uff39\023\uff39\024\uff39\025\uff39\030\uff39\031" +
    "\uff39\032\uff39\033\uff39\034\uff39\035\uff39\036\uff39\037\uff39" +
    "\102\277\103\uff39\001\002\000\042\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\016\uffda\065\uffda\066\uffda\067\uffda" +
    "\070\uffda\072\uffda\073\uffda\074\uffda\075\uffda\101\uffda\104" +
    "\uffda\001\002\000\042\004\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\010\uffd9\016\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\072" +
    "\uffd9\073\uffd9\074\uffd9\075\uffd9\101\uffd9\104\uffd9\001\002" +
    "\000\042\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\016" +
    "\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\072\uffd8\073\uffd8" +
    "\074\uffd8\075\uffd8\101\uffd8\104\uffd8\001\002\000\042\017" +
    "\146\020\136\021\140\022\131\023\144\024\133\025\135" +
    "\030\134\031\145\032\137\033\147\034\141\035\142\036" +
    "\143\037\132\102\304\001\002\000\036\016\uffad\065\uffad" +
    "\066\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075" +
    "\uffad\076\uffad\077\uffad\100\uffad\101\uffad\104\uffad\001\002" +
    "\000\036\016\uffae\065\uffae\066\uffae\070\uffae\071\uffae\072" +
    "\uffae\073\uffae\074\uffae\075\uffae\076\uffae\077\uffae\100\uffae" +
    "\101\uffae\104\uffae\001\002\000\046\002\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\016\uffbe\065\uffbe\066\uffbe\070\uffbe\071\uffbe" +
    "\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100" +
    "\uffbe\101\uffbe\104\uffbe\001\002\000\042\011\073\017\122" +
    "\020\111\040\072\042\101\043\113\044\120\045\102\046" +
    "\100\056\121\057\112\060\117\061\110\062\077\063\114" +
    "\104\115\001\002\000\042\011\uff4b\017\uff4b\020\uff4b\040" +
    "\uff4b\042\uff4b\043\uff4b\044\uff4b\045\uff4b\046\uff4b\056\uff4b" +
    "\057\uff4b\060\uff4b\061\uff4b\062\uff4b\063\uff4b\104\uff4b\001" +
    "\002\000\006\012\uffab\102\uffab\001\002\000\006\012\uffac" +
    "\102\uffac\001\002\000\020\013\065\041\324\047\314\050" +
    "\316\051\307\052\315\053\313\001\002\000\042\011\uff47" +
    "\017\uff47\020\uff47\040\uff47\042\uff47\043\uff47\044\uff47\045" +
    "\uff47\046\uff47\056\uff47\057\uff47\060\uff47\061\uff47\062\uff47" +
    "\063\uff47\104\uff47\001\002\000\042\011\uff49\017\uff49\020" +
    "\uff49\040\uff49\042\uff49\043\uff49\044\uff49\045\uff49\046\uff49" +
    "\056\uff49\057\uff49\060\uff49\061\uff49\062\uff49\063\uff49\104" +
    "\uff49\001\002\000\042\011\uff4c\017\uff4c\020\uff4c\040\uff4c" +
    "\042\uff4c\043\uff4c\044\uff4c\045\uff4c\046\uff4c\056\uff4c\057" +
    "\uff4c\060\uff4c\061\uff4c\062\uff4c\063\uff4c\104\uff4c\001\002" +
    "\000\042\011\uff4a\017\uff4a\020\uff4a\040\uff4a\042\uff4a\043" +
    "\uff4a\044\uff4a\045\uff4a\046\uff4a\056\uff4a\057\uff4a\060\uff4a" +
    "\061\uff4a\062\uff4a\063\uff4a\104\uff4a\001\002\000\044\011" +
    "\uff48\017\uff48\020\uff48\040\uff48\042\uff48\043\uff48\044\uff48" +
    "\045\uff48\046\uff48\056\uff48\057\uff48\060\uff48\061\uff48\062" +
    "\uff48\063\uff48\064\320\104\uff48\001\002\000\004\102\321" +
    "\001\002\000\036\016\uff8c\065\uff8c\066\uff8c\070\uff8c\071" +
    "\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c" +
    "\100\uff8c\101\uff8c\104\uff8c\001\002\000\042\011\073\017" +
    "\122\020\111\040\072\042\101\043\113\044\120\045\102" +
    "\046\100\056\121\057\112\060\117\061\110\062\077\063" +
    "\114\104\115\001\002\000\016\041\324\047\314\050\316" +
    "\051\307\052\315\053\313\001\002\000\042\011\uff48\017" +
    "\uff48\020\uff48\040\uff48\042\uff48\043\uff48\044\uff48\045\uff48" +
    "\046\uff48\056\uff48\057\uff48\060\uff48\061\uff48\062\uff48\063" +
    "\uff48\104\uff48\001\002\000\042\011\073\017\122\020\111" +
    "\040\072\042\101\043\113\044\120\045\102\046\100\056" +
    "\121\057\112\060\117\061\110\062\077\063\114\104\115" +
    "\001\002\000\042\017\146\020\136\021\140\022\131\023" +
    "\144\024\133\025\135\030\134\031\145\032\137\033\147" +
    "\034\141\035\142\036\143\037\132\102\327\001\002\000" +
    "\036\016\uff89\065\uff89\066\uff89\070\uff89\071\uff89\072\uff89" +
    "\073\uff89\074\uff89\075\uff89\076\uff89\077\uff89\100\uff89\101" +
    "\uff89\104\uff89\001\002\000\042\017\146\020\136\021\140" +
    "\022\131\023\144\024\133\025\135\030\134\031\145\032" +
    "\137\033\147\034\141\035\142\036\143\037\132\102\331" +
    "\001\002\000\036\016\uff8a\065\uff8a\066\uff8a\070\uff8a\071" +
    "\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\077\uff8a" +
    "\100\uff8a\101\uff8a\104\uff8a\001\002\000\042\017\146\020" +
    "\136\021\140\022\131\023\144\024\133\025\135\030\134" +
    "\031\145\032\137\033\147\034\141\035\142\036\143\037" +
    "\132\102\uffaa\001\002\000\036\016\uff8b\065\uff8b\066\uff8b" +
    "\070\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076" +
    "\uff8b\077\uff8b\100\uff8b\101\uff8b\104\uff8b\001\002\000\026" +
    "\015\023\065\033\066\025\070\041\072\042\073\036\074" +
    "\037\075\024\101\052\104\046\001\002\000\042\011\073" +
    "\017\122\020\111\040\072\042\101\043\113\044\120\045" +
    "\102\046\100\056\121\057\112\060\117\061\110\062\077" +
    "\063\114\104\115\001\002\000\042\012\341\017\uffa9\020" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037" +
    "\uffa9\001\002\000\042\012\340\017\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\024\uffa8\025\uffa8\030\uffa8\031\uffa8\032" +
    "\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\001\002" +
    "\000\030\015\uff87\065\uff87\066\uff87\070\uff87\072\uff87\073" +
    "\uff87\074\uff87\075\uff87\101\uff87\102\uff87\104\uff87\001\002" +
    "\000\030\015\uff88\065\uff88\066\uff88\070\uff88\072\uff88\073" +
    "\uff88\074\uff88\075\uff88\101\uff88\102\uff88\104\uff88\001\002" +
    "\000\036\016\uff83\065\uff83\066\uff83\070\uff83\071\uff83\072" +
    "\uff83\073\uff83\074\uff83\075\uff83\076\uff83\077\uff83\100\uff83" +
    "\101\uff83\104\uff83\001\002\000\036\016\uff84\065\uff84\066" +
    "\uff84\070\uff84\071\uff84\072\uff84\073\uff84\074\uff84\075\uff84" +
    "\076\uff84\077\uff84\100\uff84\101\uff84\104\uff84\001\002\000" +
    "\026\015\023\065\033\066\025\070\041\072\042\073\036" +
    "\074\037\075\024\101\052\104\046\001\002\000\036\016" +
    "\uff7e\065\uff7e\066\uff7e\070\uff7e\071\352\072\uff7e\073\uff7e" +
    "\074\uff7e\075\uff7e\076\uff7e\077\uff7e\100\uff7e\101\uff7e\104" +
    "\uff7e\001\002\000\036\016\uff80\065\uff80\066\uff80\070\uff80" +
    "\071\347\072\uff80\073\uff80\074\uff80\075\uff80\076\uff80\077" +
    "\uff80\100\uff80\101\uff80\104\uff80\001\002\000\026\015\023" +
    "\065\033\066\025\070\041\072\042\073\036\074\037\075" +
    "\024\101\052\104\046\001\002\000\036\016\uff7d\065\uff7d" +
    "\066\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d\075" +
    "\uff7d\076\uff7d\077\uff7d\100\uff7d\101\uff7d\104\uff7d\001\002" +
    "\000\036\016\uff7f\065\uff7f\066\uff7f\070\uff7f\071\uff7f\072" +
    "\uff7f\073\uff7f\074\uff7f\075\uff7f\076\uff7f\077\uff7f\100\uff7f" +
    "\101\uff7f\104\uff7f\001\002\000\026\015\023\065\033\066" +
    "\025\070\041\072\042\073\036\074\037\075\024\101\052" +
    "\104\046\001\002\000\036\016\uff7b\065\uff7b\066\uff7b\070" +
    "\uff7b\071\uff7b\072\uff7b\073\uff7b\074\uff7b\075\uff7b\076\uff7b" +
    "\077\uff7b\100\uff7b\101\uff7b\104\uff7b\001\002\000\036\016" +
    "\uff7c\065\uff7c\066\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c" +
    "\074\uff7c\075\uff7c\076\uff7c\077\uff7c\100\uff7c\101\uff7c\104" +
    "\uff7c\001\002\000\026\015\023\065\033\066\025\070\041" +
    "\072\042\073\036\074\037\075\024\101\052\104\046\001" +
    "\002\000\006\006\357\104\361\001\002\000\004\104\374" +
    "\001\002\000\004\102\364\001\002\000\004\041\362\001" +
    "\002\000\042\011\073\017\122\020\111\040\072\042\101" +
    "\043\113\044\120\045\102\046\100\056\121\057\112\060" +
    "\117\061\110\062\077\063\114\104\115\001\002\000\042" +
    "\017\146\020\136\021\140\022\131\023\144\024\133\025" +
    "\135\030\134\031\145\032\137\033\147\034\141\035\142" +
    "\036\143\037\132\102\uff75\001\002\000\042\011\073\017" +
    "\122\020\111\040\072\042\101\043\113\044\120\045\102" +
    "\046\100\056\121\057\112\060\117\061\110\062\077\063" +
    "\114\104\115\001\002\000\042\017\146\020\136\021\140" +
    "\022\131\023\144\024\133\025\135\030\134\031\145\032" +
    "\137\033\147\034\141\035\142\036\143\037\132\102\366" +
    "\001\002\000\004\104\370\001\002\000\004\012\373\001" +
    "\002\000\022\026\310\027\311\041\324\047\314\050\316" +
    "\051\307\052\315\053\313\001\002\000\042\011\073\017" +
    "\122\020\111\040\072\042\101\043\113\044\120\045\102" +
    "\046\100\056\121\057\112\060\117\061\110\062\077\063" +
    "\114\104\115\001\002\000\042\012\uffaa\017\146\020\136" +
    "\021\140\022\131\023\144\024\133\025\135\030\134\031" +
    "\145\032\137\033\147\034\141\035\142\036\143\037\132" +
    "\001\002\000\026\015\uff7a\065\uff7a\066\uff7a\070\uff7a\072" +
    "\uff7a\073\uff7a\074\uff7a\075\uff7a\101\uff7a\104\uff7a\001\002" +
    "\000\004\041\375\001\002\000\042\011\073\017\122\020" +
    "\111\040\072\042\101\043\113\044\120\045\102\046\100" +
    "\056\121\057\112\060\117\061\110\062\077\063\114\104" +
    "\115\001\002\000\042\017\146\020\136\021\140\022\131" +
    "\023\144\024\133\025\135\030\134\031\145\032\137\033" +
    "\147\034\141\035\142\036\143\037\132\102\uff74\001\002" +
    "\000\036\016\uff81\065\uff81\066\uff81\070\uff81\071\uff81\072" +
    "\uff81\073\uff81\074\uff81\075\uff81\076\uff81\077\uff81\100\uff81" +
    "\101\uff81\104\uff81\001\002\000\036\016\uff82\065\uff82\066" +
    "\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075\uff82" +
    "\076\uff82\077\uff82\100\uff82\101\uff82\104\uff82\001\002\000" +
    "\004\072\u0106\001\002\000\004\072\u0103\001\002\000\004" +
    "\011\335\001\002\000\004\102\u0105\001\002\000\036\016" +
    "\uff86\065\uff86\066\uff86\070\uff86\071\uff86\072\uff86\073\uff86" +
    "\074\uff86\075\uff86\076\uff86\077\uff86\100\uff86\101\uff86\104" +
    "\uff86\001\002\000\004\011\335\001\002\000\004\102\u0108" +
    "\001\002\000\036\016\uff85\065\uff85\066\uff85\070\uff85\071" +
    "\uff85\072\uff85\073\uff85\074\uff85\075\uff85\076\uff85\077\uff85" +
    "\100\uff85\101\uff85\104\uff85\001\002\000\036\016\uffb2\065" +
    "\uffb2\066\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2" +
    "\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\104\uffb2\001" +
    "\002\000\004\104\u010b\001\002\000\004\012\u010c\001\002" +
    "\000\004\102\u010d\001\002\000\036\016\uff73\065\uff73\066" +
    "\uff73\070\uff73\071\uff73\072\uff73\073\uff73\074\uff73\075\uff73" +
    "\076\uff73\077\uff73\100\uff73\101\uff73\104\uff73\001\002\000" +
    "\026\016\uff68\065\uff68\066\uff68\070\uff68\072\uff68\073\uff68" +
    "\074\uff68\075\uff68\101\uff68\104\uff68\001\002\000\012\016" +
    "\uffba\076\uffba\077\uffba\100\uffba\001\002\000\004\016\u0112" +
    "\001\002\000\046\002\uffbc\005\uffbc\006\uffbc\007\uffbc\016" +
    "\uffbc\065\uffbc\066\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc" +
    "\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\104" +
    "\uffbc\001\002\000\046\002\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\016\uffbd\065\uffbd\066\uffbd\070\uffbd\071\uffbd\072\uffbd\073" +
    "\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd" +
    "\104\uffbd\001\002\000\046\011\073\012\u0116\017\122\020" +
    "\111\040\072\042\101\043\113\044\120\045\102\046\100" +
    "\056\121\057\112\060\117\061\110\062\077\063\114\064" +
    "\u0114\104\115\001\002\000\004\012\u011a\001\002\000\042" +
    "\012\u0118\017\146\020\136\021\140\022\131\023\144\024" +
    "\133\025\135\030\134\031\145\032\137\033\147\034\141" +
    "\035\142\036\143\037\132\001\002\000\004\102\u0117\001" +
    "\002\000\036\016\uff77\065\uff77\066\uff77\070\uff77\071\uff77" +
    "\072\uff77\073\uff77\074\uff77\075\uff77\076\uff77\077\uff77\100" +
    "\uff77\101\uff77\104\uff77\001\002\000\004\102\u0119\001\002" +
    "\000\036\016\uff79\065\uff79\066\uff79\070\uff79\071\uff79\072" +
    "\uff79\073\uff79\074\uff79\075\uff79\076\uff79\077\uff79\100\uff79" +
    "\101\uff79\104\uff79\001\002\000\004\102\u011b\001\002\000" +
    "\036\016\uff78\065\uff78\066\uff78\070\uff78\071\uff78\072\uff78" +
    "\073\uff78\074\uff78\075\uff78\076\uff78\077\uff78\100\uff78\101" +
    "\uff78\104\uff78\001\002\000\004\015\u011d\001\002\000\004" +
    "\077\u0120\001\002\000\006\016\u012a\100\u0129\001\002\000" +
    "\010\016\uff5b\077\u0120\100\uff5b\001\002\000\004\062\u0121" +
    "\001\002\000\004\055\u0122\001\002\000\034\016\uff57\065" +
    "\033\066\025\070\041\072\042\073\036\074\037\075\024" +
    "\076\u0123\077\uff57\100\uff57\101\052\104\046\001\002\000" +
    "\004\102\u0127\001\002\000\012\016\uff58\076\u0125\077\uff58" +
    "\100\uff58\001\002\000\004\102\u0126\001\002\000\010\016" +
    "\uff5a\077\uff5a\100\uff5a\001\002\000\010\016\uff59\077\uff59" +
    "\100\uff59\001\002\000\006\016\uff5c\100\uff5c\001\002\000" +
    "\004\055\u012d\001\002\000\036\016\uff5d\065\uff5d\066\uff5d" +
    "\070\uff5d\071\uff5d\072\uff5d\073\uff5d\074\uff5d\075\uff5d\076" +
    "\uff5d\077\uff5d\100\uff5d\101\uff5d\104\uff5d\001\002\000\004" +
    "\016\u012c\001\002\000\036\016\uff5e\065\uff5e\066\uff5e\070" +
    "\uff5e\071\uff5e\072\uff5e\073\uff5e\074\uff5e\075\uff5e\076\uff5e" +
    "\077\uff5e\100\uff5e\101\uff5e\104\uff5e\001\002\000\026\065" +
    "\033\066\025\070\041\072\042\073\036\074\037\075\024" +
    "\076\u012e\101\052\104\046\001\002\000\004\102\u0132\001" +
    "\002\000\004\076\u0130\001\002\000\004\102\u0131\001\002" +
    "\000\004\016\uff56\001\002\000\004\016\uff55\001\002\000" +
    "\006\102\uffc7\103\u0139\001\002\000\004\102\u0138\001\002" +
    "\000\010\041\u0136\102\uffc8\103\uffc8\001\002\000\004\064" +
    "\u0137\001\002\000\006\102\uffc9\103\uffc9\001\002\000\042" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\016\uffe5\065" +
    "\uffe5\066\uffe5\067\uffe5\070\uffe5\072\uffe5\073\uffe5\074\uffe5" +
    "\075\uffe5\101\uffe5\104\uffe5\001\002\000\004\104\u0135\001" +
    "\002\000\004\102\uffc6\001\002\000\004\067\ufff7\001\002" +
    "\000\012\002\000\005\u0143\006\u0141\007\u013e\001\002\000" +
    "\004\104\uff6a\001\002\000\012\012\uff35\013\uff35\103\uff35" +
    "\104\uff35\001\002\000\004\002\uffff\001\002\000\004\015" +
    "\023\001\002\000\012\012\uff36\013\uff36\103\uff36\104\uff36" +
    "\001\002\000\004\104\u0146\001\002\000\004\104\uff69\001" +
    "\002\000\012\002\uffe8\005\u0143\006\u0141\007\u013e\001\002" +
    "\000\004\002\uffe9\001\002\000\004\011\u0147\001\002\000" +
    "\010\006\u0141\007\u013e\012\u0148\001\002\000\004\015\uff6b" +
    "\001\002\000\004\104\u014c\001\002\000\004\012\u014b\001" +
    "\002\000\004\015\uff6c\001\002\000\010\012\uff61\013\065" +
    "\103\u014d\001\002\000\006\006\u0141\007\u013e\001\002\000" +
    "\010\012\uff62\013\065\103\u014f\001\002\000\006\006\u0141" +
    "\007\u013e\001\002\000\006\012\uff63\103\u0151\001\002\000" +
    "\006\006\u0141\007\u013e\001\002\000\004\012\uff64\001\002" +
    "\000\004\012\uff65\001\002\000\004\012\uff66\001\002\000" +
    "\012\002\uffde\005\uffde\006\uffde\007\uffde\001\002\000\004" +
    "\011\u0157\001\002\000\010\006\u0141\007\u013e\012\u0158\001" +
    "\002\000\004\102\u0165\001\002\000\004\012\u0163\001\002" +
    "\000\010\012\uffea\013\065\103\u015b\001\002\000\006\006" +
    "\u0141\007\u013e\001\002\000\010\012\uffeb\013\065\103\u015d" +
    "\001\002\000\006\006\u0141\007\u013e\001\002\000\006\012" +
    "\uffec\103\u015f\001\002\000\006\006\u0141\007\u013e\001\002" +
    "\000\004\012\uffee\001\002\000\004\012\uffed\001\002\000" +
    "\004\012\uffef\001\002\000\004\102\u0164\001\002\000\016" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\067\ufff1\001" +
    "\002\000\016\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\067\ufff0\001\002\000\004\067\ufff6\001\002\000\004\067" +
    "\ufff8\001\002\000\004\104\u0181\001\002\000\004\104\u016c" +
    "\001\002\000\006\102\uffc5\103\u017c\001\002\000\004\102" +
    "\u017b\001\002\000\006\013\065\041\u016d\001\002\000\042" +
    "\011\073\017\122\020\111\040\072\042\101\043\113\044" +
    "\120\045\102\046\100\056\u0178\057\112\060\u0177\061\110" +
    "\062\077\063\114\104\115\001\002\000\006\013\065\041" +
    "\u016f\001\002\000\044\011\073\015\225\017\122\020\111" +
    "\040\072\042\101\043\113\044\120\045\102\046\100\056" +
    "\121\057\112\060\117\061\110\062\077\063\114\104\115" +
    "\001\002\000\004\041\u0171\001\002\000\044\011\073\015" +
    "\076\017\122\020\111\040\072\042\101\043\113\044\120" +
    "\045\102\046\100\056\121\057\112\060\117\061\110\062" +
    "\077\063\114\104\115\001\002\000\044\017\146\020\136" +
    "\021\140\022\131\023\144\024\133\025\135\030\134\031" +
    "\145\032\137\033\147\034\141\035\142\036\143\037\132" +
    "\102\uffc0\103\uffc0\001\002\000\006\102\uffbf\103\uffbf\001" +
    "\002\000\044\017\146\020\136\021\140\022\131\023\144" +
    "\024\133\025\135\030\134\031\145\032\137\033\147\034" +
    "\141\035\142\036\143\037\132\102\uffc2\103\uffc2\001\002" +
    "\000\006\102\uffc1\103\uffc1\001\002\000\044\017\146\020" +
    "\136\021\140\022\131\023\144\024\133\025\135\030\134" +
    "\031\145\032\137\033\147\034\141\035\142\036\143\037" +
    "\132\102\uffc3\103\uffc3\001\002\000\044\017\uff38\020\uff38" +
    "\021\uff38\022\uff38\023\uff38\024\uff38\025\uff38\030\uff38\031" +
    "\uff38\032\uff38\033\uff38\034\uff38\035\uff38\036\uff38\037\uff38" +
    "\102\u017a\103\uff38\001\002\000\044\017\uff3a\020\uff3a\021" +
    "\uff3a\022\uff3a\023\uff3a\024\uff3a\025\uff3a\030\uff3a\031\uff3a" +
    "\032\uff3a\033\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a\102" +
    "\u0179\103\uff3a\001\002\000\016\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\067\uffe2\001\002\000\016\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\067\uffe1\001\002\000\016" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\067\uffe4\001" +
    "\002\000\004\104\u017e\001\002\000\004\102\uffc4\001\002" +
    "\000\006\013\065\041\u017f\001\002\000\042\011\073\017" +
    "\122\020\111\040\072\042\101\043\113\044\120\045\102" +
    "\046\100\056\121\057\112\060\117\061\110\062\077\063" +
    "\114\104\115\001\002\000\004\102\u0187\001\002\000\006" +
    "\013\065\041\u0182\001\002\000\042\011\073\017\122\020" +
    "\111\040\072\042\101\043\113\044\120\045\102\046\100" +
    "\056\121\057\u0184\060\117\061\u0183\062\077\063\114\104" +
    "\115\001\002\000\044\017\uff37\020\uff37\021\uff37\022\uff37" +
    "\023\uff37\024\uff37\025\uff37\030\uff37\031\uff37\032\uff37\033" +
    "\uff37\034\uff37\035\uff37\036\uff37\037\uff37\102\u0186\103\uff37" +
    "\001\002\000\044\017\uff39\020\uff39\021\uff39\022\uff39\023" +
    "\uff39\024\uff39\025\uff39\030\uff39\031\uff39\032\uff39\033\uff39" +
    "\034\uff39\035\uff39\036\uff39\037\uff39\102\u0185\103\uff39\001" +
    "\002\000\016\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\067\uffe0\001\002\000\016\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\067\uffdf\001\002\000\016\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\067\uffe3\001\002\000\014\011" +
    "\u0189\013\065\041\274\102\uffd0\103\uffd0\001\002\000\010" +
    "\006\u0141\007\u013e\012\u018a\001\002\000\004\102\u018e\001" +
    "\002\000\004\012\u018c\001\002\000\004\102\u018d\001\002" +
    "\000\016\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\067" +
    "\ufff3\001\002\000\016\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\067\ufff2\001\002\000\004\002\001\001\002\000" +
    "\004\002\ufffe\001\002\000\014\011\u0192\013\065\041\064" +
    "\102\uffd0\103\uffd0\001\002\000\010\006\u0141\007\u013e\012" +
    "\u0193\001\002\000\004\102\u0197\001\002\000\004\012\u0195" +
    "\001\002\000\004\102\u0196\001\002\000\016\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\067\ufff5\001\002\000\016" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\067\ufff4\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0195\000\016\002\005\003\004\022\011\065\013\066" +
    "\010\067\014\001\001\000\014\013\057\014\061\015\055" +
    "\070\060\072\056\001\001\000\014\010\u0143\011\u013f\012" +
    "\u018f\061\u013c\062\u0141\001\001\000\002\001\001\000\014" +
    "\013\057\014\061\015\055\071\270\072\271\001\001\000" +
    "\002\001\001\000\012\022\011\065\u0166\066\010\067\014" +
    "\001\001\000\012\022\011\065\u0165\066\010\067\014\001" +
    "\001\000\002\001\001\000\004\003\u013b\001\001\000\012" +
    "\022\011\065\u013a\066\010\067\014\001\001\000\006\020" +
    "\u0132\021\u0133\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\021\001\001\000\002\001\001\000\036\006" +
    "\027\007\046\025\037\026\033\027\034\030\026\031\042" +
    "\032\044\033\043\037\047\040\031\047\053\064\025\066" +
    "\030\001\001\000\004\050\u011b\001\001\000\002\001\001" +
    "\000\032\006\027\007\u010f\025\037\026\033\027\034\030" +
    "\026\031\042\032\044\033\043\037\047\040\031\047\053" +
    "\001\001\000\002\001\001\000\032\006\027\007\u010e\025" +
    "\037\026\033\027\034\030\026\031\042\032\044\033\043" +
    "\037\047\040\031\047\053\001\001\000\006\064\u010d\066" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\006\u0100\025\037\026" +
    "\033\027\034\030\026\031\042\032\044\033\043\037\047" +
    "\040\031\047\053\063\u0101\001\001\000\004\051\354\001" +
    "\001\000\002\001\001\000\004\050\343\001\001\000\004" +
    "\050\333\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\045\311\053\305\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\122\005\301\026\103\050\102\052\115\056\104\057\106" +
    "\060\105\001\001\000\014\013\057\014\061\015\055\071" +
    "\270\072\271\001\001\000\002\001\001\000\014\013\057" +
    "\014\061\015\055\070\060\072\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\065\001\001\000\022\004" +
    "\122\005\251\026\103\050\102\052\115\056\104\057\106" +
    "\060\105\001\001\000\022\004\122\005\247\026\103\050" +
    "\102\052\115\056\104\057\106\060\105\001\001\000\004" +
    "\045\067\001\001\000\024\004\122\005\245\026\103\044" +
    "\246\050\102\052\115\056\104\057\106\060\105\001\001" +
    "\000\002\001\001\000\024\004\122\005\073\026\103\041" +
    "\074\050\102\052\115\056\104\057\106\060\105\001\001" +
    "\000\010\026\103\052\115\060\241\001\001\000\022\004" +
    "\236\005\125\026\103\050\102\052\115\056\104\057\106" +
    "\060\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\222\044\223\001\001\000\002\001\001\000\004" +
    "\075\221\001\001\000\004\074\220\001\001\000\004\075" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\103\052\115\060\204\001\001\000\002" +
    "\001\001\000\004\074\203\001\001\000\002\001\001\000" +
    "\004\045\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\074\164\001\001\000\002\001\001\000\010\026" +
    "\103\052\115\060\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\126\005\125\026\103\050\102\052" +
    "\115\056\104\057\106\060\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\122\005" +
    "\163\026\103\050\102\052\115\056\104\057\106\060\105" +
    "\001\001\000\022\004\122\005\162\026\103\050\102\052" +
    "\115\056\104\057\106\060\105\001\001\000\002\001\001" +
    "\000\022\004\122\005\161\026\103\050\102\052\115\056" +
    "\104\057\106\060\105\001\001\000\002\001\001\000\022" +
    "\004\122\005\160\026\103\050\102\052\115\056\104\057" +
    "\106\060\105\001\001\000\022\004\122\005\157\026\103" +
    "\050\102\052\115\056\104\057\106\060\105\001\001\000" +
    "\022\004\122\005\156\026\103\050\102\052\115\056\104" +
    "\057\106\060\105\001\001\000\022\004\122\005\155\026" +
    "\103\050\102\052\115\056\104\057\106\060\105\001\001" +
    "\000\022\004\122\005\154\026\103\050\102\052\115\056" +
    "\104\057\106\060\105\001\001\000\022\004\122\005\153" +
    "\026\103\050\102\052\115\056\104\057\106\060\105\001" +
    "\001\000\022\004\122\005\152\026\103\050\102\052\115" +
    "\056\104\057\106\060\105\001\001\000\022\004\122\005" +
    "\151\026\103\050\102\052\115\056\104\057\106\060\105" +
    "\001\001\000\022\004\122\005\150\026\103\050\102\052" +
    "\115\056\104\057\106\060\105\001\001\000\022\004\122" +
    "\005\147\026\103\050\102\052\115\056\104\057\106\060" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\122\005\166" +
    "\026\103\050\102\052\115\056\104\057\106\060\105\001" +
    "\001\000\002\001\001\000\022\004\122\005\170\026\103" +
    "\050\102\052\115\056\104\057\106\060\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\202\001\001" +
    "\000\024\004\122\005\174\026\103\050\102\052\115\056" +
    "\104\057\106\060\105\073\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\122\005\174\026\103\050\102\052\115\056\104" +
    "\057\106\060\105\073\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\206\005\125\026\103\050\102\052\115\056\104\057" +
    "\106\060\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\122\005\211\026\103\050\102\052\115\056" +
    "\104\057\106\060\105\001\001\000\002\001\001\000\022" +
    "\004\122\005\213\026\103\050\102\052\115\056\104\057" +
    "\106\060\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\122\005\216\026\103\050\102\052\115\056" +
    "\104\057\106\060\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\122\005\225\026\103" +
    "\042\226\050\102\052\115\056\104\057\106\060\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\122\005\225\026\103\042\231\050\102\052" +
    "\115\056\104\057\106\060\105\001\001\000\002\001\001" +
    "\000\006\043\233\044\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\243\005\125\026\103\050\102\052\115\056\104\057\106" +
    "\060\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\057" +
    "\014\061\015\055\072\257\001\001\000\002\001\001\000" +
    "\004\045\065\001\001\000\022\004\122\005\251\026\103" +
    "\050\102\052\115\056\104\057\106\060\105\001\001\000" +
    "\012\013\057\014\061\015\055\072\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\057\014\061\015" +
    "\055\072\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\065\001" +
    "\001\000\022\004\122\005\251\026\103\050\102\052\115" +
    "\056\104\057\106\060\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\122\005\331\026\103" +
    "\050\102\052\115\056\104\057\106\060\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\045\322\053\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\122\005" +
    "\327\026\103\050\102\052\115\056\104\057\106\060\105" +
    "\001\001\000\004\053\324\001\001\000\002\001\001\000" +
    "\022\004\122\005\325\026\103\050\102\052\115\056\104" +
    "\057\106\060\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\006\341\025\037\026\033\027" +
    "\034\030\026\031\042\032\044\033\043\037\047\040\031" +
    "\047\053\063\342\001\001\000\022\004\336\005\125\026" +
    "\103\050\102\052\115\056\104\057\106\060\335\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\006\344\025\037\026\033\027\034\030\026\031\042\032" +
    "\044\033\043\037\047\040\031\047\053\063\345\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\347\025" +
    "\037\026\033\027\034\030\026\031\042\032\044\033\043" +
    "\037\047\040\031\047\053\063\350\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\006\352\025\037\026\033" +
    "\027\034\030\026\031\042\032\044\033\043\037\047\040" +
    "\031\047\053\063\353\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\376\025\037\026\033\027\034\030" +
    "\026\031\042\032\044\033\043\037\047\040\031\047\053" +
    "\063\377\001\001\000\004\046\357\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\122" +
    "\005\362\026\103\050\102\052\115\056\104\057\106\060" +
    "\105\001\001\000\002\001\001\000\022\004\122\005\364" +
    "\026\103\050\102\052\115\056\104\057\106\060\105\001" +
    "\001\000\002\001\001\000\004\047\366\001\001\000\002" +
    "\001\001\000\004\053\370\001\001\000\022\004\122\005" +
    "\371\026\103\050\102\052\115\056\104\057\106\060\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\122\005\375\026\103\050\102\052\115" +
    "\056\104\057\106\060\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\u0103\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\u0106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\122\005\u0114\026\103" +
    "\050\102\052\115\056\104\057\106\060\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\u011d" +
    "\036\u011e\001\001\000\004\034\u012a\001\001\000\006\035" +
    "\u0127\036\u011e\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\027\007\u0123\025\037\026\033\027\034\030" +
    "\026\031\042\032\044\033\043\037\047\040\031\047\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\006\027\007\u012e\025\037\026\033" +
    "\027\034\030\026\031\042\032\044\033\043\037\047\040" +
    "\031\047\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\u0132\021\u0139\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\u0143\011\u013f\012\u013e\061\u013c\062\u0141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\u0154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\u0143\011\u013f\012\u0144" +
    "\061\u013c\062\u0141\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\u0149\061\u0148\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\u014d\001\001\000\006\023\u0153\061\u0148\001\001" +
    "\000\004\045\u014f\001\001\000\006\023\u0152\061\u0148\001" +
    "\001\000\002\001\001\000\006\023\u0151\061\u0148\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\u0158\061\u0159" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\u015b\001\001\000\006\024\u0161\061\u0159\001\001\000\004" +
    "\045\u015d\001\001\000\006\024\u0160\061\u0159\001\001\000" +
    "\002\001\001\000\006\024\u015f\061\u0159\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\u0169\017\u017f\001\001\000" +
    "\006\016\u0169\017\u016a\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\u016d\001\001\000\022\004\122\005" +
    "\u0175\026\103\050\102\052\115\056\104\057\106\060\105" +
    "\001\001\000\004\045\u016f\001\001\000\024\004\122\005" +
    "\u0173\026\103\044\u0174\050\102\052\115\056\104\057\106" +
    "\060\105\001\001\000\002\001\001\000\024\004\122\005" +
    "\u0171\026\103\041\u0172\050\102\052\115\056\104\057\106" +
    "\060\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\u0169\017\u017c\001\001" +
    "\000\002\001\001\000\004\045\u016d\001\001\000\022\004" +
    "\122\005\u0175\026\103\050\102\052\115\056\104\057\106" +
    "\060\105\001\001\000\002\001\001\000\004\045\u016d\001" +
    "\001\000\022\004\122\005\u0175\026\103\050\102\052\115" +
    "\056\104\057\106\060\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\065\001\001\000\006\024\u018a\061" +
    "\u0159\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\065\001\001\000\006" +
    "\024\u0193\061\u0159\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz;
    
    Nodo entero = new Nodo(sym.pr_entero, "entero", 1, 1, null, true);
    Nodo real = new Nodo(sym.pr_real, "real", 1, 1, null, true);

    public void report_error(String message, Object info)
    {   
        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol)
        {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0)
            {                
                m.append(" en la línea " + (s.left + 1));   

                if (s.right >= 0)                    
                    m.append(", columna " + (s.right + 1));
            }
        }

        m.append(" : " + message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info)
    {
        report_error(message, info);
        System.exit(1);
    }

    public Nodo getAST()
    {
        return raiz;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= DEFINICIONVARIABLECAB PROGRAMAPRINCIPAL 
            {
              Nodo RESULT =null;
		int dvcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> dvc = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo pp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo cab = new Nodo(accion.cabecera, accion.acciones[accion.cabecera], 1, 1, dvc, false);
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();
    hijos.add(cab);
    hijos.add(pp);
    RESULT = new Nodo(accion.programa, accion.acciones[accion.programa], 1, 1, hijos, false);
    raiz = RESULT;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= DEFINICIONVARIABLECAB PROGRAMAPRINCIPAL DEFINICIONFUNCION 
            {
              Nodo RESULT =null;
		int dvcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> dvc = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo pp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo df = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo cab = new Nodo(accion.cabecera, accion.acciones[accion.cabecera], 1, 1, dvc, false);
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();
    hijos.add(cab);
    hijos.add(pp);
    hijos.add(df);
    RESULT = new Nodo(accion.programa, accion.acciones[accion.programa], 1, 1, hijos, false);
    raiz = RESULT;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= PROGRAMAPRINCIPAL DEFINICIONFUNCION 
            {
              Nodo RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo pp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo df = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();
    hijos.add(pp);
    hijos.add(df);
    RESULT = new Nodo(accion.programa, accion.acciones[accion.programa], 1, 1, hijos, false);
    raiz = RESULT;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= PROGRAMAPRINCIPAL 
            {
              Nodo RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo pp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();
    hijos.add(pp);
    RESULT = new Nodo(accion.programa, accion.acciones[accion.programa], 1, 1, hijos, false);
    raiz = RESULT;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAMAPRINCIPAL ::= pr_principal par_ab par_ce BLOQUE 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();
    RESULT = new Nodo(accion.programaPrincipal, accion.acciones[accion.programaPrincipal], 1, 1, b, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMAPRINCIPAL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEFINICIONVARIABLECAB ::= DECLARACION 
            {
              ArrayList<Nodo> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = d;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEFINICIONVARIABLECAB ::= DECLARACIONCON 
            {
              ArrayList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = c;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEFINICIONVARIABLECAB ::= DEFINICIONPROTOTIPO 
            {
              ArrayList<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEFINICIONVARIABLECAB ::= DECLARACION DEFINICIONVARIABLECAB 
            {
              ArrayList<Nodo> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> r = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    d.addAll(r);
    RESULT = d;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEFINICIONVARIABLECAB ::= DECLARACIONCON DEFINICIONVARIABLECAB 
            {
              ArrayList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> r = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    c.addAll(r);
    RESULT = c;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFINICIONVARIABLECAB ::= DEFINICIONPROTOTIPO DEFINICIONVARIABLECAB 
            {
              ArrayList<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFINICIONPROTOTIPO ::= pr_entero id par_ab PARAMETROPROTOTIPO par_ce punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONPROTOTIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFINICIONPROTOTIPO ::= pr_entero id par_ab par_ce punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONPROTOTIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEFINICIONPROTOTIPO ::= pr_real id par_ab PARAMETROPROTOTIPO par_ce punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONPROTOTIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DEFINICIONPROTOTIPO ::= pr_real id par_ab par_ce punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONPROTOTIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DEFINICIONPROTOTIPO ::= pr_vacio id par_ab PARAMETROPROTOTIPO par_ce punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONPROTOTIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DEFINICIONPROTOTIPO ::= pr_vacio id par_ab par_ce punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONPROTOTIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMETROPROTOTIPO ::= TIPONUMERO coma PARAMETROPROTOTIPO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETROPROTOTIPO ::= TIPONUMERO INDICE INDICE coma PARAMETROPROTOTIPO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETROPROTOTIPO ::= TIPONUMERO INDICE coma PARAMETROPROTOTIPO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMETROPROTOTIPO ::= TIPONUMERO INDICE INDICE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETROPROTOTIPO ::= TIPONUMERO INDICE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETROPROTOTIPO ::= TIPONUMERO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFINICIONFUNCION ::= DECLARACIONFUNCION DEFINICIONFUNCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONFUNCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEFINICIONFUNCION ::= DECLARACIONFUNCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONFUNCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= pr_entero DECENTERO 
            {
              ArrayList<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> e = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= pr_real DECREAL 
            {
              ArrayList<Nodo> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> r = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= pr_cadena DECCADALL punto_coma 
            {
              ArrayList<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACIONCON ::= pr_const pr_entero DECCONALL punto_coma 
            {
              ArrayList<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACIONCON ::= pr_const pr_real DECCONALL punto_coma 
            {
              ArrayList<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACIONCON ::= pr_const pr_entero id igual octa_e punto_coma 
            {
              ArrayList<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACIONCON ::= pr_const pr_entero id igual hexa_e punto_coma 
            {
              ArrayList<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACIONCON ::= pr_const pr_real id igual octa_r punto_coma 
            {
              ArrayList<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACIONCON ::= pr_const pr_real id igual hexa_r punto_coma 
            {
              ArrayList<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACIONFUNCION ::= DECLARACIONFUNCIONCABECERA BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONFUNCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECENTERO ::= id igual octa_e punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    /* Declaracion con Inicializacion de un entero octal */
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(entero);
    hijos.add(i);
    hijos.add(v);
    Nodo padre = new Nodo(accion.declaracionSimIni, accion.acciones[accion.declaracionSimIni], 1, 1, hijos, false);
    
    ArrayList<Nodo> dec = new ArrayList<Nodo>();
    dec.add(padre);

    RESULT = dec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECENTERO",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECENTERO ::= id igual hexa_e punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    /* Declaracion con Inicializacion de un entero octal */
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(entero);
    hijos.add(i);
    hijos.add(v);
    Nodo padre = new Nodo(accion.declaracionSimIni, accion.acciones[accion.declaracionSimIni], 1, 1, hijos, false);
    
    ArrayList<Nodo> dec = new ArrayList<Nodo>();
    dec.add(padre);

    RESULT = dec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECENTERO",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECENTERO ::= DECALL punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> da = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    for(int i = 0; i < da.size(); i++)
        da.get(i).getHijos().add(0, entero);

    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECENTERO",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECREAL ::= id igual octa_r punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    /* Declaracion con Inicializacion de un entero octal */
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(real);
    hijos.add(i);
    hijos.add(v);
    Nodo padre = new Nodo(accion.declaracionSimIni, accion.acciones[accion.declaracionSimIni], 1, 1, hijos, false);
    
    ArrayList<Nodo> dec = new ArrayList<Nodo>();
    dec.add(padre);

    RESULT = dec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREAL",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECREAL ::= id igual hexa_r punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    /* Declaracion con Inicializacion de un entero octal */
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(real);
    hijos.add(i);
    hijos.add(v);
    Nodo padre = new Nodo(accion.declaracionSimIni, accion.acciones[accion.declaracionSimIni], 1, 1, hijos, false);
    
    ArrayList<Nodo> dec = new ArrayList<Nodo>();
    dec.add(padre);

    RESULT = dec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREAL",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECREAL ::= DECALL punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> da = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    for(int i = 0; i < da.size(); i++)
        da.get(i).getHijos().add(0, real);

    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREAL",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECALL ::= DECSIMPLE 
            {
              ArrayList<Nodo> RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ds = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> da = new ArrayList<Nodo>();
    da.add(ds);
    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECALL ::= DECVECT 
            {
              ArrayList<Nodo> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dv = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECALL ::= DECMAT 
            {
              ArrayList<Nodo> RESULT =null;
		int dmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dm = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECALL ::= DECSIMPLE coma DECALL 
            {
              ArrayList<Nodo> RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo ds = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> da = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    da.add(0, ds);
    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECALL ::= DECVECT coma DECALL 
            {
              ArrayList<Nodo> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo dv = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> da = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECALL ::= DECMAT coma DECALL 
            {
              ArrayList<Nodo> RESULT =null;
		int dmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo dm = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> da = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECSIMPLE ::= id igual EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(v);
    RESULT = new Nodo(accion.declaracionSimIni, accion.acciones[accion.declaracionSimIni], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECSIMPLE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECSIMPLE ::= id 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    RESULT = new Nodo(accion.declaracionSim, accion.acciones[accion.declaracionSim], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECSIMPLE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECVECT ::= id INDICE igual EXPGEN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECVECT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECVECT ::= id INDICE igual VECTOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECVECT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECVECT ::= id INDICE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECVECT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECMAT ::= id INDICE INDICE igual EXPGEN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECMAT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECMAT ::= id INDICE INDICE igual MATRIZ 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECMAT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECMAT ::= id INDICE INDICE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECMAT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECCAD ::= id igual cadena 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCAD",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECCAD ::= id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCAD",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECCADALL ::= DECCAD 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCADALL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECCADALL ::= DECCAD coma DECCADALL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCADALL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECCONALL ::= DECCON 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONALL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECCONALL ::= DECCON coma DECCONALL 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONALL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECCON ::= id igual EXPGEN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCON",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECCON ::= id INDICE igual EXPGEN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCON",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECCON ::= id INDICE igual VECTOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCON",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECCON ::= id INDICE INDICE igual EXPGEN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCON",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECCON ::= id INDICE INDICE igual MATRIZ 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCON",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BLOQUE ::= ll_ab NSENTENCIA ll_ce 
            {
              ArrayList<Nodo> RESULT =null;
		
    /* NO SE  AGREGA AL ARBOL SEMANTICO */

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BLOQUE ::= ll_ab DEFINICIONVARIABLE NSENTENCIA ll_ce 
            {
              ArrayList<Nodo> RESULT =null;
		
    /* NO SE  AGREGA AL ARBOL SEMANTICO */

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BLOQUE ::= ll_ab DEFINICIONVARIABLE ll_ce 
            {
              ArrayList<Nodo> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> dv = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = dv;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BLOQUE ::= ll_ab ll_ce 
            {
              ArrayList<Nodo> RESULT =null;
		
    Nodo declaracionVar = new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], 1, 1, (new ArrayList<Nodo>()),false);
    Nodo bloque = new Nodo(accion.bloque, accion.acciones[accion.bloque], 1, 1, (new ArrayList<Nodo>()), false);
    ArrayList<Nodo> hijosProgPrin = new ArrayList<Nodo>();
    hijosProgPrin.add(declaracionVar);
    hijosProgPrin.add(bloque);
    RESULT = hijosProgPrin;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NSENTENCIA ::= SENTENCIA NSENTENCIA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NSENTENCIA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NSENTENCIA ::= SENTENCIA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NSENTENCIA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA ::= CONDICIONALHACERMIENTRAS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA ::= CONDICIONALMIENTRAS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA ::= CONDICIONALPARA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA ::= CONDICIONALSI 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA ::= SENTSELECTOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA ::= LLAMADAFUNCION punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA ::= ESCRITURA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA ::= LECTURA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA ::= ACT punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA ::= pr_retornar EXPGEN punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA ::= pr_retornar punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ACT ::= id decr 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ACT ::= id incr 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ACT ::= id OPERADORASIGNACION EXPGEN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPGEN ::= OPERANDO 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = o;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPGEN",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPGEN ::= EXPRESION 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPGEN",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= EXPGEN dif EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.diferente, accion.acciones[accion.diferente], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= EXPGEN ident EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.identico, accion.acciones[accion.identico], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= EXPGEN mas EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.suma, accion.acciones[accion.suma], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= EXPGEN menos EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.resta, accion.acciones[accion.resta], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= EXPGEN prod EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.producto, accion.acciones[accion.producto], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= EXPGEN div EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.division, accion.acciones[accion.division], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= EXPGEN mayor EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.mayor, accion.acciones[accion.mayor], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= EXPGEN mayor_igual EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.mayor_igual, accion.acciones[accion.mayor_igual], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= EXPGEN menor EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.menor, accion.acciones[accion.menor], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= EXPGEN menor_igual EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.menor_igual, accion.acciones[accion.menor_igual], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= EXPGEN mod EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.modulo, accion.acciones[accion.modulo], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= EXPGEN o EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.disyuncion, accion.acciones[accion.disyuncion], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= EXPGEN y EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.conjuncion, accion.acciones[accion.conjuncion], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= EXPGEN inv 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    RESULT = new Nodo(accion.inversa, accion.acciones[accion.inversa], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= EXPGEN transp 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    RESULT = new Nodo(accion.transpuesta, accion.acciones[accion.transpuesta], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= neg OPERANDO 
            {
              Nodo RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(o1);
    RESULT = new Nodo(accion.negacion, accion.acciones[accion.negacion], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= neg par_ab EXPRESION par_ce 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    RESULT = new Nodo(accion.negacion, accion.acciones[accion.negacion], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= mas OPERANDO 
            {
              Nodo RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(o1);
    RESULT = new Nodo(accion.positividad, accion.acciones[accion.positividad], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= mas par_ab EXPRESION par_ce 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    RESULT = new Nodo(accion.positividad, accion.acciones[accion.positividad], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= menos OPERANDO 
            {
              Nodo RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(o1);
    RESULT = new Nodo(accion.negatividad, accion.acciones[accion.negatividad], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= menos par_ab EXPRESION par_ce 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    RESULT = new Nodo(accion.negatividad, accion.acciones[accion.negatividad], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= OPERADORFUNCION 
            {
              Nodo RESULT =null;
		int ofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo of = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = of;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= OPERADORCOND 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= par_ab EXPRESION par_ce 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= par_ab OPERANDO par_ce 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = o;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ARGUMENTO ::= EXPGEN 
            {
              ArrayList<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> arg = new ArrayList<Nodo>();
    arg.add(e);
    RESULT = arg;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ARGUMENTO ::= EXPGEN coma ARGUMENTO 
            {
              ArrayList<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    a.add(0, e);
    RESULT = a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ASIGNACION ::= id igual cadena punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ASIGNACION ::= id OPERADORASIGNACION EXPGEN punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ASIGNACION ::= id INDICE OPERADORASIGNACION EXPGEN punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ASIGNACION ::= id INDICE INDICE OPERADORASIGNACION EXPGEN punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONDICIONAL ::= par_ab OPERANDO par_ce 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONDICIONAL ::= par_ab EXPRESION par_ce 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONDICIONALHACERMIENTRAS ::= pr_hacer BLOQUE pr_mientras CONDICIONAL punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALHACERMIENTRAS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONDICIONALHACERMIENTRAS ::= pr_hacer SENTENCIA pr_mientras CONDICIONAL punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALHACERMIENTRAS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONDICIONALMIENTRAS ::= pr_mientras CONDICIONAL BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALMIENTRAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONDICIONALMIENTRAS ::= pr_mientras CONDICIONAL SENTENCIA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALMIENTRAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONDICIONALPARA ::= pr_para CONTROLADOR BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALPARA",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONDICIONALPARA ::= pr_para CONTROLADOR SENTENCIA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALPARA",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONDICIONALSI ::= pr_si CONDICIONAL BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONDICIONALSI ::= pr_si CONDICIONAL BLOQUE pr_sino BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONDICIONALSI ::= pr_si CONDICIONAL SENTENCIA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONDICIONALSI ::= pr_si CONDICIONAL BLOQUE pr_sino SENTENCIA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CONDICIONALSI ::= pr_si CONDICIONAL SENTENCIA pr_sino BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONDICIONALSI ::= pr_si CONDICIONAL SENTENCIA pr_sino SENTENCIA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CONTROLADOR ::= par_ab INI punto_coma EXPGEN punto_coma ACT par_ce 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROLADOR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ESCRITURA ::= pr_mostrar par_ab EXPGEN par_ce punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ESCRITURA ::= pr_mostrar par_ab cadena par_ce punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ESCRITURA ::= pr_mostrar par_ab par_ce punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // INDICE ::= cor_ab EXPGEN cor_ce 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDICE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // INI ::= id igual EXPGEN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INI",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // INI ::= pr_entero id igual EXPGEN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INI",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // LECTURA ::= pr_leer par_ab id par_ce punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LECTURA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // MATRIZ ::= ll_ab NVECTOR ll_ce 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATRIZ",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NVECTOR ::= VECTOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NVECTOR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NVECTOR ::= VECTOR coma NVECTOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NVECTOR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // VECTOR ::= ll_ab NELEMENTO ll_ce 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VECTOR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NELEMENTO ::= EXPGEN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NELEMENTO",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NELEMENTO ::= EXPGEN coma NELEMENTO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NELEMENTO",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DECLARACIONFUNCIONCABECERA ::= TIPOVARIABLEFUNCION id par_ab PARAMETRO par_ce 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONFUNCIONCABECERA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DECLARACIONFUNCIONCABECERA ::= TIPOVARIABLEFUNCION id par_ab par_ce 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONFUNCIONCABECERA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TIPOVARIABLEFUNCION ::= TIPONUMERO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOVARIABLEFUNCION",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TIPOVARIABLEFUNCION ::= pr_vacio 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOVARIABLEFUNCION",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DEFINICIONVARIABLE ::= DECLARACION DEFINICIONVARIABLE 
            {
              ArrayList<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLE",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DEFINICIONVARIABLE ::= DECLARACION 
            {
              ArrayList<Nodo> RESULT =null;
		


              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLE",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // PARAMETRO ::= TIPONUMERO id coma PARAMETRO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // PARAMETRO ::= TIPONUMERO id INDICE coma PARAMETRO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // PARAMETRO ::= TIPONUMERO id INDICE INDICE coma PARAMETRO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // PARAMETRO ::= TIPONUMERO id INDICE INDICE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // PARAMETRO ::= TIPONUMERO id INDICE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // PARAMETRO ::= TIPONUMERO id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // PARAMETROBINARIO ::= par_ab EXPGEN coma EXPGEN par_ce 
            {
              ArrayList<Nodo> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> param = new ArrayList<Nodo>();
    param.add(e1);
    param.add(e2);
    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROBINARIO",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // PARAMETROUNARIO ::= par_ab EXPGEN par_ce 
            {
              ArrayList<Nodo> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> param = new ArrayList<Nodo>();
    param.add(e1);
    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROUNARIO",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SENTSELECTOR ::= pr_selector CONDICIONAL ll_ab NCASO SENTDEFECTO ll_ce 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTSELECTOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SENTSELECTOR ::= pr_selector CONDICIONAL ll_ab NCASO ll_ce 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTSELECTOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NCASO ::= SENTCASO NCASO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NCASO",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NCASO ::= SENTCASO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NCASO",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SENTCASO ::= pr_caso numero sig_pun NSENTENCIA pr_saltar punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTCASO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SENTCASO ::= pr_caso numero sig_pun pr_saltar punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTCASO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SENTCASO ::= pr_caso numero sig_pun NSENTENCIA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTCASO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SENTCASO ::= pr_caso numero sig_pun 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTCASO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SENTDEFECTO ::= pr_default sig_pun NSENTENCIA pr_saltar punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTDEFECTO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SENTDEFECTO ::= pr_default sig_pun pr_saltar punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTDEFECTO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // LLAMADAFUNCION ::= id par_ab par_ce 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Nodo argumento = new Nodo(accion.argumento, accion.acciones[accion.argumento], 1, 1, (new ArrayList<Nodo>()), false);
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(argumento);
    RESULT = new Nodo(accion.llamadaFuncion, accion.acciones[accion.llamadaFuncion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // LLAMADAFUNCION ::= id par_ab ARGUMENTO par_ce 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Nodo argumento = new Nodo(accion.argumento, accion.acciones[accion.argumento], 1, 1, a, false);
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(argumento);
    RESULT = new Nodo(accion.llamadaFuncion, accion.acciones[accion.llamadaFuncion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OPERADORFUNCION ::= pr_suma PARAMETROBINARIO 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.suma, accion.acciones[accion.suma], 1, 1, p,false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORFUNCION",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OPERADORFUNCION ::= pr_resta PARAMETROBINARIO 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.resta, accion.acciones[accion.resta], 1, 1, p,false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORFUNCION",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // OPERADORFUNCION ::= pr_prod PARAMETROBINARIO 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.producto, accion.acciones[accion.producto], 1, 1, p,false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORFUNCION",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // OPERADORFUNCION ::= pr_transp PARAMETROUNARIO 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.transpuesta, accion.acciones[accion.transpuesta], 1, 1, p,false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORFUNCION",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // OPERADORFUNCION ::= pr_inv PARAMETROUNARIO 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.inversa, accion.acciones[accion.inversa], 1, 1, p,false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORFUNCION",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // OPERADORCOND ::= CONDICIONAL sig_int EXPGEN sig_pun EXPGEN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORCOND",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // OPERADORASIGNACION ::= a_div 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORASIGNACION",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // OPERADORASIGNACION ::= a_prod 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORASIGNACION",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // OPERADORASIGNACION ::= a_resta 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORASIGNACION",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // OPERADORASIGNACION ::= a_suma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORASIGNACION",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // OPERADORASIGNACION ::= igual 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORASIGNACION",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // OPERADORASIGNACION ::= a_mod 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORASIGNACION",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // OPERANDOENTERO ::= LLAMADAFUNCION 
            {
              Nodo RESULT =null;
		int llleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ll = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ll;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // OPERANDOENTERO ::= id INDICE INDICE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(d1);
    hijos.add(d2);
    RESULT = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // OPERANDOENTERO ::= id INDICE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(d1);
    RESULT = new Nodo(accion.accesoVec, accion.acciones[accion.accesoVec], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // OPERANDOENTERO ::= id 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = i;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // OPERANDOENTERO ::= numero 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = n;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // OPERADORPALABRABINARIO ::= pr_suma 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = op;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORPALABRABINARIO",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // OPERADORPALABRABINARIO ::= pr_resta 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = op;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORPALABRABINARIO",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // OPERADORPALABRABINARIO ::= pr_prod 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = op;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORPALABRABINARIO",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // OPERADORPALABRAUNARIO ::= pr_transp 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = op;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORPALABRAUNARIO",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // OPERADORPALABRAUNARIO ::= pr_inv 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = op;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORPALABRAUNARIO",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // OPERANDO ::= OPERANDOENTERO 
            {
              Nodo RESULT =null;
		int oeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo oe = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = oe;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // OPERANDO ::= real 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // OPERANDO ::= octa_e 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = o;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // OPERANDO ::= octa_r 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = o;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // OPERANDO ::= hexa_e 
            {
              Nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = h;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // OPERANDO ::= hexa_r 
            {
              Nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = h;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // TIPONUMERO ::= pr_entero 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPONUMERO",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // TIPONUMERO ::= pr_real 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPONUMERO",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
