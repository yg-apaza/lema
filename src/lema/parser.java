
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package lema;

import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\326\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\004\000\002\002\003\000\002\003\006" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\004\000\002\053\004\000\002\053\004\000\002" +
    "\017\010\000\002\017\007\000\002\017\010\000\002\017" +
    "\007\000\002\017\010\000\002\017\007\000\002\070\005" +
    "\000\002\070\007\000\002\070\006\000\002\070\005\000" +
    "\002\070\004\000\002\070\003\000\002\011\004\000\002" +
    "\011\003\000\002\054\004\000\002\054\004\000\002\054" +
    "\005\000\002\055\006\000\002\055\006\000\002\055\010" +
    "\000\002\055\010\000\002\055\010\000\002\055\010\000" +
    "\002\007\004\000\002\056\006\000\002\056\006\000\002" +
    "\056\004\000\002\057\006\000\002\057\006\000\002\057" +
    "\004\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\005\000\002\060\005\000\002\060\005\000" +
    "\002\012\005\000\002\012\003\000\002\013\006\000\002" +
    "\013\006\000\002\013\004\000\002\014\007\000\002\014" +
    "\007\000\002\014\005\000\002\016\005\000\002\016\003" +
    "\000\002\066\003\000\002\066\005\000\002\067\003\000" +
    "\002\067\005\000\002\015\005\000\002\015\006\000\002" +
    "\015\006\000\002\015\007\000\002\015\007\000\002\051" +
    "\005\000\002\051\006\000\002\051\005\000\002\051\004" +
    "\000\002\071\004\000\002\071\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\004\000\002\006" +
    "\003\000\002\006\003\000\002\006\004\000\002\006\005" +
    "\000\002\006\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\005\000\002\041\005\000\002\041\005\000\002" +
    "\041\005\000\002\041\005\000\002\041\005\000\002\005" +
    "\003\000\002\005\003\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\006\000\002\004\004\000" +
    "\002\004\006\000\002\004\004\000\002\004\006\000\002" +
    "\004\003\000\002\004\003\000\002\004\005\000\002\004" +
    "\005\000\002\061\003\000\002\061\005\000\002\021\006" +
    "\000\002\021\006\000\002\021\006\000\002\021\006\000" +
    "\002\021\006\000\002\021\006\000\002\021\006\000\002" +
    "\021\007\000\002\021\007\000\002\021\007\000\002\021" +
    "\007\000\002\021\007\000\002\021\007\000\002\021\010" +
    "\000\002\021\010\000\002\021\010\000\002\021\010\000" +
    "\002\021\010\000\002\021\010\000\002\042\005\000\002" +
    "\042\005\000\002\023\007\000\002\023\007\000\002\024" +
    "\005\000\002\024\005\000\002\025\005\000\002\025\005" +
    "\000\002\026\005\000\002\026\007\000\002\026\005\000" +
    "\002\026\007\000\002\026\007\000\002\026\007\000\002" +
    "\072\011\000\002\033\007\000\002\033\007\000\002\033" +
    "\006\000\002\037\005\000\002\040\005\000\002\040\006" +
    "\000\002\034\007\000\002\035\005\000\002\065\003\000" +
    "\002\065\005\000\002\036\005\000\002\064\003\000\002" +
    "\064\005\000\002\010\007\000\002\010\006\000\002\050" +
    "\003\000\002\050\003\000\002\052\004\000\002\052\003" +
    "\000\002\020\006\000\002\020\007\000\002\020\010\000" +
    "\002\020\006\000\002\020\005\000\002\020\004\000\002" +
    "\062\007\000\002\063\005\000\002\027\010\000\002\027" +
    "\007\000\002\031\004\000\002\031\003\000\002\032\010" +
    "\000\002\032\007\000\002\032\006\000\002\032\005\000" +
    "\002\030\007\000\002\030\006\000\002\022\005\000\002" +
    "\022\006\000\002\044\004\000\002\044\004\000\002\044" +
    "\004\000\002\044\004\000\002\044\004\000\002\045\013" +
    "\000\002\043\003\000\002\043\005\000\002\043\004\000" +
    "\002\043\003\000\002\043\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\047\003\000\002\047\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c9\000\016\004\010\005\013\006\004\007\007\010" +
    "\016\067\017\001\002\000\004\104\u01c5\001\002\000\012" +
    "\002\ufffd\005\u0177\006\u0175\007\u0172\001\002\000\004\002" +
    "\u01c3\001\002\000\004\104\u01bc\001\002\000\006\006\u019d" +
    "\007\u019c\001\002\000\016\004\010\005\013\006\004\007" +
    "\007\010\016\067\ufffb\001\002\000\016\004\010\005\013" +
    "\006\004\007\007\010\016\067\ufff9\001\002\000\004\104" +
    "\u018a\001\002\000\004\067\017\001\002\000\016\004\010" +
    "\005\013\006\004\007\007\010\016\067\ufffa\001\002\000" +
    "\004\104\u0169\001\002\000\004\011\020\001\002\000\004" +
    "\012\021\001\002\000\004\015\023\001\002\000\012\002" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\001\002\000\034\006\055" +
    "\007\053\010\016\016\051\065\033\066\025\070\041\072" +
    "\042\073\036\074\037\075\024\101\052\104\046\001\002" +
    "\000\004\011\u0107\001\002\000\004\011\u0147\001\002\000" +
    "\026\016\u0145\065\033\066\025\070\041\072\042\073\036" +
    "\074\037\075\024\101\052\104\046\001\002\000\036\016" +
    "\uffb6\065\uffb6\066\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6" +
    "\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6\104" +
    "\uffb6\001\002\000\034\016\uffb9\065\033\066\025\070\041" +
    "\072\042\073\036\074\037\075\024\076\uffb9\077\uffb9\100" +
    "\uffb9\101\052\104\046\001\002\000\034\006\055\007\053" +
    "\010\016\016\uff53\065\uff53\066\uff53\070\uff53\072\uff53\073" +
    "\uff53\074\uff53\075\uff53\101\uff53\104\uff53\001\002\000\036" +
    "\016\uffb0\065\uffb0\066\uffb0\070\uffb0\071\uffb0\072\uffb0\073" +
    "\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0" +
    "\104\uffb0\001\002\000\004\011\u013e\001\002\000\004\102" +
    "\u013d\001\002\000\036\016\uffb7\065\uffb7\066\uffb7\070\uffb7" +
    "\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077" +
    "\uffb7\100\uffb7\101\uffb7\104\uffb7\001\002\000\026\015\023" +
    "\065\033\066\025\070\041\072\042\073\036\074\037\075" +
    "\024\101\052\104\046\001\002\000\004\011\u0118\001\002" +
    "\000\036\016\uffb8\065\uffb8\066\uffb8\070\uffb8\071\uffb8\072" +
    "\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8" +
    "\101\uffb8\104\uffb8\001\002\000\004\011\u0107\001\002\000" +
    "\004\011\u0107\001\002\000\036\016\uffb5\065\uffb5\066\uffb5" +
    "\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076" +
    "\uffb5\077\uffb5\100\uffb5\101\uffb5\104\uffb5\001\002\000\036" +
    "\016\uffb3\065\uffb3\066\uffb3\070\uffb3\071\uffb3\072\uffb3\073" +
    "\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3" +
    "\104\uffb3\001\002\000\036\016\uffb4\065\uffb4\066\uffb4\070" +
    "\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4" +
    "\077\uffb4\100\uffb4\101\uffb4\104\uffb4\001\002\000\026\011" +
    "\174\013\065\026\312\027\314\041\322\047\317\050\321" +
    "\051\313\052\320\053\316\001\002\000\004\016\311\001" +
    "\002\000\036\016\uffb1\065\uffb1\066\uffb1\070\uffb1\071\uffb1" +
    "\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100" +
    "\uffb1\101\uffb1\104\uffb1\001\002\000\046\002\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\016\uffbb\065\uffbb\066\uffbb\070\uffbb\071" +
    "\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb" +
    "\100\uffbb\101\uffbb\104\uffbb\001\002\000\044\011\073\017" +
    "\122\020\111\040\072\042\102\043\114\044\120\045\101" +
    "\046\100\056\121\057\112\060\117\061\110\062\077\063" +
    "\113\102\307\104\115\001\002\000\004\104\277\001\002" +
    "\000\004\102\274\001\002\000\004\104\063\001\002\000" +
    "\006\102\uffd5\103\272\001\002\000\004\102\271\001\002" +
    "\000\006\102\uffd7\103\267\001\002\000\042\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\016\uffe7\065\uffe7\066\uffe7" +
    "\067\uffe7\070\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\101" +
    "\uffe7\104\uffe7\001\002\000\006\102\uffd6\103\263\001\002" +
    "\000\012\013\065\041\064\102\uffd0\103\uffd0\001\002\000" +
    "\042\011\073\017\122\020\111\040\072\042\102\043\114" +
    "\044\120\045\101\046\100\056\260\057\112\060\257\061" +
    "\110\062\077\063\113\104\115\001\002\000\042\011\073" +
    "\017\122\020\111\040\072\042\102\043\114\044\120\045" +
    "\101\046\100\056\121\057\112\060\117\061\110\062\077" +
    "\063\113\104\115\001\002\000\012\013\065\041\067\102" +
    "\uffcd\103\uffcd\001\002\000\044\011\073\015\231\017\122" +
    "\020\111\040\072\042\102\043\114\044\120\045\101\046" +
    "\100\056\121\057\112\060\117\061\110\062\077\063\113" +
    "\104\115\001\002\000\010\041\071\102\uffca\103\uffca\001" +
    "\002\000\044\011\073\015\076\017\122\020\111\040\072" +
    "\042\102\043\114\044\120\045\101\046\100\056\121\057" +
    "\112\060\117\061\110\062\077\063\113\104\115\001\002" +
    "\000\022\011\247\056\121\057\112\060\117\061\110\062" +
    "\077\063\113\104\115\001\002\000\042\011\073\017\122" +
    "\020\111\040\072\042\102\043\114\044\120\045\101\046" +
    "\100\056\121\057\112\060\117\061\110\062\077\063\113" +
    "\104\115\001\002\000\044\017\147\020\136\021\141\022" +
    "\131\023\144\024\133\025\135\030\134\031\145\032\137" +
    "\033\146\034\140\035\142\036\143\037\132\102\uffcc\103" +
    "\uffcc\001\002\000\006\102\uffcb\103\uffcb\001\002\000\004" +
    "\015\231\001\002\000\052\012\uff34\014\uff34\016\uff34\017" +
    "\uff34\020\uff34\021\uff34\022\uff34\023\uff34\024\uff34\025\uff34" +
    "\030\uff34\031\uff34\032\uff34\033\uff34\034\uff34\035\uff34\036" +
    "\uff34\037\uff34\102\uff34\103\uff34\001\002\000\004\011\223" +
    "\001\002\000\004\011\223\001\002\000\004\011\166\001" +
    "\002\000\004\054\211\001\002\000\052\012\uff38\014\uff38" +
    "\016\uff38\017\uff38\020\uff38\021\uff38\022\uff38\023\uff38\024" +
    "\uff38\025\uff38\030\uff38\031\uff38\032\uff38\033\uff38\034\uff38" +
    "\035\uff38\036\uff38\037\uff38\102\uff38\103\uff38\001\002\000" +
    "\052\012\uff8d\014\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d" +
    "\022\uff8d\023\uff8d\024\uff8d\025\uff8d\030\uff8d\031\uff8d\032" +
    "\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\102\uff8d" +
    "\103\uff8d\001\002\000\052\012\uffa4\014\uffa4\016\uffa4\017" +
    "\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\102\uffa4\103\uffa4\001\002\000\052\012\uff8c" +
    "\014\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023" +
    "\uff8c\024\uff8c\025\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c" +
    "\034\uff8c\035\uff8c\036\uff8c\037\uff8c\102\uff8c\103\uff8c\001" +
    "\002\000\052\012\uff2e\014\uff2e\016\uff2e\017\uff2e\020\uff2e" +
    "\021\uff2e\022\uff2e\023\uff2e\024\uff2e\025\uff2e\030\uff2e\031" +
    "\uff2e\032\uff2e\033\uff2e\034\uff2e\035\uff2e\036\uff2e\037\uff2e" +
    "\102\uff2e\103\uff2e\001\002\000\022\011\206\056\121\057" +
    "\112\060\117\061\110\062\077\063\113\104\115\001\002" +
    "\000\052\012\uff30\014\uff30\016\uff30\017\uff30\020\uff30\021" +
    "\uff30\022\uff30\023\uff30\024\uff30\025\uff30\030\uff30\031\uff30" +
    "\032\uff30\033\uff30\034\uff30\035\uff30\036\uff30\037\uff30\102" +
    "\uff30\103\uff30\001\002\000\052\012\uff32\014\uff32\016\uff32" +
    "\017\uff32\020\uff32\021\uff32\022\uff32\023\uff32\024\uff32\025" +
    "\uff32\030\uff32\031\uff32\032\uff32\033\uff32\034\uff32\035\uff32" +
    "\036\uff32\037\uff32\102\uff32\103\uff32\001\002\000\004\011" +
    "\166\001\002\000\056\011\174\012\uff35\013\065\014\uff35" +
    "\016\uff35\017\uff35\020\uff35\021\uff35\022\uff35\023\uff35\024" +
    "\uff35\025\uff35\030\uff35\031\uff35\032\uff35\033\uff35\034\uff35" +
    "\035\uff35\036\uff35\037\uff35\102\uff35\103\uff35\001\002\000" +
    "\052\012\uff33\014\uff33\016\uff33\017\uff33\020\uff33\021\uff33" +
    "\022\uff33\023\uff33\024\uff33\025\uff33\030\uff33\031\uff33\032" +
    "\uff33\033\uff33\034\uff33\035\uff33\036\uff33\037\uff33\102\uff33" +
    "\103\uff33\001\002\000\052\012\uff2f\014\uff2f\016\uff2f\017" +
    "\uff2f\020\uff2f\021\uff2f\022\uff2f\023\uff2f\024\uff2f\025\uff2f" +
    "\030\uff2f\031\uff2f\032\uff2f\033\uff2f\034\uff2f\035\uff2f\036" +
    "\uff2f\037\uff2f\102\uff2f\103\uff2f\001\002\000\004\011\166" +
    "\001\002\000\052\012\uff31\014\uff31\016\uff31\017\uff31\020" +
    "\uff31\021\uff31\022\uff31\023\uff31\024\uff31\025\uff31\030\uff31" +
    "\031\uff31\032\uff31\033\uff31\034\uff31\035\uff31\036\uff31\037" +
    "\uff31\102\uff31\103\uff31\001\002\000\022\011\125\056\121" +
    "\057\112\060\117\061\110\062\077\063\113\104\115\001" +
    "\002\000\052\012\uffa3\014\uffa3\016\uffa3\017\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\030\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\102\uffa3\103\uffa3\001\002\000\052\012\uff91\014\uff91\016" +
    "\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91" +
    "\025\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035" +
    "\uff91\036\uff91\037\uff91\102\uff91\103\uff91\001\002\000\042" +
    "\011\073\017\122\020\111\040\072\042\102\043\114\044" +
    "\120\045\101\046\100\056\121\057\112\060\117\061\110" +
    "\062\077\063\113\104\115\001\002\000\040\017\147\020" +
    "\136\021\141\022\131\023\144\024\133\025\135\030\134" +
    "\031\145\032\137\033\146\034\140\035\142\036\143\037" +
    "\132\001\002\000\042\012\130\017\uffa3\020\uffa3\021\uffa3" +
    "\022\uffa3\023\uffa3\024\uffa3\025\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\001\002" +
    "\000\052\012\uff90\014\uff90\016\uff90\017\uff90\020\uff90\021" +
    "\uff90\022\uff90\023\uff90\024\uff90\025\uff90\030\uff90\031\uff90" +
    "\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\102" +
    "\uff90\103\uff90\001\002\000\042\011\073\017\122\020\111" +
    "\040\072\042\102\043\114\044\120\045\101\046\100\056" +
    "\121\057\112\060\117\061\110\062\077\063\113\104\115" +
    "\001\002\000\042\011\073\017\122\020\111\040\072\042" +
    "\102\043\114\044\120\045\101\046\100\056\121\057\112" +
    "\060\117\061\110\062\077\063\113\104\115\001\002\000" +
    "\052\012\uff94\014\uff94\016\uff94\017\uff94\020\uff94\021\uff94" +
    "\022\uff94\023\uff94\024\uff94\025\uff94\030\uff94\031\uff94\032" +
    "\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\102\uff94" +
    "\103\uff94\001\002\000\042\011\073\017\122\020\111\040" +
    "\072\042\102\043\114\044\120\045\101\046\100\056\121" +
    "\057\112\060\117\061\110\062\077\063\113\104\115\001" +
    "\002\000\052\012\uff95\014\uff95\016\uff95\017\uff95\020\uff95" +
    "\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\030\uff95\031" +
    "\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95" +
    "\102\uff95\103\uff95\001\002\000\042\011\073\017\122\020" +
    "\111\040\072\042\102\043\114\044\120\045\101\046\100" +
    "\056\121\057\112\060\117\061\110\062\077\063\113\104" +
    "\115\001\002\000\042\011\073\017\122\020\111\040\072" +
    "\042\102\043\114\044\120\045\101\046\100\056\121\057" +
    "\112\060\117\061\110\062\077\063\113\104\115\001\002" +
    "\000\042\011\073\017\122\020\111\040\072\042\102\043" +
    "\114\044\120\045\101\046\100\056\121\057\112\060\117" +
    "\061\110\062\077\063\113\104\115\001\002\000\042\011" +
    "\073\017\122\020\111\040\072\042\102\043\114\044\120" +
    "\045\101\046\100\056\121\057\112\060\117\061\110\062" +
    "\077\063\113\104\115\001\002\000\042\011\073\017\122" +
    "\020\111\040\072\042\102\043\114\044\120\045\101\046" +
    "\100\056\121\057\112\060\117\061\110\062\077\063\113" +
    "\104\115\001\002\000\042\011\073\017\122\020\111\040" +
    "\072\042\102\043\114\044\120\045\101\046\100\056\121" +
    "\057\112\060\117\061\110\062\077\063\113\104\115\001" +
    "\002\000\042\011\073\017\122\020\111\040\072\042\102" +
    "\043\114\044\120\045\101\046\100\056\121\057\112\060" +
    "\117\061\110\062\077\063\113\104\115\001\002\000\042" +
    "\011\073\017\122\020\111\040\072\042\102\043\114\044" +
    "\120\045\101\046\100\056\121\057\112\060\117\061\110" +
    "\062\077\063\113\104\115\001\002\000\042\011\073\017" +
    "\122\020\111\040\072\042\102\043\114\044\120\045\101" +
    "\046\100\056\121\057\112\060\117\061\110\062\077\063" +
    "\113\104\115\001\002\000\042\011\073\017\122\020\111" +
    "\040\072\042\102\043\114\044\120\045\101\046\100\056" +
    "\121\057\112\060\117\061\110\062\077\063\113\104\115" +
    "\001\002\000\052\012\uffa0\014\uffa0\016\uffa0\017\uffa0\020" +
    "\uffa0\021\141\022\131\023\144\024\133\025\135\030\uffa0" +
    "\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\102\uffa0\103\uffa0\001\002\000\052\012\uff9c\014\uff9c" +
    "\016\uff9c\017\147\020\136\021\141\022\131\023\144\024" +
    "\133\025\135\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c" +
    "\035\uff9c\036\uff9c\037\uff9c\102\uff9c\103\uff9c\001\002\000" +
    "\052\012\uffa2\014\uffa2\016\uffa2\017\147\020\136\021\141" +
    "\022\131\023\144\024\133\025\135\030\uffa2\031\uffa2\032" +
    "\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\102\uffa2" +
    "\103\uffa2\001\002\000\052\012\uff98\014\uff98\016\uff98\017" +
    "\uff98\020\uff98\021\141\022\131\023\uff98\024\133\025\135" +
    "\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036" +
    "\uff98\037\uff98\102\uff98\103\uff98\001\002\000\052\012\uff96" +
    "\014\uff96\016\uff96\017\147\020\136\021\141\022\131\023" +
    "\144\024\133\025\135\030\134\031\145\032\137\033\146" +
    "\034\140\035\142\036\uff96\037\uff96\102\uff96\103\uff96\001" +
    "\002\000\052\012\uff9b\014\uff9b\016\uff9b\017\147\020\136" +
    "\021\141\022\131\023\144\024\133\025\135\030\uff9b\031" +
    "\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b" +
    "\102\uff9b\103\uff9b\001\002\000\052\012\uff9e\014\uff9e\016" +
    "\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\133" +
    "\025\135\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035" +
    "\uff9e\036\uff9e\037\uff9e\102\uff9e\103\uff9e\001\002\000\052" +
    "\012\uff99\014\uff99\016\uff99\017\147\020\136\021\141\022" +
    "\131\023\144\024\133\025\135\030\uff99\031\uff99\032\uff99" +
    "\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\102\uff99\103" +
    "\uff99\001\002\000\052\012\uff9a\014\uff9a\016\uff9a\017\147" +
    "\020\136\021\141\022\131\023\144\024\133\025\135\030" +
    "\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\102\uff9a\103\uff9a\001\002\000\052\012\uff9f\014" +
    "\uff9f\016\uff9f\017\uff9f\020\uff9f\021\141\022\131\023\144" +
    "\024\133\025\135\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034" +
    "\uff9f\035\uff9f\036\uff9f\037\uff9f\102\uff9f\103\uff9f\001\002" +
    "\000\052\012\uffa1\014\uffa1\016\uffa1\017\147\020\136\021" +
    "\141\022\131\023\144\024\133\025\135\030\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\102" +
    "\uffa1\103\uffa1\001\002\000\052\012\uff97\014\uff97\016\uff97" +
    "\017\147\020\136\021\141\022\131\023\144\024\133\025" +
    "\135\030\134\031\145\032\137\033\146\034\140\035\142" +
    "\036\uff97\037\uff97\102\uff97\103\uff97\001\002\000\052\012" +
    "\uff9d\014\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d" +
    "\023\uff9d\024\133\025\135\030\uff9d\031\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\102\uff9d\103\uff9d" +
    "\001\002\000\052\012\uff3c\014\uff3c\016\uff3c\017\uff3c\020" +
    "\uff3c\021\uff3c\022\uff3c\023\uff3c\024\uff3c\025\uff3c\030\uff3c" +
    "\031\uff3c\032\uff3c\033\uff3c\034\uff3c\035\uff3c\036\uff3c\037" +
    "\uff3c\102\uff3c\103\uff3c\001\002\000\042\011\073\017\122" +
    "\020\111\040\072\042\102\043\114\044\120\045\101\046" +
    "\100\056\121\057\112\060\117\061\110\062\077\063\113" +
    "\104\115\001\002\000\042\017\147\020\136\021\141\022" +
    "\131\023\144\024\133\025\135\030\134\031\145\032\137" +
    "\033\146\034\140\035\142\036\143\037\132\103\170\001" +
    "\002\000\042\011\073\017\122\020\111\040\072\042\102" +
    "\043\114\044\120\045\101\046\100\056\121\057\112\060" +
    "\117\061\110\062\077\063\113\104\115\001\002\000\042" +
    "\012\172\017\147\020\136\021\141\022\131\023\144\024" +
    "\133\025\135\030\134\031\145\032\137\033\146\034\140" +
    "\035\142\036\143\037\132\001\002\000\052\012\uff4c\014" +
    "\uff4c\016\uff4c\017\uff4c\020\uff4c\021\uff4c\022\uff4c\023\uff4c" +
    "\024\uff4c\025\uff4c\030\uff4c\031\uff4c\032\uff4c\033\uff4c\034" +
    "\uff4c\035\uff4c\036\uff4c\037\uff4c\102\uff4c\103\uff4c\001\002" +
    "\000\054\012\uff36\013\065\014\uff36\016\uff36\017\uff36\020" +
    "\uff36\021\uff36\022\uff36\023\uff36\024\uff36\025\uff36\030\uff36" +
    "\031\uff36\032\uff36\033\uff36\034\uff36\035\uff36\036\uff36\037" +
    "\uff36\102\uff36\103\uff36\001\002\000\044\011\073\012\176" +
    "\017\122\020\111\040\072\042\102\043\114\044\120\045" +
    "\101\046\100\056\121\057\112\060\117\061\110\062\077" +
    "\063\113\104\115\001\002\000\044\012\uff89\017\147\020" +
    "\136\021\141\022\131\023\144\024\133\025\135\030\134" +
    "\031\145\032\137\033\146\034\140\035\142\036\143\037" +
    "\132\103\201\001\002\000\052\012\uff40\014\uff40\016\uff40" +
    "\017\uff40\020\uff40\021\uff40\022\uff40\023\uff40\024\uff40\025" +
    "\uff40\030\uff40\031\uff40\032\uff40\033\uff40\034\uff40\035\uff40" +
    "\036\uff40\037\uff40\102\uff40\103\uff40\001\002\000\004\012" +
    "\200\001\002\000\052\012\uff3f\014\uff3f\016\uff3f\017\uff3f" +
    "\020\uff3f\021\uff3f\022\uff3f\023\uff3f\024\uff3f\025\uff3f\030" +
    "\uff3f\031\uff3f\032\uff3f\033\uff3f\034\uff3f\035\uff3f\036\uff3f" +
    "\037\uff3f\102\uff3f\103\uff3f\001\002\000\042\011\073\017" +
    "\122\020\111\040\072\042\102\043\114\044\120\045\101" +
    "\046\100\056\121\057\112\060\117\061\110\062\077\063" +
    "\113\104\115\001\002\000\004\012\uff88\001\002\000\052" +
    "\012\uff37\014\uff37\016\uff37\017\uff37\020\uff37\021\uff37\022" +
    "\uff37\023\uff37\024\uff37\025\uff37\030\uff37\031\uff37\032\uff37" +
    "\033\uff37\034\uff37\035\uff37\036\uff37\037\uff37\102\uff37\103" +
    "\uff37\001\002\000\052\012\uff3d\014\uff3d\016\uff3d\017\uff3d" +
    "\020\uff3d\021\uff3d\022\uff3d\023\uff3d\024\uff3d\025\uff3d\030" +
    "\uff3d\031\uff3d\032\uff3d\033\uff3d\034\uff3d\035\uff3d\036\uff3d" +
    "\037\uff3d\102\uff3d\103\uff3d\001\002\000\052\012\uff8f\014" +
    "\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f" +
    "\024\uff8f\025\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034" +
    "\uff8f\035\uff8f\036\uff8f\037\uff8f\102\uff8f\103\uff8f\001\002" +
    "\000\042\011\073\017\122\020\111\040\072\042\102\043" +
    "\114\044\120\045\101\046\100\056\121\057\112\060\117" +
    "\061\110\062\077\063\113\104\115\001\002\000\042\012" +
    "\210\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3" +
    "\025\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\001\002\000\052\012\uff8e\014\uff8e" +
    "\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024" +
    "\uff8e\025\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e" +
    "\035\uff8e\036\uff8e\037\uff8e\102\uff8e\103\uff8e\001\002\000" +
    "\004\011\212\001\002\000\042\011\073\017\122\020\111" +
    "\040\072\042\102\043\114\044\120\045\101\046\100\056" +
    "\121\057\112\060\117\061\110\062\077\063\113\104\115" +
    "\001\002\000\042\012\214\017\147\020\136\021\141\022" +
    "\131\023\144\024\133\025\135\030\134\031\145\032\137" +
    "\033\146\034\140\035\142\036\143\037\132\001\002\000" +
    "\004\055\215\001\002\000\004\011\216\001\002\000\042" +
    "\011\073\017\122\020\111\040\072\042\102\043\114\044" +
    "\120\045\101\046\100\056\121\057\112\060\117\061\110" +
    "\062\077\063\113\104\115\001\002\000\042\012\220\017" +
    "\147\020\136\021\141\022\131\023\144\024\133\025\135" +
    "\030\134\031\145\032\137\033\146\034\140\035\142\036" +
    "\143\037\132\001\002\000\052\012\uff39\014\uff39\016\uff39" +
    "\017\uff39\020\uff39\021\uff39\022\uff39\023\uff39\024\uff39\025" +
    "\uff39\030\uff39\031\uff39\032\uff39\033\uff39\034\uff39\035\uff39" +
    "\036\uff39\037\uff39\102\uff39\103\uff39\001\002\000\052\012" +
    "\uff3e\014\uff3e\016\uff3e\017\uff3e\020\uff3e\021\uff3e\022\uff3e" +
    "\023\uff3e\024\uff3e\025\uff3e\030\uff3e\031\uff3e\032\uff3e\033" +
    "\uff3e\034\uff3e\035\uff3e\036\uff3e\037\uff3e\102\uff3e\103\uff3e" +
    "\001\002\000\052\012\uff3b\014\uff3b\016\uff3b\017\uff3b\020" +
    "\uff3b\021\uff3b\022\uff3b\023\uff3b\024\uff3b\025\uff3b\030\uff3b" +
    "\031\uff3b\032\uff3b\033\uff3b\034\uff3b\035\uff3b\036\uff3b\037" +
    "\uff3b\102\uff3b\103\uff3b\001\002\000\042\011\073\017\122" +
    "\020\111\040\072\042\102\043\114\044\120\045\101\046" +
    "\100\056\121\057\112\060\117\061\110\062\077\063\113" +
    "\104\115\001\002\000\042\012\225\017\147\020\136\021" +
    "\141\022\131\023\144\024\133\025\135\030\134\031\145" +
    "\032\137\033\146\034\140\035\142\036\143\037\132\001" +
    "\002\000\052\012\uff4b\014\uff4b\016\uff4b\017\uff4b\020\uff4b" +
    "\021\uff4b\022\uff4b\023\uff4b\024\uff4b\025\uff4b\030\uff4b\031" +
    "\uff4b\032\uff4b\033\uff4b\034\uff4b\035\uff4b\036\uff4b\037\uff4b" +
    "\102\uff4b\103\uff4b\001\002\000\052\012\uff3a\014\uff3a\016" +
    "\uff3a\017\uff3a\020\uff3a\021\uff3a\022\uff3a\023\uff3a\024\uff3a" +
    "\025\uff3a\030\uff3a\031\uff3a\032\uff3a\033\uff3a\034\uff3a\035" +
    "\uff3a\036\uff3a\037\uff3a\102\uff3a\103\uff3a\001\002\000\004" +
    "\016\241\001\002\000\006\016\uff5d\103\237\001\002\000" +
    "\042\011\073\017\122\020\111\040\072\042\102\043\114" +
    "\044\120\045\101\046\100\056\121\057\112\060\117\061" +
    "\110\062\077\063\113\104\115\001\002\000\044\016\uff5a" +
    "\017\147\020\136\021\141\022\131\023\144\024\133\025" +
    "\135\030\134\031\145\032\137\033\146\034\140\035\142" +
    "\036\143\037\132\103\235\001\002\000\004\016\234\001" +
    "\002\000\010\016\uff5b\102\uff5b\103\uff5b\001\002\000\042" +
    "\011\073\017\122\020\111\040\072\042\102\043\114\044" +
    "\120\045\101\046\100\056\121\057\112\060\117\061\110" +
    "\062\077\063\113\104\115\001\002\000\004\016\uff59\001" +
    "\002\000\004\015\231\001\002\000\004\016\uff5c\001\002" +
    "\000\006\102\uff5e\103\uff5e\001\002\000\042\012\245\017" +
    "\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\001\002\000\042\012\244\017\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\030\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\001\002\000\054\012\uff8b\014\uff8b\016\uff8b\017\uff8b\020" +
    "\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\030\uff8b" +
    "\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037" +
    "\uff8b\054\uff73\102\uff8b\103\uff8b\001\002\000\054\012\uff8a" +
    "\014\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023" +
    "\uff8a\024\uff8a\025\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a" +
    "\034\uff8a\035\uff8a\036\uff8a\037\uff8a\054\uff74\102\uff8a\103" +
    "\uff8a\001\002\000\052\012\uff93\014\uff93\016\uff93\017\uff93" +
    "\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93\030" +
    "\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93" +
    "\037\uff93\102\uff93\103\uff93\001\002\000\042\011\073\017" +
    "\122\020\111\040\072\042\102\043\114\044\120\045\101" +
    "\046\100\056\121\057\112\060\117\061\110\062\077\063" +
    "\113\104\115\001\002\000\042\012\251\017\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\030\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\001\002\000\052\012\uff92\014\uff92\016\uff92\017\uff92\020" +
    "\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92\030\uff92" +
    "\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037" +
    "\uff92\102\uff92\103\uff92\001\002\000\044\017\147\020\136" +
    "\021\141\022\131\023\144\024\133\025\135\030\134\031" +
    "\145\032\137\033\146\034\140\035\142\036\143\037\132" +
    "\102\uffcf\103\uffcf\001\002\000\006\102\uffce\103\uffce\001" +
    "\002\000\042\014\255\017\147\020\136\021\141\022\131" +
    "\023\144\024\133\025\135\030\134\031\145\032\137\033" +
    "\146\034\140\035\142\036\143\037\132\001\002\000\070" +
    "\012\uff62\013\uff62\014\uff62\016\uff62\017\uff62\020\uff62\021" +
    "\uff62\022\uff62\023\uff62\024\uff62\025\uff62\030\uff62\031\uff62" +
    "\032\uff62\033\uff62\034\uff62\035\uff62\036\uff62\037\uff62\041" +
    "\uff62\047\uff62\050\uff62\051\uff62\052\uff62\053\uff62\102\uff62" +
    "\103\uff62\001\002\000\044\017\147\020\136\021\141\022" +
    "\131\023\144\024\133\025\135\030\134\031\145\032\137" +
    "\033\146\034\140\035\142\036\143\037\132\102\uffd1\103" +
    "\uffd1\001\002\000\044\017\uff2f\020\uff2f\021\uff2f\022\uff2f" +
    "\023\uff2f\024\uff2f\025\uff2f\030\uff2f\031\uff2f\032\uff2f\033" +
    "\uff2f\034\uff2f\035\uff2f\036\uff2f\037\uff2f\102\262\103\uff2f" +
    "\001\002\000\044\017\uff31\020\uff31\021\uff31\022\uff31\023" +
    "\uff31\024\uff31\025\uff31\030\uff31\031\uff31\032\uff31\033\uff31" +
    "\034\uff31\035\uff31\036\uff31\037\uff31\102\261\103\uff31\001" +
    "\002\000\042\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\016\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\072\uffdd\073" +
    "\uffdd\074\uffdd\075\uffdd\101\uffdd\104\uffdd\001\002\000\042" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\016\uffdc\065" +
    "\uffdc\066\uffdc\067\uffdc\070\uffdc\072\uffdc\073\uffdc\074\uffdc" +
    "\075\uffdc\101\uffdc\104\uffdc\001\002\000\004\104\265\001" +
    "\002\000\004\102\uffd3\001\002\000\012\013\065\041\266" +
    "\102\uffd0\103\uffd0\001\002\000\042\011\073\017\122\020" +
    "\111\040\072\042\102\043\114\044\120\045\101\046\100" +
    "\056\121\057\112\060\117\061\110\062\077\063\113\104" +
    "\115\001\002\000\004\104\265\001\002\000\004\102\uffd4" +
    "\001\002\000\042\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\016\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\072\uffdb" +
    "\073\uffdb\074\uffdb\075\uffdb\101\uffdb\104\uffdb\001\002\000" +
    "\004\104\265\001\002\000\004\102\uffd2\001\002\000\036" +
    "\016\uffaf\065\uffaf\066\uffaf\070\uffaf\071\uffaf\072\uffaf\073" +
    "\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf" +
    "\104\uffaf\001\002\000\042\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\016\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6" +
    "\072\uffe6\073\uffe6\074\uffe6\075\uffe6\101\uffe6\104\uffe6\001" +
    "\002\000\004\102\305\001\002\000\012\013\065\041\300" +
    "\102\uffd0\103\uffd0\001\002\000\042\011\073\017\122\020" +
    "\111\040\072\042\102\043\114\044\120\045\101\046\100" +
    "\056\121\057\302\060\117\061\301\062\077\063\113\104" +
    "\115\001\002\000\044\017\uff2e\020\uff2e\021\uff2e\022\uff2e" +
    "\023\uff2e\024\uff2e\025\uff2e\030\uff2e\031\uff2e\032\uff2e\033" +
    "\uff2e\034\uff2e\035\uff2e\036\uff2e\037\uff2e\102\304\103\uff2e" +
    "\001\002\000\044\017\uff30\020\uff30\021\uff30\022\uff30\023" +
    "\uff30\024\uff30\025\uff30\030\uff30\031\uff30\032\uff30\033\uff30" +
    "\034\uff30\035\uff30\036\uff30\037\uff30\102\303\103\uff30\001" +
    "\002\000\042\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\016\uffda\065\uffda\066\uffda\067\uffda\070\uffda\072\uffda\073" +
    "\uffda\074\uffda\075\uffda\101\uffda\104\uffda\001\002\000\042" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\016\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\070\uffd9\072\uffd9\073\uffd9\074\uffd9" +
    "\075\uffd9\101\uffd9\104\uffd9\001\002\000\042\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\016\uffd8\065\uffd8\066\uffd8" +
    "\067\uffd8\070\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\101" +
    "\uffd8\104\uffd8\001\002\000\042\017\147\020\136\021\141" +
    "\022\131\023\144\024\133\025\135\030\134\031\145\032" +
    "\137\033\146\034\140\035\142\036\143\037\132\102\310" +
    "\001\002\000\036\016\uffad\065\uffad\066\uffad\070\uffad\071" +
    "\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad" +
    "\100\uffad\101\uffad\104\uffad\001\002\000\036\016\uffae\065" +
    "\uffae\066\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae" +
    "\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae\104\uffae\001" +
    "\002\000\046\002\uffbe\005\uffbe\006\uffbe\007\uffbe\016\uffbe" +
    "\065\uffbe\066\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074" +
    "\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe\104\uffbe" +
    "\001\002\000\006\012\uffab\102\uffab\001\002\000\042\011" +
    "\073\017\122\020\111\040\072\042\102\043\114\044\120" +
    "\045\101\046\100\056\121\057\112\060\117\061\110\062" +
    "\077\063\113\104\115\001\002\000\006\012\uffac\102\uffac" +
    "\001\002\000\020\013\065\041\341\047\337\050\343\051" +
    "\340\052\345\053\342\001\002\000\042\011\073\017\122" +
    "\020\111\040\072\042\102\043\114\044\120\045\101\046" +
    "\100\056\121\057\112\060\117\061\110\062\077\063\113" +
    "\104\115\001\002\000\042\011\073\017\122\020\111\040" +
    "\072\042\102\043\114\044\120\045\101\046\100\056\121" +
    "\057\112\060\117\061\110\062\077\063\113\104\115\001" +
    "\002\000\042\011\073\017\122\020\111\040\072\042\102" +
    "\043\114\044\120\045\101\046\100\056\121\057\112\060" +
    "\117\061\110\062\077\063\113\104\115\001\002\000\042" +
    "\011\073\017\122\020\111\040\072\042\102\043\114\044" +
    "\120\045\101\046\100\056\121\057\112\060\117\061\110" +
    "\062\077\063\113\104\115\001\002\000\044\011\073\017" +
    "\122\020\111\040\072\042\102\043\114\044\120\045\101" +
    "\046\100\056\121\057\112\060\117\061\110\062\077\063" +
    "\113\064\323\104\115\001\002\000\004\102\326\001\002" +
    "\000\042\017\147\020\136\021\141\022\131\023\144\024" +
    "\133\025\135\030\134\031\145\032\137\033\146\034\140" +
    "\035\142\036\143\037\132\102\325\001\002\000\036\016" +
    "\uff82\065\uff82\066\uff82\070\uff82\071\uff82\072\uff82\073\uff82" +
    "\074\uff82\075\uff82\076\uff82\077\uff82\100\uff82\101\uff82\104" +
    "\uff82\001\002\000\036\016\uff87\065\uff87\066\uff87\070\uff87" +
    "\071\uff87\072\uff87\073\uff87\074\uff87\075\uff87\076\uff87\077" +
    "\uff87\100\uff87\101\uff87\104\uff87\001\002\000\042\017\147" +
    "\020\136\021\141\022\131\023\144\024\133\025\135\030" +
    "\134\031\145\032\137\033\146\034\140\035\142\036\143" +
    "\037\132\102\330\001\002\000\036\016\uff84\065\uff84\066" +
    "\uff84\070\uff84\071\uff84\072\uff84\073\uff84\074\uff84\075\uff84" +
    "\076\uff84\077\uff84\100\uff84\101\uff84\104\uff84\001\002\000" +
    "\042\017\147\020\136\021\141\022\131\023\144\024\133" +
    "\025\135\030\134\031\145\032\137\033\146\034\140\035" +
    "\142\036\143\037\132\102\332\001\002\000\036\016\uff86" +
    "\065\uff86\066\uff86\070\uff86\071\uff86\072\uff86\073\uff86\074" +
    "\uff86\075\uff86\076\uff86\077\uff86\100\uff86\101\uff86\104\uff86" +
    "\001\002\000\042\017\147\020\136\021\141\022\131\023" +
    "\144\024\133\025\135\030\134\031\145\032\137\033\146" +
    "\034\140\035\142\036\143\037\132\102\334\001\002\000" +
    "\036\016\uff83\065\uff83\066\uff83\070\uff83\071\uff83\072\uff83" +
    "\073\uff83\074\uff83\075\uff83\076\uff83\077\uff83\100\uff83\101" +
    "\uff83\104\uff83\001\002\000\042\017\147\020\136\021\141" +
    "\022\131\023\144\024\133\025\135\030\134\031\145\032" +
    "\137\033\146\034\140\035\142\036\143\037\132\102\336" +
    "\001\002\000\036\016\uff81\065\uff81\066\uff81\070\uff81\071" +
    "\uff81\072\uff81\073\uff81\074\uff81\075\uff81\076\uff81\077\uff81" +
    "\100\uff81\101\uff81\104\uff81\001\002\000\042\011\073\017" +
    "\122\020\111\040\072\042\102\043\114\044\120\045\101" +
    "\046\100\056\121\057\112\060\117\061\110\062\077\063" +
    "\113\104\115\001\002\000\042\011\073\017\122\020\111" +
    "\040\072\042\102\043\114\044\120\045\101\046\100\056" +
    "\121\057\112\060\117\061\110\062\077\063\113\104\115" +
    "\001\002\000\042\011\073\017\122\020\111\040\072\042" +
    "\102\043\114\044\120\045\101\046\100\056\121\057\112" +
    "\060\117\061\110\062\077\063\113\104\115\001\002\000" +
    "\042\011\073\017\122\020\111\040\072\042\102\043\114" +
    "\044\120\045\101\046\100\056\121\057\112\060\117\061" +
    "\110\062\077\063\113\104\115\001\002\000\042\011\073" +
    "\017\122\020\111\040\072\042\102\043\114\044\120\045" +
    "\101\046\100\056\121\057\112\060\117\061\110\062\077" +
    "\063\113\104\115\001\002\000\016\041\353\047\350\050" +
    "\354\051\351\052\355\053\352\001\002\000\042\011\073" +
    "\017\122\020\111\040\072\042\102\043\114\044\120\045" +
    "\101\046\100\056\121\057\112\060\117\061\110\062\077" +
    "\063\113\104\115\001\002\000\042\017\147\020\136\021" +
    "\141\022\131\023\144\024\133\025\135\030\134\031\145" +
    "\032\137\033\146\034\140\035\142\036\143\037\132\102" +
    "\347\001\002\000\036\016\uff80\065\uff80\066\uff80\070\uff80" +
    "\071\uff80\072\uff80\073\uff80\074\uff80\075\uff80\076\uff80\077" +
    "\uff80\100\uff80\101\uff80\104\uff80\001\002\000\042\011\073" +
    "\017\122\020\111\040\072\042\102\043\114\044\120\045" +
    "\101\046\100\056\121\057\112\060\117\061\110\062\077" +
    "\063\113\104\115\001\002\000\042\011\073\017\122\020" +
    "\111\040\072\042\102\043\114\044\120\045\101\046\100" +
    "\056\121\057\112\060\117\061\110\062\077\063\113\104" +
    "\115\001\002\000\042\011\073\017\122\020\111\040\072" +
    "\042\102\043\114\044\120\045\101\046\100\056\121\057" +
    "\112\060\117\061\110\062\077\063\113\104\115\001\002" +
    "\000\042\011\073\017\122\020\111\040\072\042\102\043" +
    "\114\044\120\045\101\046\100\056\121\057\112\060\117" +
    "\061\110\062\077\063\113\104\115\001\002\000\042\011" +
    "\073\017\122\020\111\040\072\042\102\043\114\044\120" +
    "\045\101\046\100\056\121\057\112\060\117\061\110\062" +
    "\077\063\113\104\115\001\002\000\042\011\073\017\122" +
    "\020\111\040\072\042\102\043\114\044\120\045\101\046" +
    "\100\056\121\057\112\060\117\061\110\062\077\063\113" +
    "\104\115\001\002\000\042\017\147\020\136\021\141\022" +
    "\131\023\144\024\133\025\135\030\134\031\145\032\137" +
    "\033\146\034\140\035\142\036\143\037\132\102\357\001" +
    "\002\000\036\016\uff7a\065\uff7a\066\uff7a\070\uff7a\071\uff7a" +
    "\072\uff7a\073\uff7a\074\uff7a\075\uff7a\076\uff7a\077\uff7a\100" +
    "\uff7a\101\uff7a\104\uff7a\001\002\000\042\017\147\020\136" +
    "\021\141\022\131\023\144\024\133\025\135\030\134\031" +
    "\145\032\137\033\146\034\140\035\142\036\143\037\132" +
    "\102\361\001\002\000\036\016\uff78\065\uff78\066\uff78\070" +
    "\uff78\071\uff78\072\uff78\073\uff78\074\uff78\075\uff78\076\uff78" +
    "\077\uff78\100\uff78\101\uff78\104\uff78\001\002\000\042\017" +
    "\147\020\136\021\141\022\131\023\144\024\133\025\135" +
    "\030\134\031\145\032\137\033\146\034\140\035\142\036" +
    "\143\037\132\102\363\001\002\000\036\016\uff76\065\uff76" +
    "\066\uff76\070\uff76\071\uff76\072\uff76\073\uff76\074\uff76\075" +
    "\uff76\076\uff76\077\uff76\100\uff76\101\uff76\104\uff76\001\002" +
    "\000\042\017\147\020\136\021\141\022\131\023\144\024" +
    "\133\025\135\030\134\031\145\032\137\033\146\034\140" +
    "\035\142\036\143\037\132\102\365\001\002\000\036\016" +
    "\uff75\065\uff75\066\uff75\070\uff75\071\uff75\072\uff75\073\uff75" +
    "\074\uff75\075\uff75\076\uff75\077\uff75\100\uff75\101\uff75\104" +
    "\uff75\001\002\000\042\017\147\020\136\021\141\022\131" +
    "\023\144\024\133\025\135\030\134\031\145\032\137\033" +
    "\146\034\140\035\142\036\143\037\132\102\367\001\002" +
    "\000\036\016\uff79\065\uff79\066\uff79\070\uff79\071\uff79\072" +
    "\uff79\073\uff79\074\uff79\075\uff79\076\uff79\077\uff79\100\uff79" +
    "\101\uff79\104\uff79\001\002\000\042\017\147\020\136\021" +
    "\141\022\131\023\144\024\133\025\135\030\134\031\145" +
    "\032\137\033\146\034\140\035\142\036\143\037\132\102" +
    "\371\001\002\000\036\016\uff77\065\uff77\066\uff77\070\uff77" +
    "\071\uff77\072\uff77\073\uff77\074\uff77\075\uff77\076\uff77\077" +
    "\uff77\100\uff77\101\uff77\104\uff77\001\002\000\042\017\147" +
    "\020\136\021\141\022\131\023\144\024\133\025\135\030" +
    "\134\031\145\032\137\033\146\034\140\035\142\036\143" +
    "\037\132\102\373\001\002\000\036\016\uff7e\065\uff7e\066" +
    "\uff7e\070\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e" +
    "\076\uff7e\077\uff7e\100\uff7e\101\uff7e\104\uff7e\001\002\000" +
    "\042\017\147\020\136\021\141\022\131\023\144\024\133" +
    "\025\135\030\134\031\145\032\137\033\146\034\140\035" +
    "\142\036\143\037\132\102\375\001\002\000\036\016\uff7b" +
    "\065\uff7b\066\uff7b\070\uff7b\071\uff7b\072\uff7b\073\uff7b\074" +
    "\uff7b\075\uff7b\076\uff7b\077\uff7b\100\uff7b\101\uff7b\104\uff7b" +
    "\001\002\000\042\017\147\020\136\021\141\022\131\023" +
    "\144\024\133\025\135\030\134\031\145\032\137\033\146" +
    "\034\140\035\142\036\143\037\132\102\377\001\002\000" +
    "\036\016\uff7c\065\uff7c\066\uff7c\070\uff7c\071\uff7c\072\uff7c" +
    "\073\uff7c\074\uff7c\075\uff7c\076\uff7c\077\uff7c\100\uff7c\101" +
    "\uff7c\104\uff7c\001\002\000\042\017\147\020\136\021\141" +
    "\022\131\023\144\024\133\025\135\030\134\031\145\032" +
    "\137\033\146\034\140\035\142\036\143\037\132\102\u0101" +
    "\001\002\000\036\016\uff7f\065\uff7f\066\uff7f\070\uff7f\071" +
    "\uff7f\072\uff7f\073\uff7f\074\uff7f\075\uff7f\076\uff7f\077\uff7f" +
    "\100\uff7f\101\uff7f\104\uff7f\001\002\000\042\017\147\020" +
    "\136\021\141\022\131\023\144\024\133\025\135\030\134" +
    "\031\145\032\137\033\146\034\140\035\142\036\143\037" +
    "\132\102\u0103\001\002\000\036\016\uff7d\065\uff7d\066\uff7d" +
    "\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d\075\uff7d\076" +
    "\uff7d\077\uff7d\100\uff7d\101\uff7d\104\uff7d\001\002\000\042" +
    "\017\147\020\136\021\141\022\131\023\144\024\133\025" +
    "\135\030\134\031\145\032\137\033\146\034\140\035\142" +
    "\036\143\037\132\102\u0105\001\002\000\036\016\uff85\065" +
    "\uff85\066\uff85\070\uff85\071\uff85\072\uff85\073\uff85\074\uff85" +
    "\075\uff85\076\uff85\077\uff85\100\uff85\101\uff85\104\uff85\001" +
    "\002\000\026\015\023\065\033\066\025\070\041\072\042" +
    "\073\036\074\037\075\024\101\052\104\046\001\002\000" +
    "\042\011\073\017\122\020\111\040\072\042\102\043\114" +
    "\044\120\045\101\046\100\056\121\057\112\060\117\061" +
    "\110\062\077\063\113\104\115\001\002\000\042\012\u010b" +
    "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4" +
    "\036\uffa4\037\uffa4\001\002\000\042\012\u010a\017\uffa3\020" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037" +
    "\uffa3\001\002\000\030\015\uff73\065\uff73\066\uff73\070\uff73" +
    "\072\uff73\073\uff73\074\uff73\075\uff73\101\uff73\102\uff73\104" +
    "\uff73\001\002\000\030\015\uff74\065\uff74\066\uff74\070\uff74" +
    "\072\uff74\073\uff74\074\uff74\075\uff74\101\uff74\102\uff74\104" +
    "\uff74\001\002\000\036\016\uff6f\065\uff6f\066\uff6f\070\uff6f" +
    "\071\uff6f\072\uff6f\073\uff6f\074\uff6f\075\uff6f\076\uff6f\077" +
    "\uff6f\100\uff6f\101\uff6f\104\uff6f\001\002\000\036\016\uff70" +
    "\065\uff70\066\uff70\070\uff70\071\uff70\072\uff70\073\uff70\074" +
    "\uff70\075\uff70\076\uff70\077\uff70\100\uff70\101\uff70\104\uff70" +
    "\001\002\000\026\015\023\065\033\066\025\070\041\072" +
    "\042\073\036\074\037\075\024\101\052\104\046\001\002" +
    "\000\036\016\uff6a\065\uff6a\066\uff6a\070\uff6a\071\u0114\072" +
    "\uff6a\073\uff6a\074\uff6a\075\uff6a\076\uff6a\077\uff6a\100\uff6a" +
    "\101\uff6a\104\uff6a\001\002\000\036\016\uff6c\065\uff6c\066" +
    "\uff6c\070\uff6c\071\u0111\072\uff6c\073\uff6c\074\uff6c\075\uff6c" +
    "\076\uff6c\077\uff6c\100\uff6c\101\uff6c\104\uff6c\001\002\000" +
    "\026\015\023\065\033\066\025\070\041\072\042\073\036" +
    "\074\037\075\024\101\052\104\046\001\002\000\036\016" +
    "\uff69\065\uff69\066\uff69\070\uff69\071\uff69\072\uff69\073\uff69" +
    "\074\uff69\075\uff69\076\uff69\077\uff69\100\uff69\101\uff69\104" +
    "\uff69\001\002\000\036\016\uff6b\065\uff6b\066\uff6b\070\uff6b" +
    "\071\uff6b\072\uff6b\073\uff6b\074\uff6b\075\uff6b\076\uff6b\077" +
    "\uff6b\100\uff6b\101\uff6b\104\uff6b\001\002\000\026\015\023" +
    "\065\033\066\025\070\041\072\042\073\036\074\037\075" +
    "\024\101\052\104\046\001\002\000\036\016\uff67\065\uff67" +
    "\066\uff67\070\uff67\071\uff67\072\uff67\073\uff67\074\uff67\075" +
    "\uff67\076\uff67\077\uff67\100\uff67\101\uff67\104\uff67\001\002" +
    "\000\036\016\uff68\065\uff68\066\uff68\070\uff68\071\uff68\072" +
    "\uff68\073\uff68\074\uff68\075\uff68\076\uff68\077\uff68\100\uff68" +
    "\101\uff68\104\uff68\001\002\000\026\015\023\065\033\066" +
    "\025\070\041\072\042\073\036\074\037\075\024\101\052" +
    "\104\046\001\002\000\006\006\u0119\104\u011a\001\002\000" +
    "\004\104\u0130\001\002\000\004\041\u012e\001\002\000\004" +
    "\102\u011c\001\002\000\042\011\073\017\122\020\111\040" +
    "\072\042\102\043\114\044\120\045\101\046\100\056\121" +
    "\057\112\060\117\061\110\062\077\063\113\104\115\001" +
    "\002\000\042\017\147\020\136\021\141\022\131\023\144" +
    "\024\133\025\135\030\134\031\145\032\137\033\146\034" +
    "\140\035\142\036\143\037\132\102\u011e\001\002\000\004" +
    "\104\u0120\001\002\000\004\012\u012d\001\002\000\022\026" +
    "\312\027\314\041\u0123\047\u0122\050\u0125\051\u0121\052\u0126" +
    "\053\u0124\001\002\000\042\011\073\017\122\020\111\040" +
    "\072\042\102\043\114\044\120\045\101\046\100\056\121" +
    "\057\112\060\117\061\110\062\077\063\113\104\115\001" +
    "\002\000\042\011\073\017\122\020\111\040\072\042\102" +
    "\043\114\044\120\045\101\046\100\056\121\057\112\060" +
    "\117\061\110\062\077\063\113\104\115\001\002\000\042" +
    "\011\073\017\122\020\111\040\072\042\102\043\114\044" +
    "\120\045\101\046\100\056\121\057\112\060\117\061\110" +
    "\062\077\063\113\104\115\001\002\000\042\011\073\017" +
    "\122\020\111\040\072\042\102\043\114\044\120\045\101" +
    "\046\100\056\121\057\112\060\117\061\110\062\077\063" +
    "\113\104\115\001\002\000\042\011\073\017\122\020\111" +
    "\040\072\042\102\043\114\044\120\045\101\046\100\056" +
    "\121\057\112\060\117\061\110\062\077\063\113\104\115" +
    "\001\002\000\042\011\073\017\122\020\111\040\072\042" +
    "\102\043\114\044\120\045\101\046\100\056\121\057\112" +
    "\060\117\061\110\062\077\063\113\104\115\001\002\000" +
    "\042\012\uffaa\017\147\020\136\021\141\022\131\023\144" +
    "\024\133\025\135\030\134\031\145\032\137\033\146\034" +
    "\140\035\142\036\143\037\132\001\002\000\042\012\uffa8" +
    "\017\147\020\136\021\141\022\131\023\144\024\133\025" +
    "\135\030\134\031\145\032\137\033\146\034\140\035\142" +
    "\036\143\037\132\001\002\000\042\012\uffa5\017\147\020" +
    "\136\021\141\022\131\023\144\024\133\025\135\030\134" +
    "\031\145\032\137\033\146\034\140\035\142\036\143\037" +
    "\132\001\002\000\042\012\uffa6\017\147\020\136\021\141" +
    "\022\131\023\144\024\133\025\135\030\134\031\145\032" +
    "\137\033\146\034\140\035\142\036\143\037\132\001\002" +
    "\000\042\012\uffa7\017\147\020\136\021\141\022\131\023" +
    "\144\024\133\025\135\030\134\031\145\032\137\033\146" +
    "\034\140\035\142\036\143\037\132\001\002\000\042\012" +
    "\uffa9\017\147\020\136\021\141\022\131\023\144\024\133" +
    "\025\135\030\134\031\145\032\137\033\146\034\140\035" +
    "\142\036\143\037\132\001\002\000\026\015\uff66\065\uff66" +
    "\066\uff66\070\uff66\072\uff66\073\uff66\074\uff66\075\uff66\101" +
    "\uff66\104\uff66\001\002\000\042\011\073\017\122\020\111" +
    "\040\072\042\102\043\114\044\120\045\101\046\100\056" +
    "\121\057\112\060\117\061\110\062\077\063\113\104\115" +
    "\001\002\000\042\017\147\020\136\021\141\022\131\023" +
    "\144\024\133\025\135\030\134\031\145\032\137\033\146" +
    "\034\140\035\142\036\143\037\132\102\uff61\001\002\000" +
    "\004\041\u0131\001\002\000\042\011\073\017\122\020\111" +
    "\040\072\042\102\043\114\044\120\045\101\046\100\056" +
    "\121\057\112\060\117\061\110\062\077\063\113\104\115" +
    "\001\002\000\042\017\147\020\136\021\141\022\131\023" +
    "\144\024\133\025\135\030\134\031\145\032\137\033\146" +
    "\034\140\035\142\036\143\037\132\102\uff60\001\002\000" +
    "\036\016\uff6d\065\uff6d\066\uff6d\070\uff6d\071\uff6d\072\uff6d" +
    "\073\uff6d\074\uff6d\075\uff6d\076\uff6d\077\uff6d\100\uff6d\101" +
    "\uff6d\104\uff6d\001\002\000\036\016\uff6e\065\uff6e\066\uff6e" +
    "\070\uff6e\071\uff6e\072\uff6e\073\uff6e\074\uff6e\075\uff6e\076" +
    "\uff6e\077\uff6e\100\uff6e\101\uff6e\104\uff6e\001\002\000\004" +
    "\072\u013a\001\002\000\004\072\u0137\001\002\000\004\011" +
    "\u0107\001\002\000\004\102\u0139\001\002\000\036\016\uff72" +
    "\065\uff72\066\uff72\070\uff72\071\uff72\072\uff72\073\uff72\074" +
    "\uff72\075\uff72\076\uff72\077\uff72\100\uff72\101\uff72\104\uff72" +
    "\001\002\000\004\011\u0107\001\002\000\004\102\u013c\001" +
    "\002\000\036\016\uff71\065\uff71\066\uff71\070\uff71\071\uff71" +
    "\072\uff71\073\uff71\074\uff71\075\uff71\076\uff71\077\uff71\100" +
    "\uff71\101\uff71\104\uff71\001\002\000\036\016\uffb2\065\uffb2" +
    "\066\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075" +
    "\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\104\uffb2\001\002" +
    "\000\004\104\u013f\001\002\000\004\012\u0140\001\002\000" +
    "\004\102\u0141\001\002\000\036\016\uff5f\065\uff5f\066\uff5f" +
    "\070\uff5f\071\uff5f\072\uff5f\073\uff5f\074\uff5f\075\uff5f\076" +
    "\uff5f\077\uff5f\100\uff5f\101\uff5f\104\uff5f\001\002\000\026" +
    "\016\uff54\065\uff54\066\uff54\070\uff54\072\uff54\073\uff54\074" +
    "\uff54\075\uff54\101\uff54\104\uff54\001\002\000\012\016\uffba" +
    "\076\uffba\077\uffba\100\uffba\001\002\000\004\016\u0146\001" +
    "\002\000\046\002\uffbc\005\uffbc\006\uffbc\007\uffbc\016\uffbc" +
    "\065\uffbc\066\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074" +
    "\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\104\uffbc" +
    "\001\002\000\046\002\uffbd\005\uffbd\006\uffbd\007\uffbd\016" +
    "\uffbd\065\uffbd\066\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd" +
    "\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd\104" +
    "\uffbd\001\002\000\046\011\073\012\u014a\017\122\020\111" +
    "\040\072\042\102\043\114\044\120\045\101\046\100\056" +
    "\121\057\112\060\117\061\110\062\077\063\113\064\u0148" +
    "\104\115\001\002\000\004\012\u014e\001\002\000\042\012" +
    "\u014c\017\147\020\136\021\141\022\131\023\144\024\133" +
    "\025\135\030\134\031\145\032\137\033\146\034\140\035" +
    "\142\036\143\037\132\001\002\000\004\102\u014b\001\002" +
    "\000\036\016\uff63\065\uff63\066\uff63\070\uff63\071\uff63\072" +
    "\uff63\073\uff63\074\uff63\075\uff63\076\uff63\077\uff63\100\uff63" +
    "\101\uff63\104\uff63\001\002\000\004\102\u014d\001\002\000" +
    "\036\016\uff65\065\uff65\066\uff65\070\uff65\071\uff65\072\uff65" +
    "\073\uff65\074\uff65\075\uff65\076\uff65\077\uff65\100\uff65\101" +
    "\uff65\104\uff65\001\002\000\004\102\u014f\001\002\000\036" +
    "\016\uff64\065\uff64\066\uff64\070\uff64\071\uff64\072\uff64\073" +
    "\uff64\074\uff64\075\uff64\076\uff64\077\uff64\100\uff64\101\uff64" +
    "\104\uff64\001\002\000\004\015\u0151\001\002\000\004\077" +
    "\u0154\001\002\000\006\016\u015e\100\u015d\001\002\000\010" +
    "\016\uff47\077\u0154\100\uff47\001\002\000\004\062\u0155\001" +
    "\002\000\004\055\u0156\001\002\000\034\016\uff43\065\033" +
    "\066\025\070\041\072\042\073\036\074\037\075\024\076" +
    "\u0157\077\uff43\100\uff43\101\052\104\046\001\002\000\004" +
    "\102\u015b\001\002\000\012\016\uff44\076\u0159\077\uff44\100" +
    "\uff44\001\002\000\004\102\u015a\001\002\000\010\016\uff46" +
    "\077\uff46\100\uff46\001\002\000\010\016\uff45\077\uff45\100" +
    "\uff45\001\002\000\006\016\uff48\100\uff48\001\002\000\004" +
    "\055\u0161\001\002\000\036\016\uff49\065\uff49\066\uff49\070" +
    "\uff49\071\uff49\072\uff49\073\uff49\074\uff49\075\uff49\076\uff49" +
    "\077\uff49\100\uff49\101\uff49\104\uff49\001\002\000\004\016" +
    "\u0160\001\002\000\036\016\uff4a\065\uff4a\066\uff4a\070\uff4a" +
    "\071\uff4a\072\uff4a\073\uff4a\074\uff4a\075\uff4a\076\uff4a\077" +
    "\uff4a\100\uff4a\101\uff4a\104\uff4a\001\002\000\026\065\033" +
    "\066\025\070\041\072\042\073\036\074\037\075\024\076" +
    "\u0162\101\052\104\046\001\002\000\004\102\u0166\001\002" +
    "\000\004\076\u0164\001\002\000\004\102\u0165\001\002\000" +
    "\004\016\uff42\001\002\000\004\016\uff41\001\002\000\006" +
    "\102\uffc7\103\u016d\001\002\000\004\102\u016c\001\002\000" +
    "\010\041\u016a\102\uffc8\103\uffc8\001\002\000\004\064\u016b" +
    "\001\002\000\006\102\uffc9\103\uffc9\001\002\000\042\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\016\uffe5\065\uffe5" +
    "\066\uffe5\067\uffe5\070\uffe5\072\uffe5\073\uffe5\074\uffe5\075" +
    "\uffe5\101\uffe5\104\uffe5\001\002\000\004\104\u0169\001\002" +
    "\000\004\102\uffc6\001\002\000\004\067\ufff7\001\002\000" +
    "\012\002\000\005\u0177\006\u0175\007\u0172\001\002\000\004" +
    "\104\uff56\001\002\000\012\012\uff2c\013\uff2c\103\uff2c\104" +
    "\uff2c\001\002\000\004\002\uffff\001\002\000\004\015\023" +
    "\001\002\000\012\012\uff2d\013\uff2d\103\uff2d\104\uff2d\001" +
    "\002\000\004\104\u017a\001\002\000\004\104\uff55\001\002" +
    "\000\012\002\uffe8\005\u0177\006\u0175\007\u0172\001\002\000" +
    "\004\002\uffe9\001\002\000\004\011\u017b\001\002\000\010" +
    "\006\u0175\007\u0172\012\u017c\001\002\000\004\015\uff57\001" +
    "\002\000\004\104\u0180\001\002\000\004\012\u017f\001\002" +
    "\000\004\015\uff58\001\002\000\010\012\uff4d\013\065\103" +
    "\u0181\001\002\000\006\006\u0175\007\u0172\001\002\000\010" +
    "\012\uff4e\013\065\103\u0183\001\002\000\006\006\u0175\007" +
    "\u0172\001\002\000\006\012\uff4f\103\u0185\001\002\000\006" +
    "\006\u0175\007\u0172\001\002\000\004\012\uff50\001\002\000" +
    "\004\012\uff51\001\002\000\004\012\uff52\001\002\000\012" +
    "\002\uffde\005\uffde\006\uffde\007\uffde\001\002\000\004\011" +
    "\u018b\001\002\000\010\006\u0175\007\u0172\012\u018c\001\002" +
    "\000\004\102\u0199\001\002\000\004\012\u0197\001\002\000" +
    "\010\012\uffea\013\065\103\u018f\001\002\000\006\006\u0175" +
    "\007\u0172\001\002\000\010\012\uffeb\013\065\103\u0191\001" +
    "\002\000\006\006\u0175\007\u0172\001\002\000\006\012\uffec" +
    "\103\u0193\001\002\000\006\006\u0175\007\u0172\001\002\000" +
    "\004\012\uffee\001\002\000\004\012\uffed\001\002\000\004" +
    "\012\uffef\001\002\000\004\102\u0198\001\002\000\016\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\067\ufff1\001\002" +
    "\000\016\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\067" +
    "\ufff0\001\002\000\004\067\ufff6\001\002\000\004\067\ufff8" +
    "\001\002\000\004\104\u01b5\001\002\000\004\104\u01a0\001" +
    "\002\000\006\102\uffc5\103\u01b0\001\002\000\004\102\u01af" +
    "\001\002\000\006\013\065\041\u01a1\001\002\000\042\011" +
    "\073\017\122\020\111\040\072\042\102\043\114\044\120" +
    "\045\101\046\100\056\u01ac\057\112\060\u01ab\061\110\062" +
    "\077\063\113\104\115\001\002\000\006\013\065\041\u01a3" +
    "\001\002\000\044\011\073\015\231\017\122\020\111\040" +
    "\072\042\102\043\114\044\120\045\101\046\100\056\121" +
    "\057\112\060\117\061\110\062\077\063\113\104\115\001" +
    "\002\000\004\041\u01a5\001\002\000\044\011\073\015\076" +
    "\017\122\020\111\040\072\042\102\043\114\044\120\045" +
    "\101\046\100\056\121\057\112\060\117\061\110\062\077" +
    "\063\113\104\115\001\002\000\044\017\147\020\136\021" +
    "\141\022\131\023\144\024\133\025\135\030\134\031\145" +
    "\032\137\033\146\034\140\035\142\036\143\037\132\102" +
    "\uffc0\103\uffc0\001\002\000\006\102\uffbf\103\uffbf\001\002" +
    "\000\044\017\147\020\136\021\141\022\131\023\144\024" +
    "\133\025\135\030\134\031\145\032\137\033\146\034\140" +
    "\035\142\036\143\037\132\102\uffc2\103\uffc2\001\002\000" +
    "\006\102\uffc1\103\uffc1\001\002\000\044\017\147\020\136" +
    "\021\141\022\131\023\144\024\133\025\135\030\134\031" +
    "\145\032\137\033\146\034\140\035\142\036\143\037\132" +
    "\102\uffc3\103\uffc3\001\002\000\044\017\uff2f\020\uff2f\021" +
    "\uff2f\022\uff2f\023\uff2f\024\uff2f\025\uff2f\030\uff2f\031\uff2f" +
    "\032\uff2f\033\uff2f\034\uff2f\035\uff2f\036\uff2f\037\uff2f\102" +
    "\u01ae\103\uff2f\001\002\000\044\017\uff31\020\uff31\021\uff31" +
    "\022\uff31\023\uff31\024\uff31\025\uff31\030\uff31\031\uff31\032" +
    "\uff31\033\uff31\034\uff31\035\uff31\036\uff31\037\uff31\102\u01ad" +
    "\103\uff31\001\002\000\016\004\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\067\uffe2\001\002\000\016\004\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\067\uffe1\001\002\000\016\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\067\uffe4\001\002" +
    "\000\004\104\u01b2\001\002\000\004\102\uffc4\001\002\000" +
    "\006\013\065\041\u01b3\001\002\000\042\011\073\017\122" +
    "\020\111\040\072\042\102\043\114\044\120\045\101\046" +
    "\100\056\121\057\112\060\117\061\110\062\077\063\113" +
    "\104\115\001\002\000\004\102\u01bb\001\002\000\006\013" +
    "\065\041\u01b6\001\002\000\042\011\073\017\122\020\111" +
    "\040\072\042\102\043\114\044\120\045\101\046\100\056" +
    "\121\057\u01b8\060\117\061\u01b7\062\077\063\113\104\115" +
    "\001\002\000\044\017\uff2e\020\uff2e\021\uff2e\022\uff2e\023" +
    "\uff2e\024\uff2e\025\uff2e\030\uff2e\031\uff2e\032\uff2e\033\uff2e" +
    "\034\uff2e\035\uff2e\036\uff2e\037\uff2e\102\u01ba\103\uff2e\001" +
    "\002\000\044\017\uff30\020\uff30\021\uff30\022\uff30\023\uff30" +
    "\024\uff30\025\uff30\030\uff30\031\uff30\032\uff30\033\uff30\034" +
    "\uff30\035\uff30\036\uff30\037\uff30\102\u01b9\103\uff30\001\002" +
    "\000\016\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\067" +
    "\uffe0\001\002\000\016\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\067\uffdf\001\002\000\016\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\067\uffe3\001\002\000\014\011\u01bd" +
    "\013\065\041\300\102\uffd0\103\uffd0\001\002\000\010\006" +
    "\u0175\007\u0172\012\u01be\001\002\000\004\102\u01c2\001\002" +
    "\000\004\012\u01c0\001\002\000\004\102\u01c1\001\002\000" +
    "\016\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\067\ufff3" +
    "\001\002\000\016\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\067\ufff2\001\002\000\004\002\001\001\002\000\004" +
    "\002\ufffe\001\002\000\014\011\u01c6\013\065\041\064\102" +
    "\uffd0\103\uffd0\001\002\000\010\006\u0175\007\u0172\012\u01c7" +
    "\001\002\000\004\102\u01cb\001\002\000\004\012\u01c9\001" +
    "\002\000\004\102\u01ca\001\002\000\016\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\067\ufff5\001\002\000\016\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\067\ufff4\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c9\000\016\002\005\003\004\017\011\053\013\054" +
    "\010\055\014\001\001\000\014\012\057\013\061\014\055" +
    "\056\060\060\056\001\001\000\014\007\u0177\010\u0173\011" +
    "\u01c3\047\u0170\050\u0175\001\001\000\002\001\001\000\014" +
    "\012\057\013\061\014\055\057\274\060\275\001\001\000" +
    "\002\001\001\000\012\017\011\053\u019a\054\010\055\014" +
    "\001\001\000\012\017\011\053\u0199\054\010\055\014\001" +
    "\001\000\002\001\001\000\004\003\u016f\001\001\000\012" +
    "\017\011\053\u016e\054\010\055\014\001\001\000\006\016" +
    "\u0166\066\u0167\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\021\001\001\000\002\001\001\000\036\006" +
    "\027\021\037\022\033\023\034\024\026\025\042\026\044" +
    "\027\043\033\047\034\031\041\053\052\025\054\030\071" +
    "\046\001\001\000\004\042\u014f\001\001\000\002\001\001" +
    "\000\032\006\027\021\037\022\033\023\034\024\026\025" +
    "\042\026\044\027\043\033\047\034\031\041\053\071\u0143" +
    "\001\001\000\002\001\001\000\032\006\027\021\037\022" +
    "\033\023\034\024\026\025\042\026\044\027\043\033\047" +
    "\034\031\041\053\071\u0142\001\001\000\006\052\u0141\054" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\006\u0134\021\037\022" +
    "\033\023\034\024\026\025\042\026\044\027\043\033\047" +
    "\034\031\041\053\051\u0135\001\001\000\004\072\u0116\001" +
    "\001\000\002\001\001\000\004\042\u010d\001\001\000\004" +
    "\042\u0105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\314\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\122\005" +
    "\305\022\103\042\102\043\115\044\104\045\106\046\105" +
    "\001\001\000\014\012\057\013\061\014\055\057\274\060" +
    "\275\001\001\000\002\001\001\000\014\012\057\013\061" +
    "\014\055\056\060\060\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\065\001\001\000\022\004\122\005" +
    "\255\022\103\042\102\043\115\044\104\045\106\046\105" +
    "\001\001\000\022\004\122\005\253\022\103\042\102\043" +
    "\115\044\104\045\106\046\105\001\001\000\004\037\067" +
    "\001\001\000\024\004\122\005\251\022\103\036\252\042" +
    "\102\043\115\044\104\045\106\046\105\001\001\000\002" +
    "\001\001\000\024\004\122\005\073\022\103\035\074\042" +
    "\102\043\115\044\104\045\106\046\105\001\001\000\010" +
    "\022\103\043\115\046\245\001\001\000\022\004\242\005" +
    "\125\022\103\042\102\043\115\044\104\045\106\046\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\227\065\226\001\001\000\002\001\001\000\004\063\225" +
    "\001\001\000\004\063\221\001\001\000\004\062\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\103\043\115\046\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\203\001\001\000\004\037" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\164\001\001\000\002\001\001\000\010\022\103\043" +
    "\115\046\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\126\005\125\022\103\042\102\043\115\044" +
    "\104\045\106\046\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\122\005\163\022" +
    "\103\042\102\043\115\044\104\045\106\046\105\001\001" +
    "\000\022\004\122\005\162\022\103\042\102\043\115\044" +
    "\104\045\106\046\105\001\001\000\002\001\001\000\022" +
    "\004\122\005\161\022\103\042\102\043\115\044\104\045" +
    "\106\046\105\001\001\000\002\001\001\000\022\004\122" +
    "\005\160\022\103\042\102\043\115\044\104\045\106\046" +
    "\105\001\001\000\022\004\122\005\157\022\103\042\102" +
    "\043\115\044\104\045\106\046\105\001\001\000\022\004" +
    "\122\005\156\022\103\042\102\043\115\044\104\045\106" +
    "\046\105\001\001\000\022\004\122\005\155\022\103\042" +
    "\102\043\115\044\104\045\106\046\105\001\001\000\022" +
    "\004\122\005\154\022\103\042\102\043\115\044\104\045" +
    "\106\046\105\001\001\000\022\004\122\005\153\022\103" +
    "\042\102\043\115\044\104\045\106\046\105\001\001\000" +
    "\022\004\122\005\152\022\103\042\102\043\115\044\104" +
    "\045\106\046\105\001\001\000\022\004\122\005\151\022" +
    "\103\042\102\043\115\044\104\045\106\046\105\001\001" +
    "\000\022\004\122\005\150\022\103\042\102\043\115\044" +
    "\104\045\106\046\105\001\001\000\022\004\122\005\147" +
    "\022\103\042\102\043\115\044\104\045\106\046\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\122\005\166\022\103" +
    "\042\102\043\115\044\104\045\106\046\105\001\001\000" +
    "\002\001\001\000\022\004\122\005\170\022\103\042\102" +
    "\043\115\044\104\045\106\046\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\202\001\001\000\024" +
    "\004\122\005\174\022\103\042\102\043\115\044\104\045" +
    "\106\046\105\061\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\122\005\174\022\103\042\102\043\115\044\104\045\106" +
    "\046\105\061\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\206" +
    "\005\125\022\103\042\102\043\115\044\104\045\106\046" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\122\005\212\022\103\042\102\043" +
    "\115\044\104\045\106\046\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\122\005" +
    "\216\022\103\042\102\043\115\044\104\045\106\046\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\122\005\223\022\103" +
    "\042\102\043\115\044\104\045\106\046\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\122\005\231\022" +
    "\103\042\102\043\115\044\104\045\106\046\105\064\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\122\005\231\022\103\042\102\043\115" +
    "\044\104\045\106\046\105\064\235\001\001\000\002\001" +
    "\001\000\006\036\227\065\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\247\005\125\022\103\042\102\043\115\044\104\045" +
    "\106\046\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\057\013\061\014\055\060\263\001\001\000\002\001\001" +
    "\000\004\037\065\001\001\000\022\004\122\005\255\022" +
    "\103\042\102\043\115\044\104\045\106\046\105\001\001" +
    "\000\012\012\057\013\061\014\055\060\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\057\013\061" +
    "\014\055\060\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\065" +
    "\001\001\000\022\004\122\005\255\022\103\042\102\043" +
    "\115\044\104\045\106\046\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\122\005\u0103\022\103\042\102\043\115\044\104\045\106" +
    "\046\105\001\001\000\002\001\001\000\004\037\343\001" +
    "\001\000\022\004\122\005\334\022\103\042\102\043\115" +
    "\044\104\045\106\046\105\001\001\000\022\004\122\005" +
    "\332\022\103\042\102\043\115\044\104\045\106\046\105" +
    "\001\001\000\022\004\122\005\330\022\103\042\102\043" +
    "\115\044\104\045\106\046\105\001\001\000\022\004\122" +
    "\005\326\022\103\042\102\043\115\044\104\045\106\046" +
    "\105\001\001\000\022\004\122\005\323\022\103\042\102" +
    "\043\115\044\104\045\106\046\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\122\005\u0101\022" +
    "\103\042\102\043\115\044\104\045\106\046\105\001\001" +
    "\000\022\004\122\005\377\022\103\042\102\043\115\044" +
    "\104\045\106\046\105\001\001\000\022\004\122\005\375" +
    "\022\103\042\102\043\115\044\104\045\106\046\105\001" +
    "\001\000\022\004\122\005\373\022\103\042\102\043\115" +
    "\044\104\045\106\046\105\001\001\000\022\004\122\005" +
    "\371\022\103\042\102\043\115\044\104\045\106\046\105" +
    "\001\001\000\002\001\001\000\022\004\122\005\345\022" +
    "\103\042\102\043\115\044\104\045\106\046\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\122\005" +
    "\367\022\103\042\102\043\115\044\104\045\106\046\105" +
    "\001\001\000\022\004\122\005\365\022\103\042\102\043" +
    "\115\044\104\045\106\046\105\001\001\000\022\004\122" +
    "\005\363\022\103\042\102\043\115\044\104\045\106\046" +
    "\105\001\001\000\022\004\122\005\361\022\103\042\102" +
    "\043\115\044\104\045\106\046\105\001\001\000\022\004" +
    "\122\005\357\022\103\042\102\043\115\044\104\045\106" +
    "\046\105\001\001\000\022\004\122\005\355\022\103\042" +
    "\102\043\115\044\104\045\106\046\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\006\u010b\021\037\022\033\023\034" +
    "\024\026\025\042\026\044\027\043\033\047\034\031\041" +
    "\053\051\u010c\001\001\000\022\004\u0108\005\125\022\103" +
    "\042\102\043\115\044\104\045\106\046\u0107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\006" +
    "\u010e\021\037\022\033\023\034\024\026\025\042\026\044" +
    "\027\043\033\047\034\031\041\053\051\u010f\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\006\u0111\021\037" +
    "\022\033\023\034\024\026\025\042\026\044\027\043\033" +
    "\047\034\031\041\053\051\u0112\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\006\u0114\021\037\022\033\023" +
    "\034\024\026\025\042\026\044\027\043\033\047\034\031" +
    "\041\053\051\u0115\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\006\u0132\021\037\022\033\023\034\024\026" +
    "\025\042\026\044\027\043\033\047\034\031\041\053\051" +
    "\u0133\001\001\000\004\040\u011a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\122\005" +
    "\u011c\022\103\042\102\043\115\044\104\045\106\046\105" +
    "\001\001\000\002\001\001\000\004\041\u011e\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\122\005\u012b" +
    "\022\103\042\102\043\115\044\104\045\106\046\105\001" +
    "\001\000\022\004\122\005\u012a\022\103\042\102\043\115" +
    "\044\104\045\106\046\105\001\001\000\022\004\122\005" +
    "\u0129\022\103\042\102\043\115\044\104\045\106\046\105" +
    "\001\001\000\022\004\122\005\u0128\022\103\042\102\043" +
    "\115\044\104\045\106\046\105\001\001\000\022\004\122" +
    "\005\u0127\022\103\042\102\043\115\044\104\045\106\046" +
    "\105\001\001\000\022\004\122\005\u0126\022\103\042\102" +
    "\043\115\044\104\045\106\046\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\122\005\u012e\022\103\042\102\043\115\044\104" +
    "\045\106\046\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\122\005\u0131\022\103\042\102\043\115" +
    "\044\104\045\106\046\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\u0137\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\u013a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\122\005\u0148\022\103" +
    "\042\102\043\115\044\104\045\106\046\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\u0151" +
    "\032\u0152\001\001\000\004\030\u015e\001\001\000\006\031" +
    "\u015b\032\u0152\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\027\021\037\022\033\023\034\024\026\025" +
    "\042\026\044\027\043\033\047\034\031\041\053\071\u0157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\006\027\021\037\022\033\023\034" +
    "\024\026\025\042\026\044\027\043\033\047\034\031\041" +
    "\053\071\u0162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\u0166\066\u016d\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\u0177\010\u0173\011\u0172\047\u0170\050\u0175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\u0188\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\u0177\010\u0173\011\u0178" +
    "\047\u0170\050\u0175\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\u017d\047\u017c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\u0181\001\001\000\006\020\u0187\047\u017c\001\001" +
    "\000\004\037\u0183\001\001\000\006\020\u0186\047\u017c\001" +
    "\001\000\002\001\001\000\006\020\u0185\047\u017c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\047\u018d\070\u018c" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\u018f\001\001\000\006\047\u018d\070\u0195\001\001\000\004" +
    "\037\u0191\001\001\000\006\047\u018d\070\u0194\001\001\000" +
    "\002\001\001\000\006\047\u018d\070\u0193\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\u019d\067\u01b3\001\001\000" +
    "\006\015\u019d\067\u019e\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\u01a1\001\001\000\022\004\122\005" +
    "\u01a9\022\103\042\102\043\115\044\104\045\106\046\105" +
    "\001\001\000\004\037\u01a3\001\001\000\024\004\122\005" +
    "\u01a7\022\103\036\u01a8\042\102\043\115\044\104\045\106" +
    "\046\105\001\001\000\002\001\001\000\024\004\122\005" +
    "\u01a5\022\103\035\u01a6\042\102\043\115\044\104\045\106" +
    "\046\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\u019d\067\u01b0\001\001" +
    "\000\002\001\001\000\004\037\u01a1\001\001\000\022\004" +
    "\122\005\u01a9\022\103\042\102\043\115\044\104\045\106" +
    "\046\105\001\001\000\002\001\001\000\004\037\u01a1\001" +
    "\001\000\022\004\122\005\u01a9\022\103\042\102\043\115" +
    "\044\104\045\106\046\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\065\001\001\000\006\047\u018d\070" +
    "\u01be\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\065\001\001\000\006" +
    "\047\u018d\070\u01c7\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz;
    
    Nodo entero = new Nodo(sym.pr_entero, "entero", 1, 1, null, true);
    Nodo real = new Nodo(sym.pr_real, "real", 1, 1, null, true);

    public void report_error(String message, Object info)
    {   
        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol)
        {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0)
            {                
                m.append(" en la línea " + (s.left + 1));   

                if (s.right >= 0)                    
                    m.append(", columna " + (s.right + 1));
            }
        }

        m.append(" : " + message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info)
    {
        report_error(message, info);
        System.exit(1);
    }

    public Nodo getAST()
    {
        return raiz;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= DEFINICIONVARIABLECAB PROGRAMAPRINCIPAL 
            {
              Nodo RESULT =null;
		int dvcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> dvc = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo pp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo cab = new Nodo(accion.cabecera, accion.acciones[accion.cabecera], 1, 1, dvc, false);
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();
    hijos.add(cab);
    hijos.add(pp);
    RESULT = new Nodo(accion.programa, accion.acciones[accion.programa], 1, 1, hijos, false);
    raiz = RESULT;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= DEFINICIONVARIABLECAB PROGRAMAPRINCIPAL DEFINICIONFUNCION 
            {
              Nodo RESULT =null;
		int dvcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> dvc = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo pp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo df = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo cab = new Nodo(accion.cabecera, accion.acciones[accion.cabecera], 1, 1, dvc, false);
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();
    hijos.add(cab);
    hijos.add(pp);
    hijos.add(df);
    RESULT = new Nodo(accion.programa, accion.acciones[accion.programa], 1, 1, hijos, false);
    raiz = RESULT;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= PROGRAMAPRINCIPAL DEFINICIONFUNCION 
            {
              Nodo RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo pp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo df = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();
    hijos.add(pp);
    hijos.add(df);
    RESULT = new Nodo(accion.programa, accion.acciones[accion.programa], 1, 1, hijos, false);
    raiz = RESULT;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= PROGRAMAPRINCIPAL 
            {
              Nodo RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo pp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();
    hijos.add(pp);
    RESULT = new Nodo(accion.programa, accion.acciones[accion.programa], 1, 1, hijos, false);
    raiz = RESULT;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAMAPRINCIPAL ::= pr_principal par_ab par_ce BLOQUE 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();
    RESULT = new Nodo(accion.programaPrincipal, accion.acciones[accion.programaPrincipal], 1, 1, b, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMAPRINCIPAL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEFINICIONVARIABLECAB ::= DECLARACION 
            {
              ArrayList<Nodo> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = d;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEFINICIONVARIABLECAB ::= DECLARACIONCON 
            {
              ArrayList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = c;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEFINICIONVARIABLECAB ::= DEFINICIONPROTOTIPO 
            {
              ArrayList<Nodo> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> dp = new ArrayList<Nodo>();
    dp.add(p);
    RESULT = dp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEFINICIONVARIABLECAB ::= DECLARACION DEFINICIONVARIABLECAB 
            {
              ArrayList<Nodo> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> r = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    d.addAll(r);
    RESULT = d;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEFINICIONVARIABLECAB ::= DECLARACIONCON DEFINICIONVARIABLECAB 
            {
              ArrayList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> r = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    c.addAll(r);
    RESULT = c;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFINICIONVARIABLECAB ::= DEFINICIONPROTOTIPO DEFINICIONVARIABLECAB 
            {
              ArrayList<Nodo> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> r = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    r.add(0, p);
    RESULT = r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFINICIONPROTOTIPO ::= pr_entero id par_ab PARAMETROPROTOTIPO par_ce punto_coma 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> param = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);

    Nodo parametros = new Nodo(accion.parametroProt, accion.acciones[accion.parametroProt], 1, 1, param, false);
    hijos.add(parametros);
    RESULT = new Nodo(accion.declaracionProt, accion.acciones[accion.declaracionProt], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONPROTOTIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFINICIONPROTOTIPO ::= pr_entero id par_ab par_ce punto_coma 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    ArrayList<Nodo> param = new ArrayList<Nodo>();
    Nodo parametros = new Nodo(accion.parametroProt, accion.acciones[accion.parametroProt], 1, 1, param, false);
    hijos.add(parametros);
    RESULT = new Nodo(accion.declaracionProt, accion.acciones[accion.declaracionProt], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONPROTOTIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEFINICIONPROTOTIPO ::= pr_real id par_ab PARAMETROPROTOTIPO par_ce punto_coma 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> param = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    Nodo parametros = new Nodo(accion.parametroProt, accion.acciones[accion.parametroProt], 1, 1, param, false);
    hijos.add(parametros);
    RESULT = new Nodo(accion.declaracionProt, accion.acciones[accion.declaracionProt], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONPROTOTIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DEFINICIONPROTOTIPO ::= pr_real id par_ab par_ce punto_coma 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    ArrayList<Nodo> param = new ArrayList<Nodo>();
    Nodo parametros = new Nodo(accion.parametroProt, accion.acciones[accion.parametroProt], 1, 1, param, false);
    hijos.add(parametros);
    RESULT = new Nodo(accion.declaracionProt, accion.acciones[accion.declaracionProt], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONPROTOTIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DEFINICIONPROTOTIPO ::= pr_vacio id par_ab PARAMETROPROTOTIPO par_ce punto_coma 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> param = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    Nodo parametros = new Nodo(accion.parametroProt, accion.acciones[accion.parametroProt], 1, 1, param, false);
    hijos.add(parametros);
    RESULT = new Nodo(accion.declaracionProt, accion.acciones[accion.declaracionProt], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONPROTOTIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DEFINICIONPROTOTIPO ::= pr_vacio id par_ab par_ce punto_coma 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    ArrayList<Nodo> param = new ArrayList<Nodo>();
    Nodo parametros = new Nodo(accion.parametroProt, accion.acciones[accion.parametroProt], 1, 1, param, false);
    hijos.add(parametros);
    RESULT = new Nodo(accion.declaracionProt, accion.acciones[accion.declaracionProt], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONPROTOTIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMETROPROTOTIPO ::= TIPONUMERO coma PARAMETROPROTOTIPO 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> param = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    param.add(0, t);
    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETROPROTOTIPO ::= TIPONUMERO INDICE INDICE coma PARAMETROPROTOTIPO 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> param = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i1);
    hijos.add(i2);
    Nodo n = new Nodo(accion.parametroMat, accion.acciones[accion.parametroMat], 1, 1, hijos, false);
    
    param.add(0, n);
    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETROPROTOTIPO ::= TIPONUMERO INDICE coma PARAMETROPROTOTIPO 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> param = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i1);
    Nodo n = new Nodo(accion.parametroVec, accion.acciones[accion.parametroVec], 1, 1, hijos, false);
    
    param.add(0, n);
    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMETROPROTOTIPO ::= TIPONUMERO INDICE INDICE 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> param = new ArrayList<Nodo>();

    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i1);
    hijos.add(i2);
    Nodo n = new Nodo(accion.parametroMat, accion.acciones[accion.parametroMat], 1, 1, hijos, false);
    
    param.add(n);
    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETROPROTOTIPO ::= TIPONUMERO INDICE 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> param = new ArrayList<Nodo>();

    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i1);
    Nodo n = new Nodo(accion.parametroVec, accion.acciones[accion.parametroVec], 1, 1, hijos, false);
    
    param.add(n);
    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETROPROTOTIPO ::= TIPONUMERO 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> param = new ArrayList<Nodo>();
    param.add(t);
    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFINICIONFUNCION ::= DECLARACIONFUNCION DEFINICIONFUNCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONFUNCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEFINICIONFUNCION ::= DECLARACIONFUNCION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONFUNCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= pr_entero DECENTERO 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> e = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    for(int i = 0; i < e.size(); i++)
        e.get(i).getHijos().add(0, t);

    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= pr_real DECREAL 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> r = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    for(int i = 0; i < r.size(); i++)
        r.get(i).getHijos().add(0, t);

    RESULT = r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= pr_cadena DECCADALL punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    for(int i = 0; i < c.size(); i++)
        c.get(i).getHijos().add(0, t);
    
    RESULT = c;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACIONCON ::= pr_const pr_entero DECCONALL punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> e = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    for(int i = 0; i < e.size(); i++)
        e.get(i).getHijos().add(0, t);

    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACIONCON ::= pr_const pr_real DECCONALL punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> r = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    for(int i = 0; i < r.size(); i++)
        r.get(i).getHijos().add(0, t);

    RESULT = r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACIONCON ::= pr_const pr_entero id igual octa_e punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    hijos.add(v);
    Nodo n = new Nodo(accion.declaracionConsSim, accion.acciones[accion.declaracionConsSim], 1, 1, hijos, false);
    
    ArrayList<Nodo> dc = new ArrayList<Nodo> ();
    dc.add(n);
    RESULT = dc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACIONCON ::= pr_const pr_entero id igual hexa_e punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    hijos.add(v);
    Nodo n = new Nodo(accion.declaracionConsSim, accion.acciones[accion.declaracionConsSim], 1, 1, hijos, false);
    
    ArrayList<Nodo> dc = new ArrayList<Nodo> ();
    dc.add(n);
    RESULT = dc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACIONCON ::= pr_const pr_real id igual octa_r punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    hijos.add(v);
    Nodo n = new Nodo(accion.declaracionConsSim, accion.acciones[accion.declaracionConsSim], 1, 1, hijos, false);
    
    ArrayList<Nodo> dc = new ArrayList<Nodo> ();
    dc.add(n);
    RESULT = dc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACIONCON ::= pr_const pr_real id igual hexa_r punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    hijos.add(v);
    Nodo n = new Nodo(accion.declaracionConsSim, accion.acciones[accion.declaracionConsSim], 1, 1, hijos, false);
    
    ArrayList<Nodo> dc = new ArrayList<Nodo> ();
    dc.add(n);
    RESULT = dc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACIONFUNCION ::= DECLARACIONFUNCIONCABECERA BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONFUNCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECENTERO ::= id igual octa_e punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    /* Declaracion con Inicializacion de un entero octal */
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(entero);
    hijos.add(i);
    hijos.add(v);
    Nodo padre = new Nodo(accion.declaracionSimIni, accion.acciones[accion.declaracionSimIni], 1, 1, hijos, false);
    
    ArrayList<Nodo> dec = new ArrayList<Nodo>();
    dec.add(padre);

    RESULT = dec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECENTERO",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECENTERO ::= id igual hexa_e punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    /* Declaracion con Inicializacion de un entero octal */
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(entero);
    hijos.add(i);
    hijos.add(v);
    Nodo padre = new Nodo(accion.declaracionSimIni, accion.acciones[accion.declaracionSimIni], 1, 1, hijos, false);
    
    ArrayList<Nodo> dec = new ArrayList<Nodo>();
    dec.add(padre);

    RESULT = dec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECENTERO",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECENTERO ::= DECALL punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> da = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECENTERO",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECREAL ::= id igual octa_r punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    /* Declaracion con Inicializacion de un entero octal */
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(real);
    hijos.add(i);
    hijos.add(v);
    Nodo padre = new Nodo(accion.declaracionSimIni, accion.acciones[accion.declaracionSimIni], 1, 1, hijos, false);
    
    ArrayList<Nodo> dec = new ArrayList<Nodo>();
    dec.add(padre);

    RESULT = dec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREAL",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECREAL ::= id igual hexa_r punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    /* Declaracion con Inicializacion de un entero octal */
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(real);
    hijos.add(i);
    hijos.add(v);
    Nodo padre = new Nodo(accion.declaracionSimIni, accion.acciones[accion.declaracionSimIni], 1, 1, hijos, false);
    
    ArrayList<Nodo> dec = new ArrayList<Nodo>();
    dec.add(padre);

    RESULT = dec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREAL",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECREAL ::= DECALL punto_coma 
            {
              ArrayList<Nodo> RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> da = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREAL",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECALL ::= DECSIMPLE 
            {
              ArrayList<Nodo> RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ds = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> da = new ArrayList<Nodo>();
    da.add(ds);
    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECALL ::= DECVECT 
            {
              ArrayList<Nodo> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dv = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> da = new ArrayList<Nodo>();
    da.add(dv);
    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECALL ::= DECMAT 
            {
              ArrayList<Nodo> RESULT =null;
		int dmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dm = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> da = new ArrayList<Nodo>();
    da.add(dm);
    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECALL ::= DECSIMPLE coma DECALL 
            {
              ArrayList<Nodo> RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo ds = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> da = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    da.add(0, ds);
    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECALL ::= DECVECT coma DECALL 
            {
              ArrayList<Nodo> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo dv = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> da = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    da.add(0, dv);
    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECALL ::= DECMAT coma DECALL 
            {
              ArrayList<Nodo> RESULT =null;
		int dmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo dm = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> da = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    da.add(0, dm);
    RESULT = da;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECSIMPLE ::= id igual EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(v);
    RESULT = new Nodo(accion.declaracionSimIni, accion.acciones[accion.declaracionSimIni], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECSIMPLE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECSIMPLE ::= id 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    RESULT = new Nodo(accion.declaracionSim, accion.acciones[accion.declaracionSim], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECSIMPLE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECVECT ::= id INDICE igual EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(i1);
    hijos.add(e);
    RESULT = new Nodo(accion.declaracionVecIni, accion.acciones[accion.declaracionVecIni], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECVECT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECVECT ::= id INDICE igual VECTOR 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(i1);
    hijos.add(v);
    RESULT = new Nodo(accion.declaracionVecIni, accion.acciones[accion.declaracionVecIni], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECVECT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECVECT ::= id INDICE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(i1);
    RESULT = new Nodo(accion.declaracionVec, accion.acciones[accion.declaracionVec], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECVECT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECMAT ::= id INDICE INDICE igual EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(i1);
    hijos.add(i2);
    hijos.add(e);
    RESULT = new Nodo(accion.declaracionMatIni, accion.acciones[accion.declaracionMatIni], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECMAT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECMAT ::= id INDICE INDICE igual MATRIZ 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(i1);
    hijos.add(i2);
    hijos.add(m);
    RESULT = new Nodo(accion.declaracionMatIni, accion.acciones[accion.declaracionMatIni], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECMAT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECMAT ::= id INDICE INDICE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(i1);
    hijos.add(i2);
    RESULT = new Nodo(accion.declaracionMat, accion.acciones[accion.declaracionMat], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECMAT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECCAD ::= id igual cadena 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();
    hijos.add(i);
    hijos.add(v);
    RESULT = new Nodo(accion.declaracionSimIni, accion.acciones[accion.declaracionSimIni], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCAD",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECCAD ::= id 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList <Nodo>();
    hijos.add(i);
    RESULT = new Nodo(accion.declaracionSim, accion.acciones[accion.declaracionSim], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCAD",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECCADALL ::= DECCAD 
            {
              ArrayList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> cadenas = new ArrayList <Nodo>();
    cadenas.add(c);
    RESULT = cadenas;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCADALL",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECCADALL ::= DECCAD coma DECCADALL 
            {
              ArrayList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dcaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> dca = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    dca.add(0, c);
    RESULT = dca;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCADALL",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECCONALL ::= DECCON 
            {
              ArrayList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> constantes = new ArrayList <Nodo>();
    constantes.add(c);
    RESULT = constantes;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONALL",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECCONALL ::= DECCON coma DECCONALL 
            {
              ArrayList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dcaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> dca = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    dca.add(0, c);
    RESULT = dca;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONALL",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECCON ::= id igual EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(e);
    RESULT = new Nodo(accion.declaracionConsSim, accion.acciones[accion.declaracionConsSim], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCON",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECCON ::= id INDICE igual EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(i1);
    hijos.add(e);
    RESULT = new Nodo(accion.declaracionConsVec, accion.acciones[accion.declaracionConsVec], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCON",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECCON ::= id INDICE igual VECTOR 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(i1);
    hijos.add(v);
    RESULT = new Nodo(accion.declaracionConsVec, accion.acciones[accion.declaracionConsVec], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCON",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECCON ::= id INDICE INDICE igual EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(i1);
    hijos.add(i2);
    hijos.add(e);
    RESULT = new Nodo(accion.declaracionConsMat, accion.acciones[accion.declaracionConsMat], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCON",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECCON ::= id INDICE INDICE igual MATRIZ 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(i1);
    hijos.add(i2);
    hijos.add(m);
    RESULT = new Nodo(accion.declaracionConsMat, accion.acciones[accion.declaracionConsMat], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCON",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BLOQUE ::= ll_ab NSENTENCIA ll_ce 
            {
              ArrayList<Nodo> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> s = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Nodo declaracionVar = new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], 1, 1, (new ArrayList<Nodo>()),false);
    Nodo bloque = new Nodo(accion.bloque, accion.acciones[accion.bloque], 1, 1, s, false);
    ArrayList<Nodo> hijosProgPrin = new ArrayList<Nodo>();
    hijosProgPrin.add(declaracionVar);
    hijosProgPrin.add(bloque);
    RESULT = hijosProgPrin;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BLOQUE ::= ll_ab DEFINICIONVARIABLE NSENTENCIA ll_ce 
            {
              ArrayList<Nodo> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> dv = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> s = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Nodo declaracionVar = new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], 1, 1, dv,false);
    Nodo bloque = new Nodo(accion.bloque, accion.acciones[accion.bloque], 1, 1, s, false);
    ArrayList<Nodo> hijosProgPrin = new ArrayList<Nodo>();
    hijosProgPrin.add(declaracionVar);
    hijosProgPrin.add(bloque);
    RESULT = hijosProgPrin;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BLOQUE ::= ll_ab DEFINICIONVARIABLE ll_ce 
            {
              ArrayList<Nodo> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> dv = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Nodo declaracionVar = new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], 1, 1, dv,false);
    Nodo bloque = new Nodo(accion.bloque, accion.acciones[accion.bloque], 1, 1, (new ArrayList<Nodo>()), false);
    ArrayList<Nodo> hijosProgPrin = new ArrayList<Nodo>();
    hijosProgPrin.add(declaracionVar);
    hijosProgPrin.add(bloque);
    RESULT = hijosProgPrin;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BLOQUE ::= ll_ab ll_ce 
            {
              ArrayList<Nodo> RESULT =null;
		
    Nodo declaracionVar = new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], 1, 1, (new ArrayList<Nodo>()),false);
    Nodo bloque = new Nodo(accion.bloque, accion.acciones[accion.bloque], 1, 1, (new ArrayList<Nodo>()), false);
    ArrayList<Nodo> hijosProgPrin = new ArrayList<Nodo>();
    hijosProgPrin.add(declaracionVar);
    hijosProgPrin.add(bloque);
    RESULT = hijosProgPrin;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NSENTENCIA ::= SENTENCIA NSENTENCIA 
            {
              ArrayList<Nodo> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> sentencias = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    sentencias.add(0, s);
    RESULT = sentencias;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NSENTENCIA",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NSENTENCIA ::= SENTENCIA 
            {
              ArrayList<Nodo> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> sentencias = new ArrayList<Nodo>();
    sentencias.add(s);
    RESULT = sentencias;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NSENTENCIA",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA ::= CONDICIONALHACERMIENTRAS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA ::= CONDICIONALMIENTRAS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA ::= CONDICIONALPARA 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA ::= CONDICIONALSI 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA ::= SENTSELECTOR 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA ::= LLAMADAFUNCION punto_coma 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA ::= ESCRITURA 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA ::= LECTURA 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA ::= ACT punto_coma 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA ::= pr_retornar EXPGEN punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA ::= pr_retornar punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ACT ::= id decr 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    
    ArrayList<Nodo> hijosRes = new ArrayList<Nodo>();
    hijosRes.add(i);
    Nodo uno = new Nodo(sym.numero, "1", 1, 1, null, true);
    hijosRes.add(uno);
    Nodo resta = new Nodo(accion.resta, accion.acciones[accion.resta], 1, 1, hijosRes, false);
    
    hijos.add(resta);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ACT ::= id incr 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    
    ArrayList<Nodo> hijosSum = new ArrayList<Nodo>();
    hijosSum.add(i);
    Nodo uno = new Nodo(sym.numero, "1", 1, 1, null, true);
    hijosSum.add(uno);
    Nodo suma = new Nodo(accion.suma, accion.acciones[accion.suma], 1, 1, hijosSum, false);
    
    hijos.add(suma);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ACT ::= id a_div EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    
    ArrayList<Nodo> hijosDiv = new ArrayList<Nodo>();
    hijosDiv.add(i);
    hijosDiv.add(e);
    Nodo div = new Nodo(accion.division, accion.acciones[accion.division], 1, 1, hijosDiv, false);
    
    hijos.add(div);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ACT ::= id a_prod EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    
    ArrayList<Nodo> hijosProd = new ArrayList<Nodo>();
    hijosProd.add(i);
    hijosProd.add(e);
    Nodo prod = new Nodo(accion.producto, accion.acciones[accion.producto], 1, 1, hijosProd, false);
    
    hijos.add(prod);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ACT ::= id a_resta EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    
    ArrayList<Nodo> hijosRes = new ArrayList<Nodo>();
    hijosRes.add(i);
    hijosRes.add(e);
    Nodo res = new Nodo(accion.resta, accion.acciones[accion.resta], 1, 1, hijosRes, false);
    
    hijos.add(res);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ACT ::= id a_suma EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    
    ArrayList<Nodo> hijosSum = new ArrayList<Nodo>();
    hijosSum.add(i);
    hijosSum.add(e);
    Nodo sum = new Nodo(accion.suma, accion.acciones[accion.suma], 1, 1, hijosSum, false);
    
    hijos.add(sum);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ACT ::= id igual EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(e);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ACT ::= id a_mod EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    
    ArrayList<Nodo> hijosMod = new ArrayList<Nodo>();
    hijosMod.add(i);
    hijosMod.add(e);
    Nodo mod = new Nodo(accion.modulo, accion.acciones[accion.modulo], 1, 1, hijosMod, false);
    
    hijos.add(mod);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPGEN ::= OPERANDO 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = o;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPGEN",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPGEN ::= EXPRESION 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPGEN",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= EXPGEN dif EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.diferente, accion.acciones[accion.diferente], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= EXPGEN ident EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.identico, accion.acciones[accion.identico], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= EXPGEN mas EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.suma, accion.acciones[accion.suma], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= EXPGEN menos EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.resta, accion.acciones[accion.resta], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= EXPGEN prod EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.producto, accion.acciones[accion.producto], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= EXPGEN div EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.division, accion.acciones[accion.division], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= EXPGEN mayor EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.mayor, accion.acciones[accion.mayor], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= EXPGEN mayor_igual EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.mayor_igual, accion.acciones[accion.mayor_igual], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= EXPGEN menor EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.menor, accion.acciones[accion.menor], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= EXPGEN menor_igual EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.menor_igual, accion.acciones[accion.menor_igual], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= EXPGEN mod EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.modulo, accion.acciones[accion.modulo], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= EXPGEN o EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.disyuncion, accion.acciones[accion.disyuncion], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= EXPGEN y EXPGEN 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    RESULT = new Nodo(accion.conjuncion, accion.acciones[accion.conjuncion], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= EXPGEN inv 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    RESULT = new Nodo(accion.inversa, accion.acciones[accion.inversa], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= EXPGEN transp 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    RESULT = new Nodo(accion.transpuesta, accion.acciones[accion.transpuesta], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= neg OPERANDO 
            {
              Nodo RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(o1);
    RESULT = new Nodo(accion.negacion, accion.acciones[accion.negacion], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= neg par_ab EXPRESION par_ce 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    RESULT = new Nodo(accion.negacion, accion.acciones[accion.negacion], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= mas OPERANDO 
            {
              Nodo RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(o1);
    RESULT = new Nodo(accion.positividad, accion.acciones[accion.positividad], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= mas par_ab EXPRESION par_ce 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    RESULT = new Nodo(accion.positividad, accion.acciones[accion.positividad], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= menos OPERANDO 
            {
              Nodo RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(o1);
    RESULT = new Nodo(accion.negatividad, accion.acciones[accion.negatividad], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= menos par_ab EXPRESION par_ce 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    RESULT = new Nodo(accion.negatividad, accion.acciones[accion.negatividad], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= OPERADORFUNCION 
            {
              Nodo RESULT =null;
		int ofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo of = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = of;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= OPERADORCOND 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = op;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= par_ab EXPRESION par_ce 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION ::= par_ab OPERANDO par_ce 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = o;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ARGUMENTO ::= EXPGEN 
            {
              ArrayList<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> arg = new ArrayList<Nodo>();
    arg.add(e);
    RESULT = arg;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ARGUMENTO ::= EXPGEN coma ARGUMENTO 
            {
              ArrayList<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    a.add(0, e);
    RESULT = a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ASIGNACION ::= id igual cadena punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(v);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ASIGNACION ::= id a_div EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    ArrayList<Nodo> hijosDiv = new ArrayList<Nodo>();
    hijosDiv.add(i);
    hijosDiv.add(e);
    Nodo div = new Nodo(accion.division, accion.acciones[accion.division], 1, 1, hijosDiv, false );
    hijos.add(div);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ASIGNACION ::= id a_prod EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    ArrayList<Nodo> hijosProd = new ArrayList<Nodo>();
    hijosProd.add(i);
    hijosProd.add(e);
    Nodo prod = new Nodo(accion.producto, accion.acciones[accion.producto], 1, 1, hijosProd, false );
    hijos.add(prod);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ASIGNACION ::= id a_resta EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    ArrayList<Nodo> hijosRes = new ArrayList<Nodo>();
    hijosRes.add(i);
    hijosRes.add(e);
    Nodo res = new Nodo(accion.resta, accion.acciones[accion.resta], 1, 1, hijosRes, false );
    hijos.add(res);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ASIGNACION ::= id a_suma EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    ArrayList<Nodo> hijosSum = new ArrayList<Nodo>();
    hijosSum.add(i);
    hijosSum.add(e);
    Nodo sum = new Nodo(accion.suma, accion.acciones[accion.suma], 1, 1, hijosSum, false );
    hijos.add(sum);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ASIGNACION ::= id igual EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(e);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ASIGNACION ::= id a_mod EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    ArrayList<Nodo> hijosMod = new ArrayList<Nodo>();
    hijosMod.add(i);
    hijosMod.add(e);
    Nodo mod = new Nodo(accion.modulo, accion.acciones[accion.modulo], 1, 1, hijosMod, false );
    hijos.add(mod);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ASIGNACION ::= id INDICE a_div EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();

    ArrayList<Nodo> hijosVec = new ArrayList<Nodo>();
    hijosVec.add(i);
    hijosVec.add(i1);
    Nodo aVec = new Nodo(accion.accesoVec, accion.acciones[accion.accesoVec], 1, 1, hijosVec, false);
    
    hijos.add(aVec);
    
    ArrayList<Nodo> hijosDiv = new ArrayList<Nodo>();
    hijosDiv.add(aVec);
    hijosDiv.add(e);
    Nodo div = new Nodo(accion.division, accion.acciones[accion.division], 1, 1, hijosDiv, false );

    hijos.add(div);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ASIGNACION ::= id INDICE a_prod EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();

    ArrayList<Nodo> hijosVec = new ArrayList<Nodo>();
    hijosVec.add(i);
    hijosVec.add(i1);
    Nodo aVec = new Nodo(accion.accesoVec, accion.acciones[accion.accesoVec], 1, 1, hijosVec, false);
    
    hijos.add(aVec);
    
    ArrayList<Nodo> hijosProd = new ArrayList<Nodo>();
    hijosProd.add(aVec);
    hijosProd.add(e);
    Nodo prod = new Nodo(accion.producto, accion.acciones[accion.producto], 1, 1, hijosProd, false );

    hijos.add(prod);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ASIGNACION ::= id INDICE a_resta EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();

    ArrayList<Nodo> hijosVec = new ArrayList<Nodo>();
    hijosVec.add(i);
    hijosVec.add(i1);
    Nodo aVec = new Nodo(accion.accesoVec, accion.acciones[accion.accesoVec], 1, 1, hijosVec, false);
    
    hijos.add(aVec);
    
    ArrayList<Nodo> hijosRes = new ArrayList<Nodo>();
    hijosRes.add(aVec);
    hijosRes.add(e);
    Nodo res = new Nodo(accion.resta, accion.acciones[accion.resta], 1, 1, hijosRes, false );

    hijos.add(res);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ASIGNACION ::= id INDICE a_suma EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();

    ArrayList<Nodo> hijosVec = new ArrayList<Nodo>();
    hijosVec.add(i);
    hijosVec.add(i1);
    Nodo aVec = new Nodo(accion.accesoVec, accion.acciones[accion.accesoVec], 1, 1, hijosVec, false);
    
    hijos.add(aVec);
    
    ArrayList<Nodo> hijosSum = new ArrayList<Nodo>();
    hijosSum.add(aVec);
    hijosSum.add(e);
    Nodo sum = new Nodo(accion.suma, accion.acciones[accion.suma], 1, 1, hijosSum, false );

    hijos.add(sum);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ASIGNACION ::= id INDICE igual EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();

    ArrayList<Nodo> hijosVec = new ArrayList<Nodo>();
    hijosVec.add(i);
    hijosVec.add(i1);
    Nodo aVec = new Nodo(accion.accesoVec, accion.acciones[accion.accesoVec], 1, 1, hijosVec, false);
    
    hijos.add(aVec);
    hijos.add(e);

    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ASIGNACION ::= id INDICE a_mod EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();

    ArrayList<Nodo> hijosVec = new ArrayList<Nodo>();
    hijosVec.add(i);
    hijosVec.add(i1);
    Nodo aVec = new Nodo(accion.accesoVec, accion.acciones[accion.accesoVec], 1, 1, hijosVec, false);
    
    hijos.add(aVec);
    
    ArrayList<Nodo> hijosMod = new ArrayList<Nodo>();
    hijosMod.add(aVec);
    hijosMod.add(e);
    Nodo mod = new Nodo(accion.modulo, accion.acciones[accion.modulo], 1, 1, hijosMod, false );

    hijos.add(mod);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ASIGNACION ::= id INDICE INDICE a_div EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();

    ArrayList<Nodo> hijosMat = new ArrayList<Nodo>();
    hijosMat.add(i);
    hijosMat.add(i1);
    hijosMat.add(i2);
    Nodo aMat = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], 1, 1, hijosMat, false);
    
    hijos.add(aMat);
    
    ArrayList<Nodo> hijosDiv = new ArrayList<Nodo>();
    hijosDiv.add(aMat);
    hijosDiv.add(e);
    Nodo div = new Nodo(accion.division, accion.acciones[accion.division], 1, 1, hijosDiv, false );

    hijos.add(div);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ASIGNACION ::= id INDICE INDICE a_prod EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();

    ArrayList<Nodo> hijosMat = new ArrayList<Nodo>();
    hijosMat.add(i);
    hijosMat.add(i1);
    hijosMat.add(i2);
    Nodo aMat = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], 1, 1, hijosMat, false);
    
    hijos.add(aMat);
    
    ArrayList<Nodo> hijosProd = new ArrayList<Nodo>();
    hijosProd.add(aMat);
    hijosProd.add(e);
    Nodo prod = new Nodo(accion.producto, accion.acciones[accion.producto], 1, 1, hijosProd, false );

    hijos.add(prod);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ASIGNACION ::= id INDICE INDICE a_resta EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();

    ArrayList<Nodo> hijosMat = new ArrayList<Nodo>();
    hijosMat.add(i);
    hijosMat.add(i1);
    hijosMat.add(i2);
    Nodo aMat = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], 1, 1, hijosMat, false);
    
    hijos.add(aMat);
    
    ArrayList<Nodo> hijosRes = new ArrayList<Nodo>();
    hijosRes.add(aMat);
    hijosRes.add(e);
    Nodo res = new Nodo(accion.resta, accion.acciones[accion.resta], 1, 1, hijosRes, false );

    hijos.add(res);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ASIGNACION ::= id INDICE INDICE a_suma EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();

    ArrayList<Nodo> hijosMat = new ArrayList<Nodo>();
    hijosMat.add(i);
    hijosMat.add(i1);
    hijosMat.add(i2);
    Nodo aMat = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], 1, 1, hijosMat, false);
    
    hijos.add(aMat);
    
    ArrayList<Nodo> hijosSum = new ArrayList<Nodo>();
    hijosSum.add(aMat);
    hijosSum.add(e);
    Nodo sum = new Nodo(accion.suma, accion.acciones[accion.suma], 1, 1, hijosSum, false );

    hijos.add(sum);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ASIGNACION ::= id INDICE INDICE igual EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();

    ArrayList<Nodo> hijosMat = new ArrayList<Nodo>();
    hijosMat.add(i);
    hijosMat.add(i1);
    hijosMat.add(i2);
    Nodo aMat = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], 1, 1, hijosMat, false);
    
    hijos.add(aMat);
    hijos.add(e);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ASIGNACION ::= id INDICE INDICE a_mod EXPGEN punto_coma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();

    ArrayList<Nodo> hijosMat = new ArrayList<Nodo>();
    hijosMat.add(i);
    hijosMat.add(i1);
    hijosMat.add(i2);
    Nodo aMat = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], 1, 1, hijosMat, false);
    
    hijos.add(aMat);
    
    ArrayList<Nodo> hijosMod = new ArrayList<Nodo>();
    hijosMod.add(aMat);
    hijosMod.add(e);
    Nodo mod = new Nodo(accion.modulo, accion.acciones[accion.modulo], 1, 1, hijosMod, false );

    hijos.add(mod);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONDICIONAL ::= par_ab OPERANDO par_ce 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = op;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONDICIONAL ::= par_ab EXPRESION par_ce 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONDICIONALHACERMIENTRAS ::= pr_hacer BLOQUE pr_mientras CONDICIONAL punto_coma 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);
    hijos.addAll(b);
    RESULT = new Nodo(accion.hacerMientras, accion.acciones[accion.hacerMientras], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALHACERMIENTRAS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONDICIONALHACERMIENTRAS ::= pr_hacer SENTENCIA pr_mientras CONDICIONAL punto_coma 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);
    
    hijos.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], 1, 1, (new ArrayList<Nodo>()), false));
    ArrayList<Nodo> sent = new ArrayList<Nodo>();
    sent.add(s);
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], 1, 1, sent, false));
    RESULT = new Nodo(accion.hacerMientras, accion.acciones[accion.hacerMientras], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALHACERMIENTRAS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONDICIONALMIENTRAS ::= pr_mientras CONDICIONAL BLOQUE 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);
    hijos.addAll(b);
    RESULT = new Nodo(accion.mientras, accion.acciones[accion.mientras], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALMIENTRAS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CONDICIONALMIENTRAS ::= pr_mientras CONDICIONAL SENTENCIA 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);
    
    hijos.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], 1, 1, (new ArrayList<Nodo>()), false));
    ArrayList<Nodo> sent = new ArrayList<Nodo>();
    sent.add(s);
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], 1, 1, sent, false));
    RESULT = new Nodo(accion.mientras, accion.acciones[accion.mientras], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALMIENTRAS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CONDICIONALPARA ::= pr_para CONTROLADOR BLOQUE 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    c.addAll(b);
    RESULT = new Nodo(accion.para, accion.acciones[accion.para], 1, 1, c, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALPARA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CONDICIONALPARA ::= pr_para CONTROLADOR SENTENCIA 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    c.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], 1, 1, (new ArrayList<Nodo>()), false));
    ArrayList<Nodo> sent = new ArrayList<Nodo>();
    sent.add(s);
    c.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], 1, 1, sent, false));
    RESULT = new Nodo(accion.para, accion.acciones[accion.para], 1, 1, c, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALPARA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CONDICIONALSI ::= pr_si CONDICIONAL BLOQUE 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);
    hijos.addAll(b);
    
    hijos.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], 1, 1, (new ArrayList<Nodo>()), false));
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], 1, 1, (new ArrayList<Nodo>()), false));
    RESULT = new Nodo(accion.si, accion.acciones[accion.si], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CONDICIONALSI ::= pr_si CONDICIONAL BLOQUE pr_sino BLOQUE 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> b1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> b2 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);
    hijos.addAll(b1);
    hijos.addAll(b2);
    
    RESULT = new Nodo(accion.si, accion.acciones[accion.si], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CONDICIONALSI ::= pr_si CONDICIONAL SENTENCIA 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);
    hijos.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], 1, 1, (new ArrayList<Nodo>()), false));
    ArrayList<Nodo> sent = new ArrayList<Nodo>();
    sent.add(s);
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], 1, 1, sent, false));
    
    hijos.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], 1, 1, (new ArrayList<Nodo>()), false));
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], 1, 1, (new ArrayList<Nodo>()), false));
    RESULT = new Nodo(accion.si, accion.acciones[accion.si], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CONDICIONALSI ::= pr_si CONDICIONAL BLOQUE pr_sino SENTENCIA 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);
    hijos.addAll(b);
    hijos.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], 1, 1, (new ArrayList<Nodo>()), false));
    ArrayList<Nodo> sent = new ArrayList<Nodo>();
    sent.add(s);
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], 1, 1, sent, false));
    
    RESULT = new Nodo(accion.si, accion.acciones[accion.si], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CONDICIONALSI ::= pr_si CONDICIONAL SENTENCIA pr_sino BLOQUE 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);
    hijos.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], 1, 1, (new ArrayList<Nodo>()), false));
    ArrayList<Nodo> sent = new ArrayList<Nodo>();
    sent.add(s);
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], 1, 1, sent, false));
    hijos.addAll(b);

    RESULT = new Nodo(accion.si, accion.acciones[accion.si], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CONDICIONALSI ::= pr_si CONDICIONAL SENTENCIA pr_sino SENTENCIA 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(c);

    hijos.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], 1, 1, (new ArrayList<Nodo>()), false));
    ArrayList<Nodo> sent1 = new ArrayList<Nodo>();
    sent1.add(s1);
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], 1, 1, sent1, false));
    
    hijos.add(new Nodo(accion.declaracionVar, accion.acciones[accion.declaracionVar], 1, 1, (new ArrayList<Nodo>()), false));
    ArrayList<Nodo> sent2 = new ArrayList<Nodo>();
    sent2.add(s2);
    hijos.add(new Nodo(accion.bloque, accion.acciones[accion.bloque], 1, 1, sent2, false));

    RESULT = new Nodo(accion.si, accion.acciones[accion.si], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CONTROLADOR ::= par_ab INI punto_coma EXPGEN punto_coma ACT par_ce 
            {
              ArrayList<Nodo> RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo ini = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> ctrl = new ArrayList<Nodo>();
    ctrl.add(ini);
    ctrl.add(e);
    ctrl.add(a);
    RESULT = ctrl;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROLADOR",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ESCRITURA ::= pr_mostrar par_ab EXPGEN par_ce punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ESCRITURA ::= pr_mostrar par_ab cadena par_ce punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ESCRITURA ::= pr_mostrar par_ab par_ce punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // INDICE ::= cor_ab EXPGEN cor_ce 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDICE",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // INI ::= id igual EXPGEN 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(e);
    RESULT = new Nodo(accion.asignacion, accion.acciones[accion.asignacion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INI",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // INI ::= pr_entero id igual EXPGEN 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(t);
    hijos.add(i);
    hijos.add(e);
    RESULT = new Nodo(accion.declaracionSim, accion.acciones[accion.declaracionSim], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INI",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // LECTURA ::= pr_leer par_ab id par_ce punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LECTURA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // MATRIZ ::= ll_ab NVECTOR ll_ce 
            {
              Nodo RESULT =null;
		int nvecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nvecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> nvec = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new Nodo(accion.elemMat, accion.acciones[accion.elemMat], 1, 1, nvec, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATRIZ",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NVECTOR ::= VECTOR 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList <Nodo> vectores = new ArrayList<Nodo>();
    vectores.add(v);
    RESULT = vectores;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NVECTOR",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NVECTOR ::= VECTOR coma NVECTOR 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nvecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nvecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> nvec = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    nvec.add(0, v);
    RESULT = nvec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NVECTOR",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // VECTOR ::= ll_ab NELEMENTO ll_ce 
            {
              Nodo RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> el = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new Nodo(accion.elemVec, accion.acciones[accion.elemVec], 1, 1, el, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VECTOR",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NELEMENTO ::= EXPGEN 
            {
              ArrayList<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> elementos = new ArrayList<Nodo>();
    elementos.add(e);
    RESULT = elementos;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NELEMENTO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NELEMENTO ::= EXPGEN coma NELEMENTO 
            {
              ArrayList<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> elem = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    elem.add(0, e);
    RESULT = elem;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NELEMENTO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // DECLARACIONFUNCIONCABECERA ::= TIPOVARIABLEFUNCION id par_ab PARAMETRO par_ce 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONFUNCIONCABECERA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // DECLARACIONFUNCIONCABECERA ::= TIPOVARIABLEFUNCION id par_ab par_ce 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONFUNCIONCABECERA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TIPOVARIABLEFUNCION ::= TIPONUMERO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOVARIABLEFUNCION",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TIPOVARIABLEFUNCION ::= pr_vacio 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOVARIABLEFUNCION",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // DEFINICIONVARIABLE ::= DECLARACION DEFINICIONVARIABLE 
            {
              ArrayList<Nodo> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> r = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    d.addAll(r);
    RESULT = d;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // DEFINICIONVARIABLE ::= DECLARACION 
            {
              ArrayList<Nodo> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = d;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // PARAMETRO ::= TIPONUMERO id coma PARAMETRO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // PARAMETRO ::= TIPONUMERO id INDICE coma PARAMETRO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // PARAMETRO ::= TIPONUMERO id INDICE INDICE coma PARAMETRO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // PARAMETRO ::= TIPONUMERO id INDICE INDICE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // PARAMETRO ::= TIPONUMERO id INDICE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // PARAMETRO ::= TIPONUMERO id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // PARAMETROBINARIO ::= par_ab EXPGEN coma EXPGEN par_ce 
            {
              ArrayList<Nodo> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> param = new ArrayList<Nodo>();
    param.add(e1);
    param.add(e2);
    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROBINARIO",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // PARAMETROUNARIO ::= par_ab EXPGEN par_ce 
            {
              ArrayList<Nodo> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> param = new ArrayList<Nodo>();
    param.add(e1);
    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROUNARIO",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // SENTSELECTOR ::= pr_selector CONDICIONAL ll_ab NCASO SENTDEFECTO ll_ce 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTSELECTOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // SENTSELECTOR ::= pr_selector CONDICIONAL ll_ab NCASO ll_ce 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTSELECTOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // NCASO ::= SENTCASO NCASO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NCASO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NCASO ::= SENTCASO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NCASO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SENTCASO ::= pr_caso numero sig_pun NSENTENCIA pr_saltar punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTCASO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SENTCASO ::= pr_caso numero sig_pun pr_saltar punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTCASO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SENTCASO ::= pr_caso numero sig_pun NSENTENCIA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTCASO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SENTCASO ::= pr_caso numero sig_pun 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTCASO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // SENTDEFECTO ::= pr_default sig_pun NSENTENCIA pr_saltar punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTDEFECTO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // SENTDEFECTO ::= pr_default sig_pun pr_saltar punto_coma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTDEFECTO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // LLAMADAFUNCION ::= id par_ab par_ce 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Nodo argumento = new Nodo(accion.argumento, accion.acciones[accion.argumento], 1, 1, (new ArrayList<Nodo>()), false);
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(argumento);
    RESULT = new Nodo(accion.llamadaFuncion, accion.acciones[accion.llamadaFuncion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // LLAMADAFUNCION ::= id par_ab ARGUMENTO par_ce 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Nodo argumento = new Nodo(accion.argumento, accion.acciones[accion.argumento], 1, 1, a, false);
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(argumento);
    RESULT = new Nodo(accion.llamadaFuncion, accion.acciones[accion.llamadaFuncion], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // OPERADORFUNCION ::= pr_suma PARAMETROBINARIO 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.suma, accion.acciones[accion.suma], 1, 1, p,false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORFUNCION",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // OPERADORFUNCION ::= pr_resta PARAMETROBINARIO 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.resta, accion.acciones[accion.resta], 1, 1, p,false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORFUNCION",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // OPERADORFUNCION ::= pr_prod PARAMETROBINARIO 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.producto, accion.acciones[accion.producto], 1, 1, p,false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORFUNCION",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // OPERADORFUNCION ::= pr_transp PARAMETROUNARIO 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.transpuesta, accion.acciones[accion.transpuesta], 1, 1, p,false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORFUNCION",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // OPERADORFUNCION ::= pr_inv PARAMETROUNARIO 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.inversa, accion.acciones[accion.inversa], 1, 1, p,false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORFUNCION",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // OPERADORCOND ::= CONDICIONAL sig_int par_ab EXPGEN par_ce sig_pun par_ab EXPGEN par_ce 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Nodo> operandos = new ArrayList<Nodo>();
    operandos.add(e1);
    operandos.add(e2);
    operandos.add(e3);
    RESULT = new Nodo(accion.operacionCond, accion.acciones[accion.operacionCond], 1, 1, operandos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORCOND",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // OPERANDOENTERO ::= LLAMADAFUNCION 
            {
              Nodo RESULT =null;
		int llleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ll = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ll;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // OPERANDOENTERO ::= id INDICE INDICE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(d1);
    hijos.add(d2);
    RESULT = new Nodo(accion.accesoMat, accion.acciones[accion.accesoMat], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // OPERANDOENTERO ::= id INDICE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Nodo> hijos = new ArrayList<Nodo>();
    hijos.add(i);
    hijos.add(d1);
    RESULT = new Nodo(accion.accesoVec, accion.acciones[accion.accesoVec], 1, 1, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // OPERANDOENTERO ::= id 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = i;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // OPERANDOENTERO ::= numero 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = n;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // OPERANDO ::= OPERANDOENTERO 
            {
              Nodo RESULT =null;
		int oeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo oe = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = oe;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // OPERANDO ::= real 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // OPERANDO ::= octa_e 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = o;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // OPERANDO ::= octa_r 
            {
              Nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = o;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // OPERANDO ::= hexa_e 
            {
              Nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = h;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // OPERANDO ::= hexa_r 
            {
              Nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = h;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // TIPONUMERO ::= pr_entero 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPONUMERO",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // TIPONUMERO ::= pr_real 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPONUMERO",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
