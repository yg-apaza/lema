
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package lema;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\317\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\003\000\002\003\007\000\002\013\003" +
    "\000\002\013\003\000\002\013\004\000\002\013\004\000" +
    "\002\016\004\000\002\016\003\000\002\010\004\000\002" +
    "\010\004\000\002\010\005\000\002\014\006\000\002\014" +
    "\006\000\002\014\010\000\002\014\010\000\002\014\010" +
    "\000\002\014\010\000\002\011\004\000\002\022\006\000" +
    "\002\022\006\000\002\022\004\000\002\022\007\000\002" +
    "\022\006\000\002\023\006\000\002\023\006\000\002\023" +
    "\004\000\002\023\007\000\002\023\006\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\017\005\000\002" +
    "\017\003\000\002\020\006\000\002\020\006\000\002\020" +
    "\004\000\002\021\007\000\002\021\007\000\002\021\005" +
    "\000\002\027\005\000\002\027\003\000\002\030\003\000" +
    "\002\030\005\000\002\026\003\000\002\026\005\000\002" +
    "\025\005\000\002\025\006\000\002\025\006\000\002\025" +
    "\007\000\002\025\007\000\002\052\005\000\002\052\006" +
    "\000\002\052\005\000\002\052\003\000\002\052\004\000" +
    "\002\007\004\000\002\007\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\004\000\002\006\003" +
    "\000\002\006\003\000\002\006\004\000\002\006\005\000" +
    "\002\006\004\000\002\061\004\000\002\061\004\000\002" +
    "\005\003\000\002\005\003\000\002\004\005\000\002\004" +
    "\004\000\002\004\003\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\004\000\002\004\004\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\066\003\000\002\066" +
    "\003\000\002\066\003\000\002\035\003\000\002\035\005" +
    "\000\002\036\006\000\002\036\006\000\002\036\007\000" +
    "\002\036\010\000\002\062\005\000\002\062\005\000\002" +
    "\040\007\000\002\041\005\000\002\042\005\000\002\043" +
    "\005\000\002\043\007\000\002\063\011\000\002\063\010" +
    "\000\002\063\010\000\002\063\007\000\002\063\010\000" +
    "\002\063\007\000\002\063\007\000\002\063\006\000\002" +
    "\050\007\000\002\050\007\000\002\050\006\000\002\057" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\006" +
    "\000\002\060\006\000\002\051\007\000\002\053\005\000" +
    "\002\055\003\000\002\055\005\000\002\056\005\000\002" +
    "\054\003\000\002\054\005\000\002\012\007\000\002\012" +
    "\006\000\002\100\003\000\002\100\003\000\002\015\004" +
    "\000\002\015\003\000\002\034\005\000\002\034\007\000" +
    "\002\034\006\000\002\034\005\000\002\034\004\000\002" +
    "\034\003\000\002\031\006\000\002\031\007\000\002\031" +
    "\010\000\002\031\006\000\002\031\005\000\002\031\004" +
    "\000\002\032\007\000\002\033\005\000\002\044\010\000" +
    "\002\044\007\000\002\046\004\000\002\046\003\000\002" +
    "\047\010\000\002\047\007\000\002\047\006\000\002\047" +
    "\005\000\002\045\007\000\002\045\006\000\002\037\005" +
    "\000\002\037\006\000\002\073\004\000\002\073\004\000" +
    "\002\074\007\000\002\070\003\000\002\070\003\000\002" +
    "\070\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\003\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\064" +
    "\003\000\002\065\003\000\002\065\003\000\002\067\003" +
    "\000\002\067\005\000\002\067\004\000\002\067\003\000" +
    "\002\067\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\071\003\000\002\071\003\000\002\075" +
    "\003\000\002\075\003\000\002\075\003\000\002\075\003" +
    "\000\002\075\003\000\002\075\003\000\002\077\003\000" +
    "\002\077\003\000\002\076\003\000\002\076\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0180\000\014\004\010\005\012\006\004\007\007\010" +
    "\015\001\002\000\004\104\u0176\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\u0173\001\002\000\004\104\u014c\001" +
    "\002\000\006\006\u011c\007\u011b\001\002\000\014\004\010" +
    "\005\ufffc\006\004\007\007\010\015\001\002\000\004\067" +
    "\u0116\001\002\000\004\005\012\001\002\000\014\004\010" +
    "\005\ufffb\006\004\007\007\010\015\001\002\000\004\104" +
    "\020\001\002\000\006\102\uffd2\103\024\001\002\000\004" +
    "\102\023\001\002\000\010\041\021\102\uffd3\103\uffd3\001" +
    "\002\000\004\064\022\001\002\000\006\102\uffd4\103\uffd4" +
    "\001\002\000\040\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\016\ufff4\065\ufff4\066\ufff4\070\ufff4\072\ufff4\073\ufff4" +
    "\074\ufff4\075\ufff4\101\ufff4\104\ufff4\001\002\000\004\104" +
    "\020\001\002\000\004\102\uffd1\001\002\000\004\005\ufff9" +
    "\001\002\000\014\002\000\005\035\006\031\007\033\010" +
    "\040\001\002\000\004\104\uff34\001\002\000\012\012\uff36" +
    "\013\uff36\103\uff36\104\uff36\001\002\000\004\002\uffff\001" +
    "\002\000\012\012\uff35\013\uff35\103\uff35\104\uff35\001\002" +
    "\000\004\104\u0107\001\002\000\004\104\uff7b\001\002\000" +
    "\004\104\uff7c\001\002\000\026\015\045\065\051\066\044" +
    "\070\060\072\061\073\055\074\056\075\043\101\067\104" +
    "\065\001\002\000\004\104\uff33\001\002\000\014\002\ufff7" +
    "\005\035\006\031\007\033\010\040\001\002\000\004\002" +
    "\ufff8\001\002\000\004\011\246\001\002\000\004\011\347" +
    "\001\002\000\034\006\004\007\007\010\015\016\340\065" +
    "\051\066\044\070\060\072\061\073\055\074\056\075\043" +
    "\101\067\104\065\001\002\000\050\002\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\010\uffc0\016\uffc0\065\uffc0\066\uffc0\070\uffc0" +
    "\071\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077" +
    "\uffc0\100\uffc0\101\uffc0\104\uffc0\001\002\000\050\002\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\016\uffc6\065\uffc6\066" +
    "\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6" +
    "\076\uffc6\077\uffc6\100\uffc6\101\uffc6\104\uffc6\001\002\000" +
    "\050\002\uffba\005\uffba\006\uffba\007\uffba\010\uffba\016\uffba" +
    "\065\uffba\066\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074" +
    "\uffba\075\uffba\076\uffba\077\uffba\100\uffba\101\uffba\104\uffba" +
    "\001\002\000\004\011\330\001\002\000\004\102\327\001" +
    "\002\000\014\002\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\001\002\000\050\002\uffc1\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\016\uffc1\065\uffc1\066\uffc1\070\uffc1\071\uffc1\072\uffc1" +
    "\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101" +
    "\uffc1\104\uffc1\001\002\000\026\015\045\065\051\066\044" +
    "\070\060\072\061\073\055\074\056\075\043\101\067\104" +
    "\065\001\002\000\004\011\261\001\002\000\050\002\uffc2" +
    "\005\uffc2\006\uffc2\007\uffc2\010\uffc2\016\uffc2\065\uffc2\066" +
    "\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2" +
    "\076\uffc2\077\uffc2\100\uffc2\101\uffc2\104\uffc2\001\002\000" +
    "\004\011\246\001\002\000\004\011\246\001\002\000\050" +
    "\002\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\016\uffbe\065" +
    "\uffbe\066\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe" +
    "\075\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe\104\uffbe\001" +
    "\002\000\050\002\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf" +
    "\016\uffbf\065\uffbf\066\uffbf\070\uffbf\071\uffbf\072\uffbf\073" +
    "\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf" +
    "\104\uffbf\001\002\000\050\002\uffbd\005\uffbd\006\uffbd\007" +
    "\uffbd\010\uffbd\016\uffbd\065\uffbd\066\uffbd\070\uffbd\071\uffbd" +
    "\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100" +
    "\uffbd\101\uffbd\104\uffbd\001\002\000\026\011\161\013\157" +
    "\026\162\027\156\041\230\047\225\050\227\051\222\052" +
    "\226\053\224\001\002\000\050\002\uffbb\005\uffbb\006\uffbb" +
    "\007\uffbb\010\uffbb\016\uffbb\065\uffbb\066\uffbb\070\uffbb\071" +
    "\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb" +
    "\100\uffbb\101\uffbb\104\uffbb\001\002\000\044\011\073\017" +
    "\123\020\110\040\072\042\077\043\115\044\121\045\100" +
    "\046\076\056\122\057\113\060\120\061\111\062\075\063" +
    "\114\102\124\104\116\001\002\000\004\102\071\001\002" +
    "\000\050\002\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\016" +
    "\uffb9\065\uffb9\066\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9" +
    "\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9\104" +
    "\uffb9\001\002\000\042\011\uffa5\017\uffa5\020\uffa5\040\uffa5" +
    "\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\056\uffa5\057" +
    "\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\104\uffa5\001\002" +
    "\000\042\011\073\017\123\020\110\040\072\042\077\043" +
    "\115\044\121\045\100\046\076\056\122\057\113\060\120" +
    "\061\111\062\075\063\114\104\116\001\002\000\004\102" +
    "\214\001\002\000\054\012\uff42\014\uff42\016\uff42\017\uff42" +
    "\020\uff42\021\uff42\022\uff42\023\uff42\024\uff42\025\uff42\030" +
    "\uff42\031\uff42\032\uff42\033\uff42\034\uff42\035\uff42\036\uff42" +
    "\037\uff42\055\uff42\102\uff42\103\uff42\001\002\000\004\011" +
    "\uff3d\001\002\000\004\011\uff41\001\002\000\004\011\uff3e" +
    "\001\002\000\004\054\210\001\002\000\042\011\073\017" +
    "\123\020\110\040\072\042\077\043\115\044\121\045\100" +
    "\046\076\056\122\057\113\060\120\061\111\062\075\063" +
    "\114\104\116\001\002\000\054\012\uff46\014\uff46\016\uff46" +
    "\017\uff46\020\uff46\021\uff46\022\uff46\023\uff46\024\uff46\025" +
    "\uff46\030\uff46\031\uff46\032\uff46\033\uff46\034\uff46\035\uff46" +
    "\036\uff46\037\uff46\055\uff46\102\uff46\103\uff46\001\002\000" +
    "\054\012\uffae\014\uffae\016\uffae\017\uffae\020\uffae\021\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\055\uffae" +
    "\102\uffae\103\uffae\001\002\000\004\011\203\001\002\000" +
    "\054\012\uffb4\014\uffb4\016\uffb4\017\146\020\134\021\136" +
    "\022\127\023\143\024\131\025\132\030\133\031\145\032" +
    "\135\033\147\034\140\035\141\036\142\037\130\055\uffb4" +
    "\102\uffb4\103\uffb4\001\002\000\004\011\174\001\002\000" +
    "\042\011\uffa3\017\uffa3\020\uffa3\040\uffa3\042\uffa3\043\uffa3" +
    "\044\uffa3\045\uffa3\046\uffa3\056\uffa3\057\uffa3\060\uffa3\061" +
    "\uffa3\062\uffa3\063\uffa3\104\uffa3\001\002\000\054\012\uff37" +
    "\014\uff37\016\uff37\017\uff37\020\uff37\021\uff37\022\uff37\023" +
    "\uff37\024\uff37\025\uff37\030\uff37\031\uff37\032\uff37\033\uff37" +
    "\034\uff37\035\uff37\036\uff37\037\uff37\055\uff37\102\uff37\103" +
    "\uff37\001\002\000\054\012\uffad\014\uffad\016\uffad\017\uffad" +
    "\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad" +
    "\037\uffad\055\uffad\102\uffad\103\uffad\001\002\000\054\012" +
    "\uff39\014\uff39\016\uff39\017\uff39\020\uff39\021\uff39\022\uff39" +
    "\023\uff39\024\uff39\025\uff39\030\uff39\031\uff39\032\uff39\033" +
    "\uff39\034\uff39\035\uff39\036\uff39\037\uff39\055\uff39\102\uff39" +
    "\103\uff39\001\002\000\054\012\uff3b\014\uff3b\016\uff3b\017" +
    "\uff3b\020\uff3b\021\uff3b\022\uff3b\023\uff3b\024\uff3b\025\uff3b" +
    "\030\uff3b\031\uff3b\032\uff3b\033\uff3b\034\uff3b\035\uff3b\036" +
    "\uff3b\037\uff3b\055\uff3b\102\uff3b\103\uff3b\001\002\000\004" +
    "\011\uff40\001\002\000\064\011\161\012\uff43\013\157\014" +
    "\uff43\016\uff43\017\uff43\020\uff43\021\uff43\022\uff43\023\uff43" +
    "\024\uff43\025\uff43\026\162\027\156\030\uff43\031\uff43\032" +
    "\uff43\033\uff43\034\uff43\035\uff43\036\uff43\037\uff43\055\uff43" +
    "\102\uff43\103\uff43\001\002\000\054\012\uff3c\014\uff3c\016" +
    "\uff3c\017\uff3c\020\uff3c\021\uff3c\022\uff3c\023\uff3c\024\uff3c" +
    "\025\uff3c\030\uff3c\031\uff3c\032\uff3c\033\uff3c\034\uff3c\035" +
    "\uff3c\036\uff3c\037\uff3c\055\uff3c\102\uff3c\103\uff3c\001\002" +
    "\000\054\012\uff38\014\uff38\016\uff38\017\uff38\020\uff38\021" +
    "\uff38\022\uff38\023\uff38\024\uff38\025\uff38\030\uff38\031\uff38" +
    "\032\uff38\033\uff38\034\uff38\035\uff38\036\uff38\037\uff38\055" +
    "\uff38\102\uff38\103\uff38\001\002\000\004\011\uff3f\001\002" +
    "\000\054\012\uff3a\014\uff3a\016\uff3a\017\uff3a\020\uff3a\021" +
    "\uff3a\022\uff3a\023\uff3a\024\uff3a\025\uff3a\030\uff3a\031\uff3a" +
    "\032\uff3a\033\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a\055" +
    "\uff3a\102\uff3a\103\uff3a\001\002\000\042\011\uffa4\017\uffa4" +
    "\020\uffa4\040\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046" +
    "\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4" +
    "\104\uffa4\001\002\000\050\002\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\016\uffb7\065\uffb7\066\uffb7\070\uffb7\071\uffb7" +
    "\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100" +
    "\uffb7\101\uffb7\104\uffb7\001\002\000\054\012\uffb3\014\uffb3" +
    "\016\uffb3\017\146\020\134\021\136\022\127\023\143\024" +
    "\131\025\132\030\133\031\145\032\135\033\147\034\140" +
    "\035\141\036\142\037\130\055\uffb3\102\uffb3\103\uffb3\001" +
    "\002\000\054\012\uffb0\014\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\055\uffb0\102\uffb0\103\uffb0\001\002\000\042\011\uff54\017" +
    "\uff54\020\uff54\040\uff54\042\uff54\043\uff54\044\uff54\045\uff54" +
    "\046\uff54\056\uff54\057\uff54\060\uff54\061\uff54\062\uff54\063" +
    "\uff54\104\uff54\001\002\000\042\011\uff4b\017\uff4b\020\uff4b" +
    "\040\uff4b\042\uff4b\043\uff4b\044\uff4b\045\uff4b\046\uff4b\056" +
    "\uff4b\057\uff4b\060\uff4b\061\uff4b\062\uff4b\063\uff4b\104\uff4b" +
    "\001\002\000\054\012\uff47\014\uff47\016\uff47\017\uff47\020" +
    "\uff47\021\uff47\022\uff47\023\uff47\024\uff47\025\uff47\030\uff47" +
    "\031\uff47\032\uff47\033\uff47\034\uff47\035\uff47\036\uff47\037" +
    "\uff47\055\uff47\102\uff47\103\uff47\001\002\000\054\012\uff48" +
    "\014\uff48\016\uff48\017\uff48\020\uff48\021\uff48\022\uff48\023" +
    "\uff48\024\uff48\025\uff48\030\uff48\031\uff48\032\uff48\033\uff48" +
    "\034\uff48\035\uff48\036\uff48\037\uff48\055\uff48\102\uff48\103" +
    "\uff48\001\002\000\042\011\uff53\017\uff53\020\uff53\040\uff53" +
    "\042\uff53\043\uff53\044\uff53\045\uff53\046\uff53\056\uff53\057" +
    "\uff53\060\uff53\061\uff53\062\uff53\063\uff53\104\uff53\001\002" +
    "\000\042\011\uff4d\017\uff4d\020\uff4d\040\uff4d\042\uff4d\043" +
    "\uff4d\044\uff4d\045\uff4d\046\uff4d\056\uff4d\057\uff4d\060\uff4d" +
    "\061\uff4d\062\uff4d\063\uff4d\104\uff4d\001\002\000\042\011" +
    "\uff4f\017\uff4f\020\uff4f\040\uff4f\042\uff4f\043\uff4f\044\uff4f" +
    "\045\uff4f\046\uff4f\056\uff4f\057\uff4f\060\uff4f\061\uff4f\062" +
    "\uff4f\063\uff4f\104\uff4f\001\002\000\042\011\uff4a\017\uff4a" +
    "\020\uff4a\040\uff4a\042\uff4a\043\uff4a\044\uff4a\045\uff4a\046" +
    "\uff4a\056\uff4a\057\uff4a\060\uff4a\061\uff4a\062\uff4a\063\uff4a" +
    "\104\uff4a\001\002\000\054\012\uffab\014\uffab\016\uffab\017" +
    "\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab" +
    "\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\055\uffab\102\uffab\103\uffab\001\002\000\042" +
    "\011\uff4e\017\uff4e\020\uff4e\040\uff4e\042\uff4e\043\uff4e\044" +
    "\uff4e\045\uff4e\046\uff4e\056\uff4e\057\uff4e\060\uff4e\061\uff4e" +
    "\062\uff4e\063\uff4e\104\uff4e\001\002\000\042\011\uff50\017" +
    "\uff50\020\uff50\040\uff50\042\uff50\043\uff50\044\uff50\045\uff50" +
    "\046\uff50\056\uff50\057\uff50\060\uff50\061\uff50\062\uff50\063" +
    "\uff50\104\uff50\001\002\000\042\011\uff49\017\uff49\020\uff49" +
    "\040\uff49\042\uff49\043\uff49\044\uff49\045\uff49\046\uff49\056" +
    "\uff49\057\uff49\060\uff49\061\uff49\062\uff49\063\uff49\104\uff49" +
    "\001\002\000\042\011\uff4c\017\uff4c\020\uff4c\040\uff4c\042" +
    "\uff4c\043\uff4c\044\uff4c\045\uff4c\046\uff4c\056\uff4c\057\uff4c" +
    "\060\uff4c\061\uff4c\062\uff4c\063\uff4c\104\uff4c\001\002\000" +
    "\042\011\073\017\123\020\110\040\072\042\077\043\115" +
    "\044\121\045\100\046\076\056\122\057\113\060\120\061" +
    "\111\062\075\063\114\104\116\001\002\000\042\011\uff55" +
    "\017\uff55\020\uff55\040\uff55\042\uff55\043\uff55\044\uff55\045" +
    "\uff55\046\uff55\056\uff55\057\uff55\060\uff55\061\uff55\062\uff55" +
    "\063\uff55\104\uff55\001\002\000\042\011\uff52\017\uff52\020" +
    "\uff52\040\uff52\042\uff52\043\uff52\044\uff52\045\uff52\046\uff52" +
    "\056\uff52\057\uff52\060\uff52\061\uff52\062\uff52\063\uff52\104" +
    "\uff52\001\002\000\042\011\uff51\017\uff51\020\uff51\040\uff51" +
    "\042\uff51\043\uff51\044\uff51\045\uff51\046\uff51\056\uff51\057" +
    "\uff51\060\uff51\061\uff51\062\uff51\063\uff51\104\uff51\001\002" +
    "\000\054\012\uffa9\014\uffa9\016\uffa9\017\146\020\134\021" +
    "\136\022\127\023\143\024\131\025\132\030\133\031\145" +
    "\032\135\033\147\034\140\035\141\036\142\037\130\055" +
    "\uffa9\102\uffa9\103\uffa9\001\002\000\054\012\uffaa\014\uffaa" +
    "\016\uffaa\017\146\020\134\021\136\022\127\023\143\024" +
    "\131\025\132\030\133\031\145\032\135\033\147\034\140" +
    "\035\141\036\142\037\130\055\uffaa\102\uffaa\103\uffaa\001" +
    "\002\000\054\012\uffb1\014\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\055\uffb1\102\uffb1\103\uffb1\001\002\000\042\011\073\017" +
    "\123\020\110\040\072\042\077\043\115\044\121\045\100" +
    "\046\076\056\122\057\113\060\120\061\111\062\075\063" +
    "\114\104\116\001\002\000\054\012\uffb2\014\uffb2\016\uffb2" +
    "\017\146\020\134\021\136\022\127\023\143\024\131\025" +
    "\132\030\133\031\145\032\135\033\147\034\140\035\141" +
    "\036\142\037\130\055\uffb2\102\uffb2\103\uffb2\001\002\000" +
    "\054\012\uffa8\014\uffa8\016\uffa8\017\146\020\134\021\136" +
    "\022\127\023\143\024\131\025\132\030\133\031\145\032" +
    "\135\033\147\034\140\035\141\036\142\037\130\055\uffa8" +
    "\102\uffa8\103\uffa8\001\002\000\054\012\uffb6\014\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\055\uffb6\102\uffb6\103\uffb6\001\002" +
    "\000\042\011\073\017\123\020\110\040\072\042\077\043" +
    "\115\044\121\045\100\046\076\056\122\057\113\060\120" +
    "\061\111\062\075\063\114\104\116\001\002\000\056\012" +
    "\uff44\013\157\014\uff44\016\uff44\017\uff44\020\uff44\021\uff44" +
    "\022\uff44\023\uff44\024\uff44\025\uff44\030\uff44\031\uff44\032" +
    "\uff44\033\uff44\034\uff44\035\uff44\036\uff44\037\uff44\055\uff44" +
    "\102\uff44\103\uff44\001\002\000\044\011\073\012\164\017" +
    "\123\020\110\040\072\042\077\043\115\044\121\045\100" +
    "\046\076\056\122\057\113\060\120\061\111\062\075\063" +
    "\114\104\116\001\002\000\054\012\uffb5\014\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\037\uffb5\055\uffb5\102\uffb5\103\uffb5\001\002\000" +
    "\006\012\uffa2\103\167\001\002\000\054\012\uff60\014\uff60" +
    "\016\uff60\017\uff60\020\uff60\021\uff60\022\uff60\023\uff60\024" +
    "\uff60\025\uff60\030\uff60\031\uff60\032\uff60\033\uff60\034\uff60" +
    "\035\uff60\036\uff60\037\uff60\055\uff60\102\uff60\103\uff60\001" +
    "\002\000\004\012\166\001\002\000\054\012\uff5f\014\uff5f" +
    "\016\uff5f\017\uff5f\020\uff5f\021\uff5f\022\uff5f\023\uff5f\024" +
    "\uff5f\025\uff5f\030\uff5f\031\uff5f\032\uff5f\033\uff5f\034\uff5f" +
    "\035\uff5f\036\uff5f\037\uff5f\055\uff5f\102\uff5f\103\uff5f\001" +
    "\002\000\042\011\073\017\123\020\110\040\072\042\077" +
    "\043\115\044\121\045\100\046\076\056\122\057\113\060" +
    "\120\061\111\062\075\063\114\104\116\001\002\000\004" +
    "\012\uffa1\001\002\000\054\012\uff45\014\uff45\016\uff45\017" +
    "\uff45\020\uff45\021\uff45\022\uff45\023\uff45\024\uff45\025\uff45" +
    "\030\uff45\031\uff45\032\uff45\033\uff45\034\uff45\035\uff45\036" +
    "\uff45\037\uff45\055\uff45\102\uff45\103\uff45\001\002\000\004" +
    "\014\173\001\002\000\072\012\uff8a\013\uff8a\014\uff8a\016" +
    "\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a" +
    "\025\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035" +
    "\uff8a\036\uff8a\037\uff8a\041\uff8a\047\uff8a\050\uff8a\051\uff8a" +
    "\052\uff8a\053\uff8a\055\uff8a\102\uff8a\103\uff8a\001\002\000" +
    "\042\011\073\017\123\020\110\040\072\042\077\043\115" +
    "\044\121\045\100\046\076\056\122\057\113\060\120\061" +
    "\111\062\075\063\114\104\116\001\002\000\054\012\uff5e" +
    "\014\uff5e\016\uff5e\017\uff5e\020\uff5e\021\uff5e\022\uff5e\023" +
    "\uff5e\024\uff5e\025\uff5e\030\uff5e\031\uff5e\032\uff5e\033\uff5e" +
    "\034\uff5e\035\uff5e\036\uff5e\037\uff5e\055\uff5e\102\uff5e\103" +
    "\uff5e\001\002\000\004\103\177\001\002\000\042\011\073" +
    "\017\123\020\110\040\072\042\077\043\115\044\121\045" +
    "\100\046\076\056\122\057\113\060\120\061\111\062\075" +
    "\063\114\104\116\001\002\000\004\012\201\001\002\000" +
    "\054\012\uff6c\014\uff6c\016\uff6c\017\uff6c\020\uff6c\021\uff6c" +
    "\022\uff6c\023\uff6c\024\uff6c\025\uff6c\030\uff6c\031\uff6c\032" +
    "\uff6c\033\uff6c\034\uff6c\035\uff6c\036\uff6c\037\uff6c\055\uff6c" +
    "\102\uff6c\103\uff6c\001\002\000\054\012\uff5d\014\uff5d\016" +
    "\uff5d\017\uff5d\020\uff5d\021\uff5d\022\uff5d\023\uff5d\024\uff5d" +
    "\025\uff5d\030\uff5d\031\uff5d\032\uff5d\033\uff5d\034\uff5d\035" +
    "\uff5d\036\uff5d\037\uff5d\055\uff5d\102\uff5d\103\uff5d\001\002" +
    "\000\042\011\073\017\123\020\110\040\072\042\077\043" +
    "\115\044\121\045\100\046\076\056\122\057\113\060\120" +
    "\061\111\062\075\063\114\104\116\001\002\000\004\012" +
    "\205\001\002\000\054\012\uff6b\014\uff6b\016\uff6b\017\uff6b" +
    "\020\uff6b\021\uff6b\022\uff6b\023\uff6b\024\uff6b\025\uff6b\030" +
    "\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b" +
    "\037\uff6b\055\uff6b\102\uff6b\103\uff6b\001\002\000\054\012" +
    "\uffaf\014\uffaf\016\uffaf\017\146\020\134\021\136\022\127" +
    "\023\143\024\131\025\132\030\133\031\145\032\135\033" +
    "\147\034\140\035\141\036\142\037\130\055\uffaf\102\uffaf" +
    "\103\uffaf\001\002\000\054\012\uffac\014\uffac\016\uffac\017" +
    "\146\020\134\021\136\022\127\023\143\024\131\025\132" +
    "\030\133\031\145\032\135\033\147\034\140\035\141\036" +
    "\142\037\130\055\uffac\102\uffac\103\uffac\001\002\000\042" +
    "\011\073\017\123\020\110\040\072\042\077\043\115\044" +
    "\121\045\100\046\076\056\122\057\113\060\120\061\111" +
    "\062\075\063\114\104\116\001\002\000\004\055\212\001" +
    "\002\000\042\011\073\017\123\020\110\040\072\042\077" +
    "\043\115\044\121\045\100\046\076\056\122\057\113\060" +
    "\120\061\111\062\075\063\114\104\116\001\002\000\054" +
    "\012\uff5c\014\uff5c\016\uff5c\017\uff5c\020\uff5c\021\uff5c\022" +
    "\uff5c\023\uff5c\024\uff5c\025\uff5c\030\uff5c\031\uff5c\032\uff5c" +
    "\033\uff5c\034\uff5c\035\uff5c\036\uff5c\037\uff5c\055\uff5c\102" +
    "\uff5c\103\uff5c\001\002\000\050\002\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\010\uffb8\016\uffb8\065\uffb8\066\uffb8\070\uffb8\071" +
    "\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8" +
    "\100\uffb8\101\uffb8\104\uffb8\001\002\000\042\012\220\017" +
    "\146\020\134\021\136\022\127\023\143\024\131\025\132" +
    "\030\133\031\145\032\135\033\147\034\140\035\141\036" +
    "\142\037\130\001\002\000\042\012\217\017\146\020\134" +
    "\021\136\022\127\023\143\024\131\025\132\030\133\031" +
    "\145\032\135\033\147\034\140\035\141\036\142\037\130" +
    "\001\002\000\056\012\uffa7\014\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\030\uffa7" +
    "\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\054\uff9b\055\uffa7\102\uffa7\103\uffa7\001\002\000\056" +
    "\012\uffa6\014\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022" +
    "\uffa6\023\uffa6\024\uffa6\025\uffa6\030\uffa6\031\uffa6\032\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\054\uff9c\055" +
    "\uffa6\102\uffa6\103\uffa6\001\002\000\042\011\073\017\123" +
    "\020\110\040\072\042\077\043\115\044\121\045\100\046" +
    "\076\056\122\057\113\060\120\061\111\062\075\063\114" +
    "\104\116\001\002\000\042\011\uff5a\017\uff5a\020\uff5a\040" +
    "\uff5a\042\uff5a\043\uff5a\044\uff5a\045\uff5a\046\uff5a\056\uff5a" +
    "\057\uff5a\060\uff5a\061\uff5a\062\uff5a\063\uff5a\104\uff5a\001" +
    "\002\000\020\013\157\041\235\047\225\050\227\051\222" +
    "\052\226\053\224\001\002\000\042\011\uff56\017\uff56\020" +
    "\uff56\040\uff56\042\uff56\043\uff56\044\uff56\045\uff56\046\uff56" +
    "\056\uff56\057\uff56\060\uff56\061\uff56\062\uff56\063\uff56\104" +
    "\uff56\001\002\000\042\011\uff58\017\uff58\020\uff58\040\uff58" +
    "\042\uff58\043\uff58\044\uff58\045\uff58\046\uff58\056\uff58\057" +
    "\uff58\060\uff58\061\uff58\062\uff58\063\uff58\104\uff58\001\002" +
    "\000\042\011\uff5b\017\uff5b\020\uff5b\040\uff5b\042\uff5b\043" +
    "\uff5b\044\uff5b\045\uff5b\046\uff5b\056\uff5b\057\uff5b\060\uff5b" +
    "\061\uff5b\062\uff5b\063\uff5b\104\uff5b\001\002\000\042\011" +
    "\uff59\017\uff59\020\uff59\040\uff59\042\uff59\043\uff59\044\uff59" +
    "\045\uff59\046\uff59\056\uff59\057\uff59\060\uff59\061\uff59\062" +
    "\uff59\063\uff59\104\uff59\001\002\000\044\011\uff57\017\uff57" +
    "\020\uff57\040\uff57\042\uff57\043\uff57\044\uff57\045\uff57\046" +
    "\uff57\056\uff57\057\uff57\060\uff57\061\uff57\062\uff57\063\uff57" +
    "\064\231\104\uff57\001\002\000\004\102\232\001\002\000" +
    "\050\002\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\016\uffa0" +
    "\065\uffa0\066\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0\074" +
    "\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0\104\uffa0" +
    "\001\002\000\042\011\073\017\123\020\110\040\072\042" +
    "\077\043\115\044\121\045\100\046\076\056\122\057\113" +
    "\060\120\061\111\062\075\063\114\104\116\001\002\000" +
    "\016\041\235\047\225\050\227\051\222\052\226\053\224" +
    "\001\002\000\042\011\uff57\017\uff57\020\uff57\040\uff57\042" +
    "\uff57\043\uff57\044\uff57\045\uff57\046\uff57\056\uff57\057\uff57" +
    "\060\uff57\061\uff57\062\uff57\063\uff57\104\uff57\001\002\000" +
    "\042\011\073\017\123\020\110\040\072\042\077\043\115" +
    "\044\121\045\100\046\076\056\122\057\113\060\120\061" +
    "\111\062\075\063\114\104\116\001\002\000\004\102\240" +
    "\001\002\000\050\002\uff9d\005\uff9d\006\uff9d\007\uff9d\010" +
    "\uff9d\016\uff9d\065\uff9d\066\uff9d\070\uff9d\071\uff9d\072\uff9d" +
    "\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\100\uff9d\101" +
    "\uff9d\104\uff9d\001\002\000\004\102\242\001\002\000\050" +
    "\002\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\016\uff9e\065" +
    "\uff9e\066\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e" +
    "\075\uff9e\076\uff9e\077\uff9e\100\uff9e\101\uff9e\104\uff9e\001" +
    "\002\000\004\102\244\001\002\000\050\002\uff9f\005\uff9f" +
    "\006\uff9f\007\uff9f\010\uff9f\016\uff9f\065\uff9f\066\uff9f\070" +
    "\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f" +
    "\077\uff9f\100\uff9f\101\uff9f\104\uff9f\001\002\000\026\015" +
    "\045\065\051\066\044\070\060\072\061\073\055\074\056" +
    "\075\043\101\067\104\065\001\002\000\042\011\073\017" +
    "\123\020\110\040\072\042\077\043\115\044\121\045\100" +
    "\046\076\056\122\057\113\060\120\061\111\062\075\063" +
    "\114\104\116\001\002\000\042\012\252\017\146\020\134" +
    "\021\136\022\127\023\143\024\131\025\132\030\133\031" +
    "\145\032\135\033\147\034\140\035\141\036\142\037\130" +
    "\001\002\000\042\012\251\017\146\020\134\021\136\022" +
    "\127\023\143\024\131\025\132\030\133\031\145\032\135" +
    "\033\147\034\140\035\141\036\142\037\130\001\002\000" +
    "\030\015\uff9b\065\uff9b\066\uff9b\070\uff9b\072\uff9b\073\uff9b" +
    "\074\uff9b\075\uff9b\101\uff9b\102\uff9b\104\uff9b\001\002\000" +
    "\030\015\uff9c\065\uff9c\066\uff9c\070\uff9c\072\uff9c\073\uff9c" +
    "\074\uff9c\075\uff9c\101\uff9c\102\uff9c\104\uff9c\001\002\000" +
    "\050\002\uff99\005\uff99\006\uff99\007\uff99\010\uff99\016\uff99" +
    "\065\uff99\066\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074" +
    "\uff99\075\uff99\076\uff99\077\uff99\100\uff99\101\uff99\104\uff99" +
    "\001\002\000\026\015\045\065\051\066\044\070\060\072" +
    "\061\073\055\074\056\075\043\101\067\104\065\001\002" +
    "\000\050\002\uff97\005\uff97\006\uff97\007\uff97\010\uff97\016" +
    "\uff97\065\uff97\066\uff97\070\uff97\071\256\072\uff97\073\uff97" +
    "\074\uff97\075\uff97\076\uff97\077\uff97\100\uff97\101\uff97\104" +
    "\uff97\001\002\000\026\015\045\065\051\066\044\070\060" +
    "\072\061\073\055\074\056\075\043\101\067\104\065\001" +
    "\002\000\050\002\uff96\005\uff96\006\uff96\007\uff96\010\uff96" +
    "\016\uff96\065\uff96\066\uff96\070\uff96\071\uff96\072\uff96\073" +
    "\uff96\074\uff96\075\uff96\076\uff96\077\uff96\100\uff96\101\uff96" +
    "\104\uff96\001\002\000\026\015\045\065\051\066\044\070" +
    "\060\072\061\073\055\074\056\075\043\101\067\104\065" +
    "\001\002\000\010\006\263\102\262\104\264\001\002\000" +
    "\044\011\073\017\123\020\110\040\072\042\077\043\115" +
    "\044\121\045\100\046\076\056\122\057\113\060\120\061" +
    "\111\062\075\063\114\102\311\104\116\001\002\000\004" +
    "\104\305\001\002\000\004\041\302\001\002\000\004\102" +
    "\266\001\002\000\044\011\073\017\123\020\110\040\072" +
    "\042\077\043\115\044\121\045\100\046\076\056\122\057" +
    "\113\060\120\061\111\062\075\063\114\102\270\104\116" +
    "\001\002\000\040\017\146\020\134\021\136\022\127\023" +
    "\143\024\131\025\132\030\133\031\145\032\135\033\147" +
    "\034\140\035\141\036\142\037\130\001\002\000\006\012" +
    "\277\104\275\001\002\000\042\017\146\020\134\021\136" +
    "\022\127\023\143\024\131\025\132\030\133\031\145\032" +
    "\135\033\147\034\140\035\141\036\142\037\130\102\272" +
    "\001\002\000\006\012\273\104\275\001\002\000\026\015" +
    "\uff94\065\uff94\066\uff94\070\uff94\072\uff94\073\uff94\074\uff94" +
    "\075\uff94\101\uff94\104\uff94\001\002\000\004\012\276\001" +
    "\002\000\006\026\162\027\156\001\002\000\026\015\uff95" +
    "\065\uff95\066\uff95\070\uff95\072\uff95\073\uff95\074\uff95\075" +
    "\uff95\101\uff95\104\uff95\001\002\000\026\015\uff92\065\uff92" +
    "\066\uff92\070\uff92\072\uff92\073\uff92\074\uff92\075\uff92\101" +
    "\uff92\104\uff92\001\002\000\004\012\301\001\002\000\026" +
    "\015\uff93\065\uff93\066\uff93\070\uff93\072\uff93\073\uff93\074" +
    "\uff93\075\uff93\101\uff93\104\uff93\001\002\000\006\062\303" +
    "\104\304\001\002\000\004\102\uff88\001\002\000\004\102" +
    "\uff89\001\002\000\004\041\306\001\002\000\006\062\307" +
    "\104\310\001\002\000\004\102\uff86\001\002\000\004\102" +
    "\uff87\001\002\000\006\012\317\104\275\001\002\000\042" +
    "\017\146\020\134\021\136\022\127\023\143\024\131\025" +
    "\132\030\133\031\145\032\135\033\147\034\140\035\141" +
    "\036\142\037\130\102\313\001\002\000\006\012\314\104" +
    "\275\001\002\000\026\015\uff90\065\uff90\066\uff90\070\uff90" +
    "\072\uff90\073\uff90\074\uff90\075\uff90\101\uff90\104\uff90\001" +
    "\002\000\004\012\316\001\002\000\026\015\uff91\065\uff91" +
    "\066\uff91\070\uff91\072\uff91\073\uff91\074\uff91\075\uff91\101" +
    "\uff91\104\uff91\001\002\000\026\015\uff8e\065\uff8e\066\uff8e" +
    "\070\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e\101\uff8e\104" +
    "\uff8e\001\002\000\004\012\321\001\002\000\026\015\uff8f" +
    "\065\uff8f\066\uff8f\070\uff8f\072\uff8f\073\uff8f\074\uff8f\075" +
    "\uff8f\101\uff8f\104\uff8f\001\002\000\050\002\uff98\005\uff98" +
    "\006\uff98\007\uff98\010\uff98\016\uff98\065\uff98\066\uff98\070" +
    "\uff98\071\uff98\072\uff98\073\uff98\074\uff98\075\uff98\076\uff98" +
    "\077\uff98\100\uff98\101\uff98\104\uff98\001\002\000\004\072" +
    "\324\001\002\000\004\011\246\001\002\000\004\102\326" +
    "\001\002\000\050\002\uff9a\005\uff9a\006\uff9a\007\uff9a\010" +
    "\uff9a\016\uff9a\065\uff9a\066\uff9a\070\uff9a\071\uff9a\072\uff9a" +
    "\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a\101" +
    "\uff9a\104\uff9a\001\002\000\050\002\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\016\uffbc\065\uffbc\066\uffbc\070\uffbc\071" +
    "\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc" +
    "\100\uffbc\101\uffbc\104\uffbc\001\002\000\004\104\331\001" +
    "\002\000\004\012\332\001\002\000\004\102\333\001\002" +
    "\000\050\002\uff85\005\uff85\006\uff85\007\uff85\010\uff85\016" +
    "\uff85\065\uff85\066\uff85\070\uff85\071\uff85\072\uff85\073\uff85" +
    "\074\uff85\075\uff85\076\uff85\077\uff85\100\uff85\101\uff85\104" +
    "\uff85\001\002\000\026\016\345\065\051\066\044\070\060" +
    "\072\061\073\055\074\056\075\043\101\067\104\065\001" +
    "\002\000\034\016\uffc3\065\051\066\044\070\060\072\061" +
    "\073\055\074\056\075\043\076\uffc3\077\uffc3\100\uffc3\101" +
    "\067\104\065\001\002\000\034\006\004\007\007\010\015" +
    "\016\uff79\065\uff79\066\uff79\070\uff79\072\uff79\073\uff79\074" +
    "\uff79\075\uff79\101\uff79\104\uff79\001\002\000\004\016\341" +
    "\001\002\000\050\002\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\016\uffc5\065\uffc5\066\uffc5\070\uffc5\071\uffc5\072\uffc5" +
    "\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101" +
    "\uffc5\104\uffc5\001\002\000\050\002\uffc9\005\uffc9\006\uffc9" +
    "\007\uffc9\010\uffc9\016\uffc9\065\uffc9\066\uffc9\070\uffc9\071" +
    "\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9" +
    "\100\uffc9\101\uffc9\104\uffc9\001\002\000\026\016\uff7a\065" +
    "\uff7a\066\uff7a\070\uff7a\072\uff7a\073\uff7a\074\uff7a\075\uff7a" +
    "\101\uff7a\104\uff7a\001\002\000\012\016\uffc4\076\uffc4\077" +
    "\uffc4\100\uffc4\001\002\000\004\016\346\001\002\000\050" +
    "\002\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\016\uffc7\065" +
    "\uffc7\066\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7" +
    "\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\104\uffc7\001" +
    "\002\000\050\002\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\016\uffc8\065\uffc8\066\uffc8\070\uffc8\071\uffc8\072\uffc8\073" +
    "\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8" +
    "\104\uffc8\001\002\000\046\011\073\012\352\017\123\020" +
    "\110\040\072\042\077\043\115\044\121\045\100\046\076" +
    "\056\122\057\113\060\120\061\111\062\075\063\114\064" +
    "\350\104\116\001\002\000\004\012\356\001\002\000\004" +
    "\012\354\001\002\000\004\102\353\001\002\000\050\002" +
    "\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\016\uff8b\065\uff8b" +
    "\066\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075" +
    "\uff8b\076\uff8b\077\uff8b\100\uff8b\101\uff8b\104\uff8b\001\002" +
    "\000\004\102\355\001\002\000\050\002\uff8d\005\uff8d\006" +
    "\uff8d\007\uff8d\010\uff8d\016\uff8d\065\uff8d\066\uff8d\070\uff8d" +
    "\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\077" +
    "\uff8d\100\uff8d\101\uff8d\104\uff8d\001\002\000\004\102\357" +
    "\001\002\000\050\002\uff8c\005\uff8c\006\uff8c\007\uff8c\010" +
    "\uff8c\016\uff8c\065\uff8c\066\uff8c\070\uff8c\071\uff8c\072\uff8c" +
    "\073\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c\101" +
    "\uff8c\104\uff8c\001\002\000\004\015\361\001\002\000\004" +
    "\077\364\001\002\000\006\016\376\100\375\001\002\000" +
    "\010\016\uff67\077\364\100\uff67\001\002\000\004\062\365" +
    "\001\002\000\004\055\366\001\002\000\034\016\uff63\065" +
    "\051\066\044\070\060\072\061\073\055\074\056\075\043" +
    "\076\367\077\uff63\100\uff63\101\067\104\065\001\002\000" +
    "\004\102\373\001\002\000\012\016\uff64\076\371\077\uff64" +
    "\100\uff64\001\002\000\004\102\372\001\002\000\010\016" +
    "\uff66\077\uff66\100\uff66\001\002\000\010\016\uff65\077\uff65" +
    "\100\uff65\001\002\000\006\016\uff68\100\uff68\001\002\000" +
    "\004\055\u0101\001\002\000\050\002\uff69\005\uff69\006\uff69" +
    "\007\uff69\010\uff69\016\uff69\065\uff69\066\uff69\070\uff69\071" +
    "\uff69\072\uff69\073\uff69\074\uff69\075\uff69\076\uff69\077\uff69" +
    "\100\uff69\101\uff69\104\uff69\001\002\000\004\016\u0100\001" +
    "\002\000\050\002\uff6a\005\uff6a\006\uff6a\007\uff6a\010\uff6a" +
    "\016\uff6a\065\uff6a\066\uff6a\070\uff6a\071\uff6a\072\uff6a\073" +
    "\uff6a\074\uff6a\075\uff6a\076\uff6a\077\uff6a\100\uff6a\101\uff6a" +
    "\104\uff6a\001\002\000\026\065\051\066\044\070\060\072" +
    "\061\073\055\074\056\075\043\076\u0102\101\067\104\065" +
    "\001\002\000\004\102\u0106\001\002\000\004\076\u0104\001" +
    "\002\000\004\102\u0105\001\002\000\004\016\uff62\001\002" +
    "\000\004\016\uff61\001\002\000\004\011\u0108\001\002\000" +
    "\010\006\031\007\033\012\u0109\001\002\000\026\015\uff7d" +
    "\065\uff7d\066\uff7d\070\uff7d\072\uff7d\073\uff7d\074\uff7d\075" +
    "\uff7d\101\uff7d\104\uff7d\001\002\000\004\104\u010d\001\002" +
    "\000\004\012\u010c\001\002\000\026\015\uff7e\065\uff7e\066" +
    "\uff7e\070\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e\101\uff7e" +
    "\104\uff7e\001\002\000\010\012\uff6d\013\157\103\u010e\001" +
    "\002\000\006\006\031\007\033\001\002\000\010\012\uff6e" +
    "\013\157\103\u0110\001\002\000\006\006\031\007\033\001" +
    "\002\000\006\012\uff6f\103\u0112\001\002\000\006\006\031" +
    "\007\033\001\002\000\004\012\uff70\001\002\000\004\012" +
    "\uff71\001\002\000\004\012\uff72\001\002\000\004\011\u0117" +
    "\001\002\000\004\012\u0118\001\002\000\026\015\045\065" +
    "\051\066\044\070\060\072\061\073\055\074\056\075\043" +
    "\101\067\104\065\001\002\000\014\002\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\001\002\000\004\005\ufffa\001\002" +
    "\000\004\104\u0140\001\002\000\004\104\u011f\001\002\000" +
    "\006\102\uffd0\103\u013b\001\002\000\004\102\u013a\001\002" +
    "\000\006\013\157\041\u0120\001\002\000\042\011\073\017" +
    "\123\020\110\040\072\042\077\043\115\044\121\045\100" +
    "\046\076\056\u0137\057\113\060\u0136\061\111\062\075\063" +
    "\114\104\116\001\002\000\006\013\157\041\u0122\001\002" +
    "\000\044\011\073\015\u012a\017\123\020\110\040\072\042" +
    "\077\043\115\044\121\045\100\046\076\056\122\057\113" +
    "\060\120\061\111\062\075\063\114\104\116\001\002\000" +
    "\004\041\u0124\001\002\000\044\011\073\015\u0127\017\123" +
    "\020\110\040\072\042\077\043\115\044\121\045\100\046" +
    "\076\056\122\057\113\060\120\061\111\062\075\063\114" +
    "\104\116\001\002\000\006\102\uffcb\103\uffcb\001\002\000" +
    "\006\102\uffca\103\uffca\001\002\000\004\015\u012a\001\002" +
    "\000\004\016\u0132\001\002\000\006\016\uff83\103\u0130\001" +
    "\002\000\042\011\073\017\123\020\110\040\072\042\077" +
    "\043\115\044\121\045\100\046\076\056\122\057\113\060" +
    "\120\061\111\062\075\063\114\104\116\001\002\000\006" +
    "\016\uff80\103\u012e\001\002\000\004\016\u012d\001\002\000" +
    "\010\016\uff81\102\uff81\103\uff81\001\002\000\042\011\073" +
    "\017\123\020\110\040\072\042\077\043\115\044\121\045" +
    "\100\046\076\056\122\057\113\060\120\061\111\062\075" +
    "\063\114\104\116\001\002\000\004\016\uff7f\001\002\000" +
    "\004\015\u012a\001\002\000\004\016\uff82\001\002\000\006" +
    "\102\uff84\103\uff84\001\002\000\006\102\uffcd\103\uffcd\001" +
    "\002\000\006\102\uffcc\103\uffcc\001\002\000\006\102\uffce" +
    "\103\uffce\001\002\000\044\017\uff38\020\uff38\021\uff38\022" +
    "\uff38\023\uff38\024\uff38\025\uff38\030\uff38\031\uff38\032\uff38" +
    "\033\uff38\034\uff38\035\uff38\036\uff38\037\uff38\102\u0139\103" +
    "\uff38\001\002\000\044\017\uff3a\020\uff3a\021\uff3a\022\uff3a" +
    "\023\uff3a\024\uff3a\025\uff3a\030\uff3a\031\uff3a\032\uff3a\033" +
    "\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a\102\u0138\103\uff3a" +
    "\001\002\000\014\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\001\002\000\014\004\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\001\002\000\014\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\001\002\000\004\104\u013d\001\002\000\004" +
    "\102\uffcf\001\002\000\006\013\157\041\u013e\001\002\000" +
    "\042\011\073\017\123\020\110\040\072\042\077\043\115" +
    "\044\121\045\100\046\076\056\122\057\113\060\120\061" +
    "\111\062\075\063\114\104\116\001\002\000\004\102\u0146" +
    "\001\002\000\006\013\157\041\u0141\001\002\000\042\011" +
    "\073\017\123\020\110\040\072\042\077\043\115\044\121" +
    "\045\100\046\076\056\122\057\u0143\060\120\061\u0142\062" +
    "\075\063\114\104\116\001\002\000\044\017\uff37\020\uff37" +
    "\021\uff37\022\uff37\023\uff37\024\uff37\025\uff37\030\uff37\031" +
    "\uff37\032\uff37\033\uff37\034\uff37\035\uff37\036\uff37\037\uff37" +
    "\102\u0145\103\uff37\001\002\000\044\017\uff39\020\uff39\021" +
    "\uff39\022\uff39\023\uff39\024\uff39\025\uff39\030\uff39\031\uff39" +
    "\032\uff39\033\uff39\034\uff39\035\uff39\036\uff39\037\uff39\102" +
    "\u0144\103\uff39\001\002\000\014\004\uffef\005\uffef\006\uffef" +
    "\007\uffef\010\uffef\001\002\000\014\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\001\002\000\014\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\001\002\000\040\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\016\ufff5\065\ufff5\066\ufff5" +
    "\070\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\101\ufff5\104" +
    "\ufff5\001\002\000\006\102\uffe0\103\u0171\001\002\000\006" +
    "\102\uffe2\103\u016f\001\002\000\004\102\u016e\001\002\000" +
    "\006\102\uffe1\103\u016a\001\002\000\014\011\u014f\013\157" +
    "\041\u014d\102\uffdb\103\uffdb\001\002\000\042\011\073\017" +
    "\123\020\110\040\072\042\077\043\115\044\121\045\100" +
    "\046\076\056\122\057\u0167\060\120\061\u0166\062\075\063" +
    "\114\104\116\001\002\000\012\013\157\041\u015e\102\uffd8" +
    "\103\uffd8\001\002\000\010\006\031\007\033\012\u0150\001" +
    "\002\000\004\102\u015d\001\002\000\004\012\u015b\001\002" +
    "\000\010\012\uff73\013\157\103\u0153\001\002\000\006\006" +
    "\031\007\033\001\002\000\010\012\uff74\013\157\103\u0155" +
    "\001\002\000\006\006\031\007\033\001\002\000\006\012" +
    "\uff75\103\u0157\001\002\000\006\006\031\007\033\001\002" +
    "\000\004\012\uff77\001\002\000\004\012\uff76\001\002\000" +
    "\004\012\uff78\001\002\000\004\102\u015c\001\002\000\040" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\016\uffe4\065" +
    "\uffe4\066\uffe4\070\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4" +
    "\101\uffe4\104\uffe4\001\002\000\040\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\016\uffe3\065\uffe3\066\uffe3\070\uffe3" +
    "\072\uffe3\073\uffe3\074\uffe3\075\uffe3\101\uffe3\104\uffe3\001" +
    "\002\000\044\011\073\015\u012a\017\123\020\110\040\072" +
    "\042\077\043\115\044\121\045\100\046\076\056\122\057" +
    "\113\060\120\061\111\062\075\063\114\104\116\001\002" +
    "\000\010\041\u0160\102\uffd5\103\uffd5\001\002\000\044\011" +
    "\073\015\u0127\017\123\020\110\040\072\042\077\043\115" +
    "\044\121\045\100\046\076\056\122\057\113\060\120\061" +
    "\111\062\075\063\114\104\116\001\002\000\006\102\uffd7" +
    "\103\uffd7\001\002\000\006\102\uffd6\103\uffd6\001\002\000" +
    "\006\102\uffda\103\uffda\001\002\000\006\102\uffd9\103\uffd9" +
    "\001\002\000\006\102\uffdc\103\uffdc\001\002\000\044\017" +
    "\uff37\020\uff37\021\uff37\022\uff37\023\uff37\024\uff37\025\uff37" +
    "\030\uff37\031\uff37\032\uff37\033\uff37\034\uff37\035\uff37\036" +
    "\uff37\037\uff37\102\u0169\103\uff37\001\002\000\044\017\uff39" +
    "\020\uff39\021\uff39\022\uff39\023\uff39\024\uff39\025\uff39\030" +
    "\uff39\031\uff39\032\uff39\033\uff39\034\uff39\035\uff39\036\uff39" +
    "\037\uff39\102\u0168\103\uff39\001\002\000\040\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\016\uffe7\065\uffe7\066\uffe7" +
    "\070\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\101\uffe7\104" +
    "\uffe7\001\002\000\040\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\016\uffe6\065\uffe6\066\uffe6\070\uffe6\072\uffe6\073" +
    "\uffe6\074\uffe6\075\uffe6\101\uffe6\104\uffe6\001\002\000\004" +
    "\104\u016c\001\002\000\004\102\uffde\001\002\000\012\013" +
    "\157\041\u016d\102\uffdb\103\uffdb\001\002\000\042\011\073" +
    "\017\123\020\110\040\072\042\077\043\115\044\121\045" +
    "\100\046\076\056\122\057\113\060\120\061\111\062\075" +
    "\063\114\104\116\001\002\000\040\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\016\uffe5\065\uffe5\066\uffe5\070\uffe5" +
    "\072\uffe5\073\uffe5\074\uffe5\075\uffe5\101\uffe5\104\uffe5\001" +
    "\002\000\004\104\u016c\001\002\000\004\102\uffdf\001\002" +
    "\000\004\104\u016c\001\002\000\004\102\uffdd\001\002\000" +
    "\004\002\001\001\002\000\004\102\u0182\001\002\000\040" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\016\ufff6\065" +
    "\ufff6\066\ufff6\070\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6" +
    "\101\ufff6\104\ufff6\001\002\000\014\011\u0178\013\157\041" +
    "\u0177\102\uffdb\103\uffdb\001\002\000\042\011\073\017\123" +
    "\020\110\040\072\042\077\043\115\044\121\045\100\046" +
    "\076\056\u017f\057\113\060\u017e\061\111\062\075\063\114" +
    "\104\116\001\002\000\010\006\031\007\033\012\u0179\001" +
    "\002\000\004\102\u017d\001\002\000\004\012\u017b\001\002" +
    "\000\004\102\u017c\001\002\000\040\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\016\uffe9\065\uffe9\066\uffe9\070\uffe9" +
    "\072\uffe9\073\uffe9\074\uffe9\075\uffe9\101\uffe9\104\uffe9\001" +
    "\002\000\040\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\016\uffe8\065\uffe8\066\uffe8\070\uffe8\072\uffe8\073\uffe8\074" +
    "\uffe8\075\uffe8\101\uffe8\104\uffe8\001\002\000\044\017\uff38" +
    "\020\uff38\021\uff38\022\uff38\023\uff38\024\uff38\025\uff38\030" +
    "\uff38\031\uff38\032\uff38\033\uff38\034\uff38\035\uff38\036\uff38" +
    "\037\uff38\102\u0181\103\uff38\001\002\000\044\017\uff3a\020" +
    "\uff3a\021\uff3a\022\uff3a\023\uff3a\024\uff3a\025\uff3a\030\uff3a" +
    "\031\uff3a\032\uff3a\033\uff3a\034\uff3a\035\uff3a\036\uff3a\037" +
    "\uff3a\102\u0180\103\uff3a\001\002\000\040\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\016\uffec\065\uffec\066\uffec\070" +
    "\uffec\072\uffec\073\uffec\074\uffec\075\uffec\101\uffec\104\uffec" +
    "\001\002\000\040\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\016\uffeb\065\uffeb\066\uffeb\070\uffeb\072\uffeb\073\uffeb" +
    "\074\uffeb\075\uffeb\101\uffeb\104\uffeb\001\002\000\040\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\010\uffea\016\uffea\065\uffea" +
    "\066\uffea\070\uffea\072\uffea\073\uffea\074\uffea\075\uffea\101" +
    "\uffea\104\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0180\000\014\002\005\003\004\010\010\013\012\014" +
    "\013\001\001\000\014\017\u0148\020\u014a\021\u0147\022\u0174" +
    "\024\u0173\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\u0148\020\u014a\021\u0147\023\u0146\024\u0149\001\001" +
    "\000\002\001\001\000\010\010\010\013\u0119\014\013\001" +
    "\001\000\002\001\001\000\004\003\026\001\001\000\010" +
    "\010\010\013\025\014\013\001\001\000\006\027\015\030" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\015\030\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\040\012\036\016\031\076" +
    "\035\077\027\100\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\006\046" +
    "\036\056\037\051\040\053\041\045\042\062\043\061\044" +
    "\063\050\065\051\047\052\052\061\067\001\001\000\002" +
    "\001\001\000\016\011\040\012\036\016\041\076\035\077" +
    "\027\100\033\001\001\000\002\001\001\000\004\062\357" +
    "\001\001\000\002\001\001\000\036\006\334\007\336\010" +
    "\335\015\333\036\056\037\051\040\053\041\045\042\062" +
    "\043\061\044\063\050\065\051\047\061\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\006\046\036\056\037\051\040\053\041\045" +
    "\042\062\043\061\044\063\050\065\051\047\052\322\061" +
    "\067\001\001\000\004\063\257\001\001\000\002\001\001" +
    "\000\004\062\253\001\001\000\004\062\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\057\222\070\220\001\001\000\002\001\001\000\032\004" +
    "\124\005\073\037\102\061\125\062\100\066\101\067\116" +
    "\071\104\072\106\073\103\074\111\075\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\215\037\102\061\125\062\100\066\101\067\116\071" +
    "\104\072\106\073\103\074\111\075\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\206" +
    "\037\102\061\125\062\100\066\101\067\116\071\104\072" +
    "\106\073\103\074\111\075\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\201\001\001\000\006\064" +
    "\152\065\151\001\001\000\004\032\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\064\143\065\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\150\037\102\061\125\062\100\066\101\067\116" +
    "\071\104\072\106\073\103\074\111\075\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\064\152\065\151\001\001\000\006\064\143\065\136\001" +
    "\001\000\002\001\001\000\030\004\154\037\102\061\125" +
    "\062\100\066\101\067\116\071\104\072\106\073\103\074" +
    "\111\075\153\001\001\000\006\064\152\065\151\001\001" +
    "\000\006\064\143\065\136\001\001\000\002\001\001\000" +
    "\032\004\124\005\171\037\102\061\125\062\100\066\101" +
    "\067\116\071\104\072\106\073\103\074\111\075\105\001" +
    "\001\000\004\057\170\001\001\000\034\004\124\005\162" +
    "\035\164\037\102\061\125\062\100\066\101\067\116\071" +
    "\104\072\106\073\103\074\111\075\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\124\005\162\035\167" +
    "\037\102\061\125\062\100\066\101\067\116\071\104\072" +
    "\106\073\103\074\111\075\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\124\005\175\037\102\061\125\062\100\066\101" +
    "\067\116\071\104\072\106\073\103\074\111\075\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\124" +
    "\005\177\037\102\061\125\062\100\066\101\067\116\071" +
    "\104\072\106\073\103\074\111\075\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\124\005\203\037\102\061\125\062\100\066\101\067\116" +
    "\071\104\072\106\073\103\074\111\075\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\064\152\065\151" +
    "\001\001\000\006\064\143\065\136\001\001\000\032\004" +
    "\124\005\210\037\102\061\125\062\100\066\101\067\116" +
    "\071\104\072\106\073\103\074\111\075\105\001\001\000" +
    "\002\001\001\000\032\004\124\005\212\037\102\061\125" +
    "\062\100\066\101\067\116\071\104\072\106\073\103\074" +
    "\111\075\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\064\152\065\151\001\001\000\006\064\143\065" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\004\124\005\242\037\102\061\125\062\100\066\101\067" +
    "\116\071\104\072\106\073\103\074\111\075\105\001\001" +
    "\000\002\001\001\000\006\057\233\070\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\004\124\005\240\037\102\061\125\062\100" +
    "\066\101\067\116\071\104\072\106\073\103\074\111\075" +
    "\105\001\001\000\004\070\235\001\001\000\002\001\001" +
    "\000\032\004\124\005\236\037\102\061\125\062\100\066" +
    "\101\067\116\071\104\072\106\073\103\074\111\075\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\046\036\056\037\051\040\053\041\045\042" +
    "\062\043\061\044\063\050\065\051\047\052\252\061\067" +
    "\001\001\000\030\004\247\037\102\061\125\062\100\066" +
    "\101\067\116\071\104\072\106\073\103\074\111\075\246" +
    "\001\001\000\006\064\152\065\151\001\001\000\006\064" +
    "\143\065\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\006\046\036\056\037\051\040" +
    "\053\041\045\042\062\043\061\044\063\050\065\051\047" +
    "\052\254\061\067\001\001\000\002\001\001\000\032\006" +
    "\046\036\056\037\051\040\053\041\045\042\062\043\061" +
    "\044\063\050\065\051\047\052\256\061\067\001\001\000" +
    "\002\001\001\000\032\006\046\036\056\037\051\040\053" +
    "\041\045\042\062\043\061\044\063\050\065\051\047\052" +
    "\321\061\067\001\001\000\004\060\264\001\001\000\030" +
    "\004\311\037\102\061\125\062\100\066\101\067\116\071" +
    "\104\072\106\073\103\074\111\075\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\270\037\102\061\125\062\100\066\101\067\116\071\104" +
    "\072\106\073\103\074\111\075\266\001\001\000\006\064" +
    "\152\065\151\001\001\000\004\061\277\001\001\000\006" +
    "\064\143\065\136\001\001\000\004\061\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\317\001\001\000\006\064\143" +
    "\065\136\001\001\000\004\061\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\324\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\006\334\007\343\036\056\037\051\040\053\041\045\042" +
    "\062\043\061\044\063\050\065\051\047\061\067\001\001" +
    "\000\032\006\334\007\342\036\056\037\051\040\053\041" +
    "\045\042\062\043\061\044\063\050\065\051\047\061\067" +
    "\001\001\000\006\010\335\015\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\124\005\350\037\102\061\125" +
    "\062\100\066\101\067\116\071\104\072\106\073\103\074" +
    "\111\075\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\046\361\047\362\001\001\000\004\045" +
    "\376\001\001\000\006\046\373\047\362\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\006\334\007\367\036" +
    "\056\037\051\040\053\041\045\042\062\043\061\044\063" +
    "\050\065\051\047\061\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\006\334" +
    "\007\u0102\036\056\037\051\040\053\041\045\042\062\043" +
    "\061\044\063\050\065\051\047\061\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\u010a" +
    "\077\u0109\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\u010e\001\001" +
    "\000\006\031\u0114\077\u0109\001\001\000\004\057\u0110\001" +
    "\001\000\006\031\u0113\077\u0109\001\001\000\002\001\001" +
    "\000\006\031\u0112\077\u0109\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\046\036\056\037\051\040\053\041" +
    "\045\042\062\043\061\044\063\050\065\051\047\052\u0118" +
    "\061\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\u011c\026\u013e\001\001\000\006\025\u011c\026\u011d" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\u0120\001\001\000\032\004\124\005\u0134\037\102\061\125" +
    "\062\100\066\101\067\116\071\104\072\106\073\103\074" +
    "\111\075\105\001\001\000\004\057\u0122\001\001\000\034" +
    "\004\124\005\u0132\037\102\056\u0133\061\125\062\100\066" +
    "\101\067\116\071\104\072\106\073\103\074\111\075\105" +
    "\001\001\000\002\001\001\000\034\004\124\005\u0124\037" +
    "\102\053\u0125\061\125\062\100\066\101\067\116\071\104" +
    "\072\106\073\103\074\111\075\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\055\u0127\056\u0128\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\124\005" +
    "\u012a\037\102\054\u012b\061\125\062\100\066\101\067\116" +
    "\071\104\072\106\073\103\074\111\075\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\124\005\u012a\037\102\054\u012e\061\125\062\100\066" +
    "\101\067\116\071\104\072\106\073\103\074\111\075\105" +
    "\001\001\000\002\001\001\000\006\055\u0130\056\u0128\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\025\u011c\026\u013b\001\001\000\002\001" +
    "\001\000\004\057\u0120\001\001\000\032\004\124\005\u0134" +
    "\037\102\061\125\062\100\066\101\067\116\071\104\072" +
    "\106\073\103\074\111\075\105\001\001\000\002\001\001" +
    "\000\004\057\u0120\001\001\000\032\004\124\005\u0134\037" +
    "\102\061\125\062\100\066\101\067\116\071\104\072\106" +
    "\073\103\074\111\075\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\u014d" +
    "\001\001\000\032\004\124\005\u0164\037\102\061\125\062" +
    "\100\066\101\067\116\071\104\072\106\073\103\074\111" +
    "\075\105\001\001\000\004\057\u015e\001\001\000\006\034" +
    "\u0150\077\u0151\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\u0153\001\001\000\006\034\u0159\077\u0151\001" +
    "\001\000\004\057\u0155\001\001\000\006\034\u0158\077\u0151" +
    "\001\001\000\002\001\001\000\006\034\u0157\077\u0151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\124\005\u0162\037\102\056\u0163\061\125\062\100" +
    "\066\101\067\116\071\104\072\106\073\103\074\111\075" +
    "\105\001\001\000\002\001\001\000\034\004\124\005\u0160" +
    "\037\102\053\u0161\061\125\062\100\066\101\067\116\071" +
    "\104\072\106\073\103\074\111\075\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\u0148\020" +
    "\u014a\021\u0147\024\u016a\001\001\000\002\001\001\000\004" +
    "\057\u014d\001\001\000\032\004\124\005\u0164\037\102\061" +
    "\125\062\100\066\101\067\116\071\104\072\106\073\103" +
    "\074\111\075\105\001\001\000\002\001\001\000\012\017" +
    "\u0148\020\u014a\021\u0147\024\u016f\001\001\000\002\001\001" +
    "\000\012\017\u0148\020\u014a\021\u0147\024\u0171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\u014d\001\001\000\032\004\124\005" +
    "\u0164\037\102\061\125\062\100\066\101\067\116\071\104" +
    "\072\106\073\103\074\111\075\105\001\001\000\006\034" +
    "\u0179\077\u0151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   

                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);
        System.out.flush();
        System.out.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= DEFINICIONVARIABLECAB PROGRAMAPRINCIPAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= DEFINICIONVARIABLECAB PROGRAMAPRINCIPAL DEFINICIONFUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= PROGRAMAPRINCIPAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMAPRINCIPAL ::= pr_vacio pr_principal par_ab par_ce BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMAPRINCIPAL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFINICIONVARIABLECAB ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEFINICIONVARIABLECAB ::= DECLARACIONCON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEFINICIONVARIABLECAB ::= DECLARACION DEFINICIONVARIABLECAB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEFINICIONVARIABLECAB ::= DECLARACIONCON DEFINICIONVARIABLECAB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLECAB",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEFINICIONFUNCION ::= DECLARACIONFUNCION DEFINICIONFUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONFUNCION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEFINICIONFUNCION ::= DECLARACIONFUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONFUNCION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION ::= pr_entero DECENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION ::= pr_real DECREAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= pr_cadena DECCADALL punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONCON ::= pr_const pr_entero DECCONALL punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACIONCON ::= pr_const pr_real DECCONALL punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONCON ::= pr_const pr_entero id igual octa_e punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONCON ::= pr_const pr_entero id igual hexa_e punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONCON ::= pr_const pr_real id igual octa_r punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACIONCON ::= pr_const pr_real id igual hexa_r punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCON",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACIONFUNCION ::= DECLARACIONFUNCIONCABECERA BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONFUNCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECENTERO ::= id igual octa_e punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECENTERO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECENTERO ::= id igual hexa_e punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECENTERO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECENTERO ::= DECALL punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECENTERO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECENTERO ::= id par_ab PARAMETROPROTOTIPO par_ce punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECENTERO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECENTERO ::= id par_ab par_ce punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECENTERO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECREAL ::= id igual octa_r punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREAL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECREAL ::= id igual hexa_r punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREAL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECREAL ::= DECALL punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREAL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECREAL ::= id par_ab PARAMETROPROTOTIPO par_ce punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREAL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECREAL ::= id par_ab par_ce punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREAL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECALL ::= DECSIMPLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECALL ::= DECVECT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECALL ::= DECMAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECALL ::= DECSIMPLE coma DECALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECALL ::= DECVECT coma DECALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECALL ::= DECMAT coma DECALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECSIMPLE ::= id igual EXPGEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECSIMPLE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECSIMPLE ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECSIMPLE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECVECT ::= id INDICE igual EXPGEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECVECT",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECVECT ::= id INDICE igual VECTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECVECT",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECVECT ::= id INDICE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECVECT",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECMAT ::= id INDICE INDICE igual EXPGEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECMAT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECMAT ::= id INDICE INDICE igual MATRIZ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECMAT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECMAT ::= id INDICE INDICE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECMAT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECCAD ::= id igual cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCAD",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECCAD ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCAD",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECCADALL ::= DECCAD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCADALL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECCADALL ::= DECCAD coma DECCADALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCADALL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECCONALL ::= DECCON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONALL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECCONALL ::= DECCON coma DECCONALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONALL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECCON ::= id igual EXPGEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCON",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECCON ::= id INDICE igual EXPGEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCON",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECCON ::= id INDICE igual VECTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCON",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECCON ::= id INDICE INDICE igual EXPGEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCON",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECCON ::= id INDICE INDICE igual MATRIZ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCON",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUE ::= ll_ab NSENTENCIA ll_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BLOQUE ::= ll_ab DEFINICIONVARIABLE NSENTENCIA ll_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOQUE ::= ll_ab DEFINICIONVARIABLE ll_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BLOQUE ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOQUE ::= ll_ab ll_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NSENTENCIA ::= SENTENCIA NSENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NSENTENCIA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NSENTENCIA ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NSENTENCIA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA ::= CONDICIONALHACERMIENTRAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA ::= CONDICIONALMIENTRAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA ::= CONDICIONALPARA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA ::= CONDICIONALSI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA ::= SENTSELECTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA ::= LLAMADAFUNCION punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA ::= LECTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA ::= ACT punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA ::= pr_retornar EXPGEN punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA ::= pr_retornar punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ACT ::= id decr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ACT ::= id incr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPGEN ::= OPERANDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPGEN",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPGEN ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPGEN",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= OPERANDO OPERADORBINARIO OPERANDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= OPERANDO OPERADORUNARIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= ACT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= OPERADORUNARIO2 OPERANDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= OPERADORFUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= OPERADORCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= OPERADORUNARIO2 EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION OPERADORUNARIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= EXPRESION OPERADORBINARIO EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= EXPRESION OPERADORBINARIO OPERANDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= OPERANDO OPERADORBINARIO EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= par_ab EXPRESION par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= par_ab OPERANDO par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERADORUNARIO2 ::= neg 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORUNARIO2",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERADORUNARIO2 ::= mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORUNARIO2",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERADORUNARIO2 ::= menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORUNARIO2",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ARGUMENTO ::= EXPGEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ARGUMENTO ::= EXPGEN coma ARGUMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ASIGNACION ::= id igual cadena punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ASIGNACION ::= id OPERADORASIGNACION EXPGEN punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ASIGNACION ::= id INDICE OPERADORASIGNACION EXPGEN punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ASIGNACION ::= id INDICE INDICE OPERADORASIGNACION EXPGEN punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONDICIONAL ::= par_ab OPERANDO par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONDICIONAL ::= par_ab EXPRESION par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONDICIONALHACERMIENTRAS ::= pr_hacer BLOQUE pr_mientras CONDICIONAL punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALHACERMIENTRAS",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CONDICIONALMIENTRAS ::= pr_mientras CONDICIONAL BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALMIENTRAS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONDICIONALPARA ::= pr_para CONTROLADOR BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALPARA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONDICIONALSI ::= pr_si CONDICIONAL BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONDICIONALSI ::= pr_si CONDICIONAL BLOQUE pr_sino BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONTROLADOR ::= par_ab INI punto_coma EXPRESION punto_coma ACT par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROLADOR",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONTROLADOR ::= par_ab INI punto_coma EXPRESION punto_coma par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROLADOR",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CONTROLADOR ::= par_ab INI punto_coma punto_coma ACT par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROLADOR",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CONTROLADOR ::= par_ab INI punto_coma punto_coma par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROLADOR",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CONTROLADOR ::= par_ab punto_coma EXPRESION punto_coma ACT par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROLADOR",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CONTROLADOR ::= par_ab punto_coma EXPRESION punto_coma par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROLADOR",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONTROLADOR ::= par_ab punto_coma punto_coma ACT par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROLADOR",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONTROLADOR ::= par_ab punto_coma punto_coma par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROLADOR",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ESCRITURA ::= pr_mostrar par_ab EXPGEN par_ce punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ESCRITURA ::= pr_mostrar par_ab cadena par_ce punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ESCRITURA ::= pr_mostrar par_ab par_ce punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // INDICE ::= cor_ab EXPGEN cor_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDICE",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // INI ::= id igual id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INI",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // INI ::= id igual numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INI",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // INI ::= pr_entero id igual id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INI",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // INI ::= pr_entero id igual numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INI",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LECTURA ::= pr_leer par_ab id par_ce punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LECTURA",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // MATRIZ ::= ll_ab NVECTOR ll_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATRIZ",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NVECTOR ::= VECTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NVECTOR",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NVECTOR ::= VECTOR coma NVECTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NVECTOR",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VECTOR ::= ll_ab NELEMENTO ll_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VECTOR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NELEMENTO ::= EXPGEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NELEMENTO",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NELEMENTO ::= EXPGEN coma NELEMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NELEMENTO",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DECLARACIONFUNCIONCABECERA ::= TIPOVARIABLEFUNCION id par_ab PARAMETRO par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONFUNCIONCABECERA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DECLARACIONFUNCIONCABECERA ::= TIPOVARIABLEFUNCION id par_ab par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONFUNCIONCABECERA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TIPOVARIABLEFUNCION ::= TIPOVARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOVARIABLEFUNCION",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TIPOVARIABLEFUNCION ::= pr_vacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOVARIABLEFUNCION",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DEFINICIONVARIABLE ::= DECLARACION DEFINICIONVARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DEFINICIONVARIABLE ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONVARIABLE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PARAMETROPROTOTIPO ::= TIPONUMERO coma PARAMETROPROTOTIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PARAMETROPROTOTIPO ::= TIPONUMERO INDICE INDICE coma PARAMETROPROTOTIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PARAMETROPROTOTIPO ::= TIPONUMERO INDICE coma PARAMETROPROTOTIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PARAMETROPROTOTIPO ::= TIPONUMERO INDICE INDICE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PARAMETROPROTOTIPO ::= TIPONUMERO INDICE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PARAMETROPROTOTIPO ::= TIPONUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROPROTOTIPO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PARAMETRO ::= TIPONUMERO id coma PARAMETRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PARAMETRO ::= TIPONUMERO id INDICE coma PARAMETRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PARAMETRO ::= TIPONUMERO id INDICE INDICE coma PARAMETRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PARAMETRO ::= TIPONUMERO id INDICE INDICE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PARAMETRO ::= TIPONUMERO id INDICE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // PARAMETRO ::= TIPONUMERO id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // PARAMETROBINARIO ::= par_ab EXPGEN coma EXPGEN par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROBINARIO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // PARAMETROUNARIO ::= par_ab EXPGEN par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROUNARIO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SENTSELECTOR ::= pr_selector CONDICIONAL ll_ab NCASO SENTDEFECTO ll_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTSELECTOR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SENTSELECTOR ::= pr_selector CONDICIONAL ll_ab NCASO ll_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTSELECTOR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NCASO ::= SENTCASO NCASO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NCASO",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NCASO ::= SENTCASO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NCASO",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTCASO ::= pr_caso numero sig_pun NSENTENCIA pr_saltar punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTCASO",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTCASO ::= pr_caso numero sig_pun pr_saltar punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTCASO",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTCASO ::= pr_caso numero sig_pun NSENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTCASO",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SENTCASO ::= pr_caso numero sig_pun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTCASO",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SENTDEFECTO ::= pr_default sig_pun NSENTENCIA pr_saltar punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTDEFECTO",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SENTDEFECTO ::= pr_default sig_pun pr_saltar punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTDEFECTO",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // LLAMADAFUNCION ::= id par_ab par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // LLAMADAFUNCION ::= id par_ab ARGUMENTO par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // OPERADORFUNCION ::= OPERADORPALABRABINARIO PARAMETROBINARIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORFUNCION",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // OPERADORFUNCION ::= OPERADORPALABRAUNARIO PARAMETROUNARIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORFUNCION",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // OPERADORCOND ::= CONDICIONAL sig_int EXPGEN sig_pun EXPGEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORCOND",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // OPERADORASIGNACION ::= a_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORASIGNACION",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // OPERADORASIGNACION ::= a_prod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORASIGNACION",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // OPERADORASIGNACION ::= a_resta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORASIGNACION",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // OPERADORASIGNACION ::= a_suma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORASIGNACION",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // OPERADORASIGNACION ::= igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORASIGNACION",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // OPERADORASIGNACION ::= a_mod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORASIGNACION",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // OPERADORBINARIO ::= dif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORBINARIO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OPERADORBINARIO ::= div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORBINARIO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // OPERADORBINARIO ::= ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORBINARIO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OPERADORBINARIO ::= mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORBINARIO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OPERADORBINARIO ::= mayor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORBINARIO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // OPERADORBINARIO ::= mayor_igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORBINARIO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // OPERADORBINARIO ::= menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORBINARIO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // OPERADORBINARIO ::= menor_igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORBINARIO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // OPERADORBINARIO ::= menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORBINARIO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // OPERADORBINARIO ::= mod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORBINARIO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // OPERADORBINARIO ::= o 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORBINARIO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // OPERADORBINARIO ::= prod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORBINARIO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // OPERADORBINARIO ::= y 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORBINARIO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // OPERADORUNARIO ::= inv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORUNARIO",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // OPERADORUNARIO ::= transp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORUNARIO",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // OPERANDOENTERO ::= LLAMADAFUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // OPERANDOENTERO ::= id INDICE INDICE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // OPERANDOENTERO ::= id INDICE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // OPERANDOENTERO ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // OPERANDOENTERO ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDOENTERO",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // OPERADORPALABRABINARIO ::= pr_suma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORPALABRABINARIO",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // OPERADORPALABRABINARIO ::= pr_resta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORPALABRABINARIO",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // OPERADORPALABRABINARIO ::= pr_prod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORPALABRABINARIO",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // OPERADORPALABRAUNARIO ::= pr_transp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORPALABRAUNARIO",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // OPERADORPALABRAUNARIO ::= pr_inv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORPALABRAUNARIO",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // OPERANDO ::= OPERANDOENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // OPERANDO ::= real 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // OPERANDO ::= octa_e 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // OPERANDO ::= octa_r 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // OPERANDO ::= hexa_e 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // OPERANDO ::= hexa_r 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // TIPONUMERO ::= pr_entero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPONUMERO",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // TIPONUMERO ::= pr_real 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPONUMERO",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // TIPOVARIABLE ::= TIPONUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOVARIABLE",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // TIPOVARIABLE ::= pr_cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOVARIABLE",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
