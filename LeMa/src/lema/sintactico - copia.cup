package lema;
import java_cup.runtime.*;

parser code {:

    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   

                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

terminal id, pr_const, pr_vacio, pr_entero, pr_real, pr_cadena, par_ab, par_ce, ll_ab, ll_ce, mas, menos, prod, div, mod, transp, inv, incr, decr, pr_suma, pr_resta, pr_prod, pr_transp, pr_inv, ident, dif, menor, mayor, menor_igual, mayor_igual, y, o, neg, igual, a_suma, a_resta, a_prod, a_div, sig_int, sig_pun, cor_ab, cor_ce, numero, real, cadena, pr_leer, pr_mostrar, punto_coma, coma, pr_retornar, pr_si, pr_sino, pr_mientras, pr_hacer, pr_para, pr_selector, pr_saltar, pr_caso, pr_default, pr_principal, error_lex;
non terminal object inicio, operadorunario, operadorbinario, operadorasignacion, operador, operando, operandoentero, tiponumero, tipovariable, expresion, indice, matriz, nvector, vector, nelemento, asigidentsimple, asigidentvect, asigidentmat, asigsimple, asigvect, asigmat, asigall, declaracion, declaracioncadena, lectura, escritura, asignacion, declaracionfuncion, declaracionfuncioncabecera, parametro, llamadafuncion, argumento, condicionalsi, condicional, bloque, nsentencia, condicionalmientras, condicionalhacermientras, condicionalpara, controlador, ini,act, sentselector, ncaso, sentcaso, sentdefecto,sentencia;

/*non terminal prueba;*/

start with inicio;

inicio  ::= sentencia
  ;
 
/***---------------------------- simple ----------------------------***/

/* operadores*/
operadorunario ::= transp
	|inv
	|incr
	|decr
	;
operadorbinario ::= mas
	|menos
	|prod
	|div
	|mod
	|ident
	|dif
	|menor
	|mayor
	|menor_igual
	|mayor_igual
	|y
	|o
	;
operadorasignacion ::= igual
	|a_suma
	|a_resta
	|a_prod
	|a_div
	;
operador ::= operadorunario
	|operadorbinario
	;
	
/* operando */
operando ::=  operandoentero
	|real
	;
operandoentero ::=  id
	|numero
	|expresion
	|llamadafuncion
	;	
/* tipos */	
tiponumero ::= pr_entero
	|pr_real
	;

tipovariable ::= tiponumero
	|pr_cadena 
	;

expresion ::= operando operadorbinario operando
	|operando operadorunario
	|neg operando
	;
/* indice */
indice ::= cor_ab  operandoentero cor_ce
	;
/***----------------------------declaracion------------------------------***/

/* elementos y filas */
matriz ::= ll_ab nvector ll_ce
	;
nvector ::= vector coma nvector
	| vector
	;
vector ::= ll_ab nelemento ll_ce
	;
nelemento ::= expresion coma nelemento
	|expresion
	;
	
/* asignacion de identificador */
asigidentsimple::= id igual expresion
	|id
	;
asigidentvect ::= id indice igual vector
	|id indice
	;
asigidentmat ::= id indice indice igual matriz
	|id indice indice
	;	
/* asignacion de identificador varios */
asigsimple ::= asigidentsimple coma asigsimple
	| asigidentsimple
	;
asigvect ::= asigidentvect coma asigvect
	| asigidentvect
	;
asigmat ::= asigidentmat coma asigmat
	| asigidentmat
	;

asigall ::= asigsimple
	|asigvect
	|asigmat
	;
/* declaracion */
declaracion ::= tiponumero asigall punto_coma
	| pr_const tiponumero asigsimple punto_coma /* declaracion de constantes */
	| declaracioncadena
	;
/* declaracion de cadena */
declaracioncadena ::= pr_cadena id igual cadena punto_coma
	|pr_cadena id punto_coma
	;


/***---------------------------------------------------------------------***/


/***----------------------------instrucciones------------------------------***/
/* intrucciones de entrada */
lectura ::= pr_leer par_ab id par_ce punto_coma
	|pr_leer par_ab par_ce punto_coma
	;

/* intrucciones de salida */
escritura ::= pr_mostrar par_ab expresion par_ce punto_coma
	|pr_mostrar par_ab cadena par_ce punto_coma
	|pr_mostrar par_ab par_ce punto_coma
	;

/* sentencias de asignacion */
asignacion ::= id operadorasignacion expresion punto_coma
	;

/*sentecia de declaracion de funciones */
declaracionfuncion ::= declaracionfuncioncabecera bloque
	;
declaracionfuncioncabecera ::= tipovariable id par_ab parametro par_ce punto_coma
	|tipovariable id par_ab par_ce punto_coma
	;
parametro ::= tipovariable coma parametro
	|tipovariable
	;

/* sentencia de llamada a una funcion */
llamadafuncion ::= id par_ab par_ce punto_coma
	|id par_ab argumento par_ce punto_coma
	;
argumento ::= id coma argumento
	|id 
	;

/* sentecia condicional si */
condicionalsi ::= pr_si condicional bloque
	|pr_si condicional bloque pr_sino bloque
	;
condicional ::= par_ab expresion par_ce
	;
bloque ::= sentencia
	|ll_ab nsentencia ll_ce
	;
nsentencia ::= sentencia nsentencia
	|sentencia
	;

/* sentecia condicional mientras */
condicionalmientras ::= pr_mientras condicional bloque
	;

/* sentecia condicional hacer mientras */
condicionalhacermientras ::= pr_hacer bloque pr_mientras condicional punto_coma
	;

/* sentecia condicional para */
condicionalpara ::= pr_para controlador bloque
	;
controlador ::= par_ab ini punto_coma condicional punto_coma act par_ce
	|par_ab ini punto_coma condicional punto_coma par_ce
	|par_ab ini punto_coma punto_coma act par_ce
	|par_ab punto_coma condicional punto_coma act par_ce
	|par_ab punto_coma punto_coma act par_ce
	|par_ab punto_coma condicional punto_coma par_ce
	|par_ab ini punto_coma punto_coma par_ce
	|par_ab punto_coma punto_coma par_ce
	;

ini ::= pr_entero id igual numero
	|pr_entero id igual id
	|id igual numero
	|id igual id
	;
act ::= id decr
	|id incr
	;

/* sentecia de seleccion */
sentselector ::= pr_selector condicional ll_ab ncaso sentdefecto ll_ce
	|pr_selector condicional ll_ab ncaso ll_ce
	;
ncaso ::= sentcaso ncaso
	| sentcaso
	;
sentcaso ::= pr_caso numero sig_pun nsentencia pr_saltar punto_coma
	|pr_caso numero sig_pun nsentencia 
	|pr_caso numero sig_pun 
	;
sentdefecto ::= pr_default sig_pun nsentencia pr_saltar punto_coma
	|pr_default sig_pun pr_saltar punto_coma
	;

/***___***/
sentencia ::= expresion punto_coma
	|declaracion
	|llamadafuncion	 
	|lectura
	|escritura
	|asignacion
	|condicionalsi
	|condicionalmientras
	|condicionalhacermientras
	|condicionalpara
	|sentselector
	;